# Generated by Haxe 4.3.0
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
from threading import RLock as python_lib_threading_RLock
import threading as python_lib_Threading
import sys as python_lib_Sys
import re as python_lib_Re
import os as python_lib_Os
import builtins as python_lib_Builtins
import json as python_lib_Json
import functools as python_lib_Functools
from io import StringIO as python_lib_io_StringIO
from subprocess import Popen as python_lib_subprocess_Popen
import random as python_lib_Random
import shutil as python_lib_Shutil
import time as python_lib_Time
import timeit as python_lib_Timeit
import traceback as python_lib_Traceback
from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
from json import JSONEncoder as python_lib_json_JSONEncoder
from socket import socket as python_lib_socket_Socket
from threading import Semaphore as python_lib_threading_Semaphore
from threading import Thread as python_lib_threading_Thread
import urllib.parse as python_lib_urllib_Parse


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



_hx_classes = {}


class Enum:
    _hx_class_name = "Enum"
    _hx_is_interface = "False"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.tag = None
        _hx_o.index = None
        _hx_o.params = None
Enum._hx_class = Enum
_hx_classes["Enum"] = Enum


class Class: pass


class Date:
    _hx_class_name = "Date"
    _hx_is_interface = "False"
    __slots__ = ("date", "dateUTC")
    _hx_fields = ["date", "dateUTC"]
    _hx_methods = ["toString"]
    _hx_statics = ["now", "makeLocal"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        self.dateUTC = None
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        if (day == 0):
            day = 1
        self.date = Date.makeLocal(python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0))
        self.dateUTC = self.date.astimezone(python_lib_datetime_Timezone.utc)

    def toString(self):
        return self.date.strftime("%Y-%m-%d %H:%M:%S")

    @staticmethod
    def now():
        d = Date(2000,0,1,0,0,0)
        d.date = Date.makeLocal(python_lib_datetime_Datetime.now())
        d.dateUTC = d.date.astimezone(python_lib_datetime_Timezone.utc)
        return d

    @staticmethod
    def makeLocal(date):
        try:
            return date.astimezone()
        except BaseException as _g:
            None
            tzinfo = python_lib_datetime_Datetime.now(python_lib_datetime_Timezone.utc).astimezone().tzinfo
            return date.replace(**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'tzinfo': tzinfo})))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.date = None
        _hx_o.dateUTC = None
Date._hx_class = Date
_hx_classes["Date"] = Date


class EReg:
    _hx_class_name = "EReg"
    _hx_is_interface = "False"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]
    _hx_methods = ["matchSub", "split", "replace", "map"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)

    def matchSub(self,s,pos,_hx_len = None):
        if (_hx_len is None):
            _hx_len = -1
        if (_hx_len != -1):
            self.matchObj = self.pattern.search(s,pos,(pos + _hx_len))
        else:
            self.matchObj = self.pattern.search(s,pos)
        return (self.matchObj is not None)

    def split(self,s):
        if self._hx_global:
            ret = []
            lastEnd = 0
            x = python_HaxeIterator(python_lib_Re.finditer(self.pattern,s))
            while x.hasNext():
                x1 = x.next()
                x2 = HxString.substring(s,lastEnd,x1.start())
                ret.append(x2)
                lastEnd = x1.end()
            x = HxString.substr(s,lastEnd,None)
            ret.append(x)
            return ret
        else:
            self.matchObj = python_lib_Re.search(self.pattern,s)
            if (self.matchObj is None):
                return [s]
            else:
                return [HxString.substring(s,0,self.matchObj.start()), HxString.substr(s,self.matchObj.end(),None)]

    def replace(self,s,by):
        _this = by.split("$$")
        by = "_hx_#repl#__".join([python_Boot.toString1(x1,'') for x1 in _this])
        def _hx_local_0(x):
            res = by
            g = x.groups()
            _g = 0
            _g1 = len(g)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                gs = g[i]
                if (gs is None):
                    continue
                delimiter = ("$" + HxOverrides.stringOrNull(str((i + 1))))
                _this = (list(res) if ((delimiter == "")) else res.split(delimiter))
                res = gs.join([python_Boot.toString1(x1,'') for x1 in _this])
            _this = res.split("_hx_#repl#__")
            res = "$".join([python_Boot.toString1(x1,'') for x1 in _this])
            return res
        replace = _hx_local_0
        return python_lib_Re.sub(self.pattern,replace,s,(0 if (self._hx_global) else 1))

    def map(self,s,f):
        buf_b = python_lib_io_StringIO()
        pos = 0
        right = s
        cur = self
        while (pos < len(s)):
            if (self.matchObj is None):
                self.matchObj = python_lib_Re.search(self.pattern,s)
            else:
                self.matchObj = self.matchObj.re.search(s,pos)
            if (self.matchObj is None):
                break
            pos1 = self.matchObj.end()
            curPos_pos = cur.matchObj.start()
            curPos_len = (cur.matchObj.end() - cur.matchObj.start())
            buf_b.write(Std.string(HxString.substr(HxString.substr(cur.matchObj.string,0,cur.matchObj.start()),pos,None)))
            buf_b.write(Std.string(f(cur)))
            right = HxString.substr(cur.matchObj.string,cur.matchObj.end(),None)
            if (not self._hx_global):
                buf_b.write(Std.string(right))
                return buf_b.getvalue()
            if (curPos_len == 0):
                buf_b.write(Std.string(("" if (((pos1 < 0) or ((pos1 >= len(s))))) else s[pos1])))
                right = HxString.substr(right,1,None)
                pos = (pos1 + 1)
            else:
                pos = pos1
        buf_b.write(Std.string(right))
        return buf_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.pattern = None
        _hx_o.matchObj = None
        _hx_o._hx_global = None
EReg._hx_class = EReg
_hx_classes["EReg"] = EReg


class IntIterator:
    _hx_class_name = "IntIterator"
    _hx_is_interface = "False"
    __slots__ = ("min", "max")
    _hx_fields = ["min", "max"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,_hx_min,_hx_max):
        self.min = _hx_min
        self.max = _hx_max

    def hasNext(self):
        return (self.min < self.max)

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.min
                _hx_local_0.min = (_hx_local_1 + 1)
                return _hx_local_1
            return _hx_local_2()
        return _hx_local_3()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.min = None
        _hx_o.max = None
IntIterator._hx_class = IntIterator
_hx_classes["IntIterator"] = IntIterator


class Lambda:
    _hx_class_name = "Lambda"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["filter", "fold", "count"]

    @staticmethod
    def filter(it,f):
        _g = []
        x = HxOverrides.iterator(it)
        while x.hasNext():
            x1 = x.next()
            if f(x1):
                _g.append(x1)
        return _g

    @staticmethod
    def fold(it,f,first):
        x = HxOverrides.iterator(it)
        while x.hasNext():
            x1 = x.next()
            first = f(x1,first)
        return first

    @staticmethod
    def count(it,pred = None):
        n = 0
        if (pred is None):
            _ = HxOverrides.iterator(it)
            while _.hasNext():
                _1 = _.next()
                n = (n + 1)
        else:
            x = HxOverrides.iterator(it)
            while x.hasNext():
                x1 = x.next()
                if pred(x1):
                    n = (n + 1)
        return n
Lambda._hx_class = Lambda
_hx_classes["Lambda"] = Lambda


class _Math_Math_Impl_:
    _hx_class_name = "_Math.Math_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["min"]

    @staticmethod
    def min(a,b):
        if python_lib_Math.isnan(a):
            return a
        elif python_lib_Math.isnan(b):
            return b
        else:
            return min(a,b)
_Math_Math_Impl_._hx_class = _Math_Math_Impl_
_hx_classes["_Math.Math_Impl_"] = _Math_Math_Impl_


class Reflect:
    _hx_class_name = "Reflect"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["field", "setField", "getProperty", "setProperty", "callMethod", "isFunction", "compare", "isObject", "isEnumValue", "makeVarArgs"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        setattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)

    @staticmethod
    def getProperty(o,field):
        if (o is None):
            return None
        if (field in python_Boot.keywords):
            field = ("_hx_" + field)
        elif ((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95))):
            field = ("_hx_" + field)
        if isinstance(o,_hx_AnonObject):
            return Reflect.field(o,field)
        tmp = Reflect.field(o,("get_" + ("null" if field is None else field)))
        if ((tmp is not None) and callable(tmp)):
            return tmp()
        else:
            return Reflect.field(o,field)

    @staticmethod
    def setProperty(o,field,value):
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if isinstance(o,_hx_AnonObject):
            setattr(o,field1,value)
        elif hasattr(o,("set_" + ("null" if field1 is None else field1))):
            getattr(o,("set_" + ("null" if field1 is None else field1)))(value)
        else:
            setattr(o,field1,value)

    @staticmethod
    def callMethod(o,func,args):
        if callable(func):
            return func(*args)
        else:
            return None

    @staticmethod
    def isFunction(f):
        if (not ((python_lib_Inspect.isfunction(f) or python_lib_Inspect.ismethod(f)))):
            return python_Boot.hasField(f,"func_code")
        else:
            return True

    @staticmethod
    def compare(a,b):
        if ((a is None) and ((b is None))):
            return 0
        if (a is None):
            return 1
        elif (b is None):
            return -1
        elif HxOverrides.eq(a,b):
            return 0
        elif (a > b):
            return 1
        else:
            return -1

    @staticmethod
    def isObject(v):
        _g = Type.typeof(v)
        tmp = _g.index
        if (tmp == 4):
            return True
        elif (tmp == 6):
            _g1 = _g.params[0]
            return True
        else:
            return False

    @staticmethod
    def isEnumValue(v):
        if not HxOverrides.eq(v,Enum):
            return isinstance(v,Enum)
        else:
            return False

    @staticmethod
    def makeVarArgs(f):
        def _hx_local_0(*v):
            this1 = v
            return f((list(this1) if ((not Std.isOfType(this1,list))) else this1))
        return _hx_local_0
Reflect._hx_class = Reflect
_hx_classes["Reflect"] = Reflect


class Std:
    _hx_class_name = "Std"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["downcast", "is", "isOfType", "string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def downcast(value,c):
        try:
            tmp = None
            if (not isinstance(value,c)):
                if c._hx_is_interface:
                    cls = c
                    loop = None
                    def _hx_local_1(intf):
                        f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                        if (f is not None):
                            _g = 0
                            while (_g < len(f)):
                                i = (f[_g] if _g >= 0 and _g < len(f) else None)
                                _g = (_g + 1)
                                if (i == cls):
                                    return True
                                else:
                                    l = loop(i)
                                    if l:
                                        return True
                            return False
                        else:
                            return False
                    loop = _hx_local_1
                    currentClass = value.__class__
                    result = False
                    while (currentClass is not None):
                        if loop(currentClass):
                            result = True
                            break
                        currentClass = python_Boot.getSuperClass(currentClass)
                    tmp = result
                else:
                    tmp = False
            else:
                tmp = True
            if tmp:
                return value
            else:
                return None
        except BaseException as _g:
            None
            return None

    @staticmethod
    def _hx_is(v,t):
        return Std.isOfType(v,t)

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if ((type(t) == type) and (t == Dynamic)):
            return (v is not None)
        isBool = isinstance(v,bool)
        if (((type(t) == type) and (t == Bool)) and isBool):
            return True
        if ((((not isBool) and (not ((type(t) == type) and (t == Bool)))) and ((type(t) == type) and (t == Int))) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and ((type(t) == type) and (t == Int))):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and ((type(t) == type) and (t == Float))) and isinstance(v,(float, int))):
            return True
        if ((type(t) == type) and (t == str)):
            return isinstance(v,str)
        isEnumType = ((type(t) == type) and (t == Enum))
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = ((type(t) == type) and (t == Class))
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        _hx_len = len(x)
        index = 0
        while (index < _hx_len):
            if (not (x[index] in " \n\r\t\x0B\x0C")):
                break
            index = (index + 1)
        isNegative = None
        if (index < _hx_len):
            sign = x[index]
            if ((sign == "-") or ((sign == "+"))):
                index = (index + 1)
            isNegative = (sign == "-")
        else:
            isNegative = False
        isHexadecimal = None
        if ((index + 1) < _hx_len):
            cur = x[index]
            next = x[(index + 1)]
            isHexadecimal = ((cur == "0") and (((next == "x") or ((next == "X")))))
        else:
            isHexadecimal = False
        if isHexadecimal:
            index = (index + 2)
        cur = index
        if isHexadecimal:
            while (cur < _hx_len):
                if (not (x[cur] in "0123456789abcdefABCDEF")):
                    break
                cur = (cur + 1)
        else:
            while (cur < _hx_len):
                if (not (x[cur] in "0123456789")):
                    break
                cur = (cur + 1)
        firstInvalidIndex = cur
        if (index == firstInvalidIndex):
            return None
        result = int(HxString.substring(x,index,firstInvalidIndex),(16 if isHexadecimal else 10))
        if isNegative:
            return -result
        else:
            return result

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48))) or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except BaseException as _g:
            None
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std
_hx_classes["Std"] = Std


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringBuf:
    _hx_class_name = "StringBuf"
    _hx_is_interface = "False"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["get_length"]

    def __init__(self):
        self.b = python_lib_io_StringIO()

    def get_length(self):
        pos = self.b.tell()
        self.b.seek(0,2)
        _hx_len = self.b.tell()
        self.b.seek(pos,0)
        return _hx_len

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.b = None
StringBuf._hx_class = StringBuf
_hx_classes["StringBuf"] = StringBuf


class StringTools:
    _hx_class_name = "StringTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["isSpace", "ltrim", "rtrim", "trim", "lpad", "rpad", "replace", "hex"]

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))

    @staticmethod
    def lpad(s,c,l):
        if (len(c) <= 0):
            return s
        buf = StringBuf()
        l = (l - len(s))
        while (buf.get_length() < l):
            s1 = Std.string(c)
            buf.b.write(s1)
        s1 = Std.string(s)
        buf.b.write(s1)
        return buf.b.getvalue()

    @staticmethod
    def rpad(s,c,l):
        if (len(c) <= 0):
            return s
        buf = StringBuf()
        s1 = Std.string(s)
        buf.b.write(s1)
        while (buf.get_length() < l):
            s = Std.string(c)
            buf.b.write(s)
        return buf.b.getvalue()

    @staticmethod
    def replace(s,sub,by):
        _this = (list(s) if ((sub == "")) else s.split(sub))
        return by.join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def hex(n,digits = None):
        s = ""
        hexChars = "0123456789ABCDEF"
        while True:
            index = (n & 15)
            s = (HxOverrides.stringOrNull((("" if (((index < 0) or ((index >= len(hexChars))))) else hexChars[index]))) + ("null" if s is None else s))
            n = HxOverrides.rshift(n, 4)
            if (not ((n > 0))):
                break
        if ((digits is not None) and ((len(s) < digits))):
            diff = (digits - len(s))
            _g = 0
            _g1 = diff
            while (_g < _g1):
                _ = _g
                _g = (_g + 1)
                s = ("0" + ("null" if s is None else s))
        return s
StringTools._hx_class = StringTools
_hx_classes["StringTools"] = StringTools


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["exists", "rename", "isDirectory", "createDirectory", "deleteFile", "deleteDirectory", "readDirectory"]

    @staticmethod
    def exists(path):
        return python_lib_os_Path.exists(path)

    @staticmethod
    def rename(path,newPath):
        python_lib_Os.rename(path,newPath)

    @staticmethod
    def isDirectory(path):
        return python_lib_os_Path.isdir(path)

    @staticmethod
    def createDirectory(path):
        python_lib_Os.makedirs(path,511,True)

    @staticmethod
    def deleteFile(path):
        python_lib_Os.remove(path)

    @staticmethod
    def deleteDirectory(path):
        python_lib_Os.rmdir(path)

    @staticmethod
    def readDirectory(path):
        return python_lib_Os.listdir(path)
sys_FileSystem._hx_class = sys_FileSystem
_hx_classes["sys.FileSystem"] = sys_FileSystem


class Sys:
    _hx_class_name = "Sys"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["getEnv", "getCwd", "systemName"]

    @staticmethod
    def getEnv(s):
        return python_lib_Os.environ.get(s,None)

    @staticmethod
    def getCwd():
        return haxe_io_Path.addTrailingSlash(python_lib_Os.getcwd())

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        x = _g
        if x.startswith("linux"):
            return "Linux"
        else:
            _g1 = _g
            _hx_local_0 = len(_g1)
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            else:
                raise haxe_Exception.thrown("not supported platform")
Sys._hx_class = Sys
_hx_classes["Sys"] = Sys

class ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "ValueType"
    _hx_constructs = ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]

    @staticmethod
    def TClass(c):
        return ValueType("TClass", 6, (c,))

    @staticmethod
    def TEnum(e):
        return ValueType("TEnum", 7, (e,))
ValueType.TNull = ValueType("TNull", 0, ())
ValueType.TInt = ValueType("TInt", 1, ())
ValueType.TFloat = ValueType("TFloat", 2, ())
ValueType.TBool = ValueType("TBool", 3, ())
ValueType.TObject = ValueType("TObject", 4, ())
ValueType.TFunction = ValueType("TFunction", 5, ())
ValueType.TUnknown = ValueType("TUnknown", 8, ())
ValueType._hx_class = ValueType
_hx_classes["ValueType"] = ValueType


class Type:
    _hx_class_name = "Type"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["getClass", "getSuperClass", "resolveClass", "createEmptyInstance", "typeof", "enumEq"]

    @staticmethod
    def getClass(o):
        if (o is None):
            return None
        o1 = o
        if ((o1 is not None) and ((HxOverrides.eq(o1,str) or python_lib_Inspect.isclass(o1)))):
            return None
        if isinstance(o,_hx_AnonObject):
            return None
        if hasattr(o,"_hx_class"):
            return o._hx_class
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getSuperClass(c):
        return python_Boot.getSuperClass(c)

    @staticmethod
    def resolveClass(name):
        if (name == "Array"):
            return list
        if (name == "Math"):
            return Math
        if (name == "String"):
            return str
        cl = _hx_classes.get(name,None)
        tmp = None
        if (cl is not None):
            o = cl
            tmp = (not (((o is not None) and ((HxOverrides.eq(o,str) or python_lib_Inspect.isclass(o))))))
        else:
            tmp = True
        if tmp:
            return None
        return cl

    @staticmethod
    def createEmptyInstance(cl):
        i = cl.__new__(cl)
        callInit = None
        def _hx_local_0(cl):
            sc = Type.getSuperClass(cl)
            if (sc is not None):
                callInit(sc)
            if hasattr(cl,"_hx_empty_init"):
                cl._hx_empty_init(i)
        callInit = _hx_local_0
        callInit(cl)
        return i

    @staticmethod
    def typeof(v):
        if (v is None):
            return ValueType.TNull
        elif isinstance(v,bool):
            return ValueType.TBool
        elif isinstance(v,int):
            return ValueType.TInt
        elif isinstance(v,float):
            return ValueType.TFloat
        elif isinstance(v,str):
            return ValueType.TClass(str)
        elif isinstance(v,list):
            return ValueType.TClass(list)
        elif (isinstance(v,_hx_AnonObject) or python_lib_Inspect.isclass(v)):
            return ValueType.TObject
        elif isinstance(v,Enum):
            return ValueType.TEnum(v.__class__)
        elif (isinstance(v,type) or hasattr(v,"_hx_class")):
            return ValueType.TClass(v.__class__)
        elif callable(v):
            return ValueType.TFunction
        else:
            return ValueType.TUnknown

    @staticmethod
    def enumEq(a,b):
        if HxOverrides.eq(a,b):
            return True
        try:
            if ((b is None) and (not HxOverrides.eq(a,b))):
                return False
            if (a.tag != b.tag):
                return False
            p1 = a.params
            p2 = b.params
            if (len(p1) != len(p2)):
                return False
            _g = 0
            _g1 = len(p1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (not Type.enumEq(p1[i],p2[i])):
                    return False
            if (a._hx_class != b._hx_class):
                return False
        except BaseException as _g:
            None
            return False
        return True
Type._hx_class = Type
_hx_classes["Type"] = Type

class haxe_StackItem(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.StackItem"
    _hx_constructs = ["CFunction", "Module", "FilePos", "Method", "LocalFunction"]

    @staticmethod
    def Module(m):
        return haxe_StackItem("Module", 1, (m,))

    @staticmethod
    def FilePos(s,file,line,column = None):
        return haxe_StackItem("FilePos", 2, (s,file,line,column))

    @staticmethod
    def Method(classname,method):
        return haxe_StackItem("Method", 3, (classname,method))

    @staticmethod
    def LocalFunction(v = None):
        return haxe_StackItem("LocalFunction", 4, (v,))
haxe_StackItem.CFunction = haxe_StackItem("CFunction", 0, ())
haxe_StackItem._hx_class = haxe_StackItem
_hx_classes["haxe.StackItem"] = haxe_StackItem


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["get", "set", "keys", "toString"]
haxe_IMap._hx_class = haxe_IMap
_hx_classes["haxe.IMap"] = haxe_IMap


class haxe_ds_ObjectMap:
    _hx_class_name = "haxe.ds.ObjectMap"
    _hx_is_interface = "False"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "get", "remove", "keys", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def set(self,key,value):
        self.h[key] = value

    def get(self,key):
        return self.h.get(key,None)

    def remove(self,key):
        r = (key in self.h)
        if r:
            del self.h[key]
        return r

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

    def toString(self):
        s_b = python_lib_io_StringIO()
        s_b.write("[")
        it = self.keys()
        i = it
        while i.hasNext():
            i1 = i.next()
            s_b.write(Std.string(Std.string(i1)))
            s_b.write(" => ")
            s_b.write(Std.string(Std.string(self.h.get(i1,None))))
            if it.hasNext():
                s_b.write(", ")
        s_b.write("]")
        return s_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_ObjectMap._hx_class = haxe_ds_ObjectMap
_hx_classes["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap


class sys_thread_Mutex:
    _hx_class_name = "sys.thread.Mutex"
    _hx_is_interface = "False"
    __slots__ = ("lock",)
    _hx_fields = ["lock"]

    def __init__(self):
        self.lock = python_lib_threading_RLock()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.lock = None
sys_thread_Mutex._hx_class = sys_thread_Mutex
_hx_classes["sys.thread.Mutex"] = sys_thread_Mutex


class sys_thread_EventLoop:
    _hx_class_name = "sys.thread.EventLoop"
    _hx_is_interface = "False"
    __slots__ = ("mutex", "oneTimeEvents", "oneTimeEventsIdx", "waitLock", "promisedEventsCount", "regularEvents", "isMainThread")
    _hx_fields = ["mutex", "oneTimeEvents", "oneTimeEventsIdx", "waitLock", "promisedEventsCount", "regularEvents", "isMainThread"]
    _hx_methods = ["repeat", "cancel", "loop"]
    _hx_statics = ["CREATED"]

    def __init__(self):
        self.regularEvents = None
        self.promisedEventsCount = 0
        self.waitLock = sys_thread_Lock()
        self.oneTimeEventsIdx = 0
        self.oneTimeEvents = list()
        self.mutex = sys_thread_Mutex()
        self.isMainThread = (not sys_thread_EventLoop.CREATED)
        sys_thread_EventLoop.CREATED = True

    def repeat(self,event,intervalMs):
        self.mutex.lock.acquire(True)
        interval = (0.001 * intervalMs)
        event1 = sys_thread__EventLoop_RegularEvent(event,(python_lib_Time.time() + interval),interval)
        _g = self.regularEvents
        if (_g is None):
            self.regularEvents = event1
        else:
            current = _g
            previous = None
            while True:
                if (current is None):
                    previous.next = event1
                    event1.previous = previous
                    break
                elif (event1.nextRunTime < current.nextRunTime):
                    event1.next = current
                    current.previous = event1
                    if (previous is None):
                        self.regularEvents = event1
                    else:
                        event1.previous = previous
                        previous.next = event1
                        current.previous = event1
                    break
                else:
                    previous = current
                    current = current.next
        self.waitLock.semaphore.release()
        self.mutex.lock.release()
        return event1

    def cancel(self,eventHandler):
        self.mutex.lock.acquire(True)
        event = eventHandler
        event.cancelled = True
        if (self.regularEvents == event):
            self.regularEvents = event.next
        _g = event.next
        if (_g is not None):
            e = _g
            e.previous = event.previous
        _g = event.previous
        if (_g is not None):
            e = _g
            e.next = event.next
        def _hx_local_0():
            event.previous = None
            return event.previous
        event.next = _hx_local_0()
        self.mutex.lock.release()

    def loop(self):
        recycleRegular = []
        recycleOneTimers = []
        while True:
            now = python_lib_Time.time()
            regularsToRun = recycleRegular
            eventsToRunIdx = 0
            nextEventAt = -1
            self.mutex.lock.acquire(True)
            while self.waitLock.semaphore.acquire(True,0.0):
                pass
            current = self.regularEvents
            while (current is not None):
                if (current.nextRunTime <= now):
                    tmp = eventsToRunIdx
                    eventsToRunIdx = (eventsToRunIdx + 1)
                    python_internal_ArrayImpl._set(regularsToRun, tmp, current)
                    current.nextRunTime = (current.nextRunTime + current.interval)
                    nextEventAt = -2
                elif ((nextEventAt == -1) or ((current.nextRunTime < nextEventAt))):
                    nextEventAt = current.nextRunTime
                current = current.next
            self.mutex.lock.release()
            _g = 0
            _g1 = eventsToRunIdx
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (not (regularsToRun[i] if i >= 0 and i < len(regularsToRun) else None).cancelled):
                    (regularsToRun[i] if i >= 0 and i < len(regularsToRun) else None).run()
                python_internal_ArrayImpl._set(regularsToRun, i, None)
            eventsToRunIdx = 0
            oneTimersToRun = recycleOneTimers
            self.mutex.lock.acquire(True)
            _g_current = 0
            _g_array = self.oneTimeEvents
            while (_g_current < len(_g_array)):
                _g_value = (_g_array[_g_current] if _g_current >= 0 and _g_current < len(_g_array) else None)
                _g_key = _g_current
                _g_current = (_g_current + 1)
                i1 = _g_key
                event = _g_value
                if (event is None):
                    break
                else:
                    tmp1 = eventsToRunIdx
                    eventsToRunIdx = (eventsToRunIdx + 1)
                    python_internal_ArrayImpl._set(oneTimersToRun, tmp1, event)
                    python_internal_ArrayImpl._set(self.oneTimeEvents, i1, None)
            self.oneTimeEventsIdx = 0
            hasPromisedEvents = (self.promisedEventsCount > 0)
            self.mutex.lock.release()
            _g2 = 0
            _g3 = eventsToRunIdx
            while (_g2 < _g3):
                i2 = _g2
                _g2 = (_g2 + 1)
                (oneTimersToRun[i2] if i2 >= 0 and i2 < len(oneTimersToRun) else None)()
                python_internal_ArrayImpl._set(oneTimersToRun, i2, None)
            if self.isMainThread:
                next = haxe_MainLoop.tick()
                if haxe_MainLoop.hasEvents():
                    eventsToRunIdx = (eventsToRunIdx + 1)
                    if (nextEventAt > next):
                        nextEventAt = next
            if (eventsToRunIdx > 0):
                nextEventAt = -2
            r_nextEventAt = nextEventAt
            r_anyTime = hasPromisedEvents
            _g4 = r_anyTime
            _g5 = r_nextEventAt
            _g6 = _g5
            if (_g6 == -2):
                pass
            elif (_g6 == -1):
                if _g4:
                    self.waitLock.semaphore.acquire(True,None)
                else:
                    break
            else:
                time = _g5
                timeout = (time - python_lib_Time.time())
                _this = self.waitLock
                timeout1 = (0 if (python_lib_Math.isnan(0)) else (timeout if (python_lib_Math.isnan(timeout)) else max(0,timeout)))
                _this.semaphore.acquire(True,timeout1)
    CREATED = None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.mutex = None
        _hx_o.oneTimeEvents = None
        _hx_o.oneTimeEventsIdx = None
        _hx_o.waitLock = None
        _hx_o.promisedEventsCount = None
        _hx_o.regularEvents = None
        _hx_o.isMainThread = None
sys_thread_EventLoop._hx_class = sys_thread_EventLoop
_hx_classes["sys.thread.EventLoop"] = sys_thread_EventLoop


class sys_thread__Thread_HxThread:
    _hx_class_name = "sys.thread._Thread.HxThread"
    _hx_is_interface = "False"
    __slots__ = ("events", "nativeThread")
    _hx_fields = ["events", "nativeThread"]
    _hx_statics = ["threads", "threadsMutex", "mainThread", "current", "create"]

    def __init__(self,t):
        self.events = None
        self.nativeThread = t
    threads = None
    threadsMutex = None
    mainThread = None

    @staticmethod
    def current():
        sys_thread__Thread_HxThread.threadsMutex.lock.acquire(True)
        ct = python_lib_Threading.current_thread()
        if (ct == python_lib_Threading.main_thread()):
            sys_thread__Thread_HxThread.threadsMutex.lock.release()
            return sys_thread__Thread_HxThread.mainThread
        if (not (ct in sys_thread__Thread_HxThread.threads.h)):
            sys_thread__Thread_HxThread.threads.set(ct,sys_thread__Thread_HxThread(ct))
        t = sys_thread__Thread_HxThread.threads.h.get(ct,None)
        sys_thread__Thread_HxThread.threadsMutex.lock.release()
        return t

    @staticmethod
    def create(callb,withEventLoop):
        nt = None
        t = None
        def _hx_local_0():
            try:
                callb()
                if withEventLoop:
                    t.events.loop()
            except BaseException as _g:
                e = haxe_Exception.caught(_g)
                sys_thread__Thread_HxThread.threadsMutex.lock.acquire(True)
                sys_thread__Thread_HxThread.threads.remove(nt)
                sys_thread__Thread_HxThread.threadsMutex.lock.release()
                raise haxe_Exception.thrown(e)
            sys_thread__Thread_HxThread.threadsMutex.lock.acquire(True)
            sys_thread__Thread_HxThread.threads.remove(nt)
            sys_thread__Thread_HxThread.threadsMutex.lock.release()
        wrappedCallB = _hx_local_0
        nt = python_lib_threading_Thread(**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'target': wrappedCallB})))
        t = sys_thread__Thread_HxThread(nt)
        if withEventLoop:
            t.events = sys_thread_EventLoop()
        sys_thread__Thread_HxThread.threadsMutex.lock.acquire(True)
        sys_thread__Thread_HxThread.threads.set(nt,t)
        sys_thread__Thread_HxThread.threadsMutex.lock.release()
        nt.start()
        return t

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.events = None
        _hx_o.nativeThread = None
sys_thread__Thread_HxThread._hx_class = sys_thread__Thread_HxThread
_hx_classes["sys.thread._Thread.HxThread"] = sys_thread__Thread_HxThread


class haxe_EntryPoint:
    _hx_class_name = "haxe.EntryPoint"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["run"]

    @staticmethod
    def run():
        pass
haxe_EntryPoint._hx_class = haxe_EntryPoint
_hx_classes["haxe.EntryPoint"] = haxe_EntryPoint


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    _hx_is_interface = "False"
    __slots__ = ("_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "toString", "get_message", "get_native"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def toString(self):
        return self.get_message()

    def get_message(self):
        return str(self)

    def get_native(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._hx___nativeStack = None
        _hx_o._hx___skipStack = None
        _hx_o._hx___nativeException = None
        _hx_o._hx___previousException = None
haxe_Exception._hx_class = haxe_Exception
_hx_classes["haxe.Exception"] = haxe_Exception


class haxe__Int32_Int32_Impl_:
    _hx_class_name = "haxe._Int32.Int32_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["mul", "ucompare"]

    @staticmethod
    def mul(a,b):
        return ((((a * ((b & 65535))) + ((((((a * (HxOverrides.rshift(b, 16))) << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))

    @staticmethod
    def ucompare(a,b):
        if (a < 0):
            if (b < 0):
                return (((((~b + (2 ** 31)) % (2 ** 32) - (2 ** 31)) - (((~a + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            else:
                return 1
        if (b < 0):
            return -1
        else:
            return (((a - b) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
haxe__Int32_Int32_Impl_._hx_class = haxe__Int32_Int32_Impl_
_hx_classes["haxe._Int32.Int32_Impl_"] = haxe__Int32_Int32_Impl_


class haxe__Int64_Int64_Impl_:
    _hx_class_name = "haxe._Int64.Int64_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["divMod"]

    @staticmethod
    def divMod(dividend,divisor):
        if (divisor.high == 0):
            _g = divisor.low
            if (_g == 0):
                raise haxe_Exception.thrown("divide by zero")
            elif (_g == 1):
                return _hx_AnonObject({'quotient': haxe__Int64____Int64(dividend.high,dividend.low), 'modulus': haxe__Int64____Int64(0,0)})
            else:
                pass
        divSign = ((dividend.high < 0) != ((divisor.high < 0)))
        modulus = None
        if (dividend.high < 0):
            high = ((~dividend.high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            low = (((~dividend.low + 1) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            if (low == 0):
                ret = high
                high = (high + 1)
                high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            modulus = haxe__Int64____Int64(high,low)
        else:
            modulus = haxe__Int64____Int64(dividend.high,dividend.low)
        if (divisor.high < 0):
            high = ((~divisor.high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            low = (((~divisor.low + 1) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            if (low == 0):
                ret = high
                high = (high + 1)
                high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            divisor = haxe__Int64____Int64(high,low)
        quotient = haxe__Int64____Int64(0,0)
        mask = haxe__Int64____Int64(0,1)
        while (not ((divisor.high < 0))):
            v = haxe__Int32_Int32_Impl_.ucompare(divisor.high,modulus.high)
            cmp = (v if ((v != 0)) else haxe__Int32_Int32_Impl_.ucompare(divisor.low,modulus.low))
            b = 1
            b = (b & 63)
            divisor = (haxe__Int64____Int64(divisor.high,divisor.low) if ((b == 0)) else (haxe__Int64____Int64(((((((((divisor.high << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(divisor.low, ((32 - b))))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((divisor.low << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((divisor.low << ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),0)))
            b1 = 1
            b1 = (b1 & 63)
            mask = (haxe__Int64____Int64(mask.high,mask.low) if ((b1 == 0)) else (haxe__Int64____Int64(((((((((mask.high << b1)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(mask.low, ((32 - b1))))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((mask.low << b1)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b1 < 32)) else haxe__Int64____Int64(((((mask.low << ((b1 - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),0)))
            if (cmp >= 0):
                break
        while True:
            b_high = 0
            b_low = 0
            if (not (((mask.high != b_high) or ((mask.low != b_low))))):
                break
            v = haxe__Int32_Int32_Impl_.ucompare(modulus.high,divisor.high)
            if (((v if ((v != 0)) else haxe__Int32_Int32_Impl_.ucompare(modulus.low,divisor.low))) >= 0):
                quotient = haxe__Int64____Int64(((((quotient.high | mask.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((quotient.low | mask.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))
                high = (((modulus.high - divisor.high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                low = (((modulus.low - divisor.low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                if (haxe__Int32_Int32_Impl_.ucompare(modulus.low,divisor.low) < 0):
                    ret = high
                    high = (high - 1)
                    high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                modulus = haxe__Int64____Int64(high,low)
            b = 1
            b = (b & 63)
            mask = (haxe__Int64____Int64(mask.high,mask.low) if ((b == 0)) else (haxe__Int64____Int64(HxOverrides.rshift(mask.high, b),((((((((mask.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(mask.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(0,HxOverrides.rshift(mask.high, ((b - 32))))))
            b1 = 1
            b1 = (b1 & 63)
            divisor = (haxe__Int64____Int64(divisor.high,divisor.low) if ((b1 == 0)) else (haxe__Int64____Int64(HxOverrides.rshift(divisor.high, b1),((((((((divisor.high << ((32 - b1)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(divisor.low, b1))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b1 < 32)) else haxe__Int64____Int64(0,HxOverrides.rshift(divisor.high, ((b1 - 32))))))
        if divSign:
            high = ((~quotient.high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            low = (((~quotient.low + 1) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            if (low == 0):
                ret = high
                high = (high + 1)
                high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            quotient = haxe__Int64____Int64(high,low)
        if (dividend.high < 0):
            high = ((~modulus.high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            low = (((~modulus.low + 1) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            if (low == 0):
                ret = high
                high = (high + 1)
                high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            modulus = haxe__Int64____Int64(high,low)
        return _hx_AnonObject({'quotient': quotient, 'modulus': modulus})
haxe__Int64_Int64_Impl_._hx_class = haxe__Int64_Int64_Impl_
_hx_classes["haxe._Int64.Int64_Impl_"] = haxe__Int64_Int64_Impl_


class haxe__Int64____Int64:
    _hx_class_name = "haxe._Int64.___Int64"
    _hx_is_interface = "False"
    __slots__ = ("high", "low")
    _hx_fields = ["high", "low"]

    def __init__(self,high,low):
        self.high = high
        self.low = low

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.high = None
        _hx_o.low = None
haxe__Int64____Int64._hx_class = haxe__Int64____Int64
_hx_classes["haxe._Int64.___Int64"] = haxe__Int64____Int64


class haxe_Int64Helper:
    _hx_class_name = "haxe.Int64Helper"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["fromFloat"]

    @staticmethod
    def fromFloat(f):
        if (python_lib_Math.isnan(f) or (not ((((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))))):
            raise haxe_Exception.thrown("Number is NaN or Infinite")
        noFractions = (f - (HxOverrides.modf(f, 1)))
        if (noFractions > 9007199254740991):
            raise haxe_Exception.thrown("Conversion overflow")
        if (noFractions < -9007199254740991):
            raise haxe_Exception.thrown("Conversion underflow")
        result = haxe__Int64____Int64(0,0)
        neg = (noFractions < 0)
        rest = (-noFractions if neg else noFractions)
        i = 0
        while (rest >= 1):
            curr = HxOverrides.modf(rest, 2)
            rest = (rest / 2)
            if (curr >= 1):
                a_high = 0
                a_low = 1
                b = i
                b = (b & 63)
                b1 = (haxe__Int64____Int64(a_high,a_low) if ((b == 0)) else (haxe__Int64____Int64(((((((((a_high << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(a_low, ((32 - b))))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((a_low << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((a_low << ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),0)))
                high = (((result.high + b1.high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                low = (((result.low + b1.low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                if (haxe__Int32_Int32_Impl_.ucompare(low,result.low) < 0):
                    ret = high
                    high = (high + 1)
                    high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                result = haxe__Int64____Int64(high,low)
            i = (i + 1)
        if neg:
            high = ((~result.high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            low = (((~result.low + 1) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            if (low == 0):
                ret = high
                high = (high + 1)
                high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
            result = haxe__Int64____Int64(high,low)
        return result
haxe_Int64Helper._hx_class = haxe_Int64Helper
_hx_classes["haxe.Int64Helper"] = haxe_Int64Helper


class haxe_Json:
    _hx_class_name = "haxe.Json"
    _hx_is_interface = "False"
    __slots__ = ()
haxe_Json._hx_class = haxe_Json
_hx_classes["haxe.Json"] = haxe_Json


class haxe_Log:
    _hx_class_name = "haxe.Log"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["formatOutput", "trace"]

    @staticmethod
    def formatOutput(v,infos):
        _hx_str = Std.string(v)
        if (infos is None):
            return _hx_str
        pstr = ((HxOverrides.stringOrNull(infos.fileName) + ":") + Std.string(infos.lineNumber))
        if (Reflect.field(infos,"customParams") is not None):
            _g = 0
            _g1 = Reflect.field(infos,"customParams")
            while (_g < len(_g1)):
                v = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                _hx_str = (("null" if _hx_str is None else _hx_str) + ((", " + Std.string(v))))
        return ((("null" if pstr is None else pstr) + ": ") + ("null" if _hx_str is None else _hx_str))

    @staticmethod
    def trace(v,infos = None):
        _hx_str = haxe_Log.formatOutput(v,infos)
        str1 = Std.string(_hx_str)
        python_Lib.printString((("" + ("null" if str1 is None else str1)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
haxe_Log._hx_class = haxe_Log
_hx_classes["haxe.Log"] = haxe_Log


class haxe_MainEvent:
    _hx_class_name = "haxe.MainEvent"
    _hx_is_interface = "False"
    __slots__ = ("f", "prev", "next", "isBlocking", "nextRun", "priority")
    _hx_fields = ["f", "prev", "next", "isBlocking", "nextRun", "priority"]

    def __init__(self,f,p):
        self.next = None
        self.prev = None
        self.isBlocking = True
        self.f = f
        self.priority = p
        self.nextRun = Math.NEGATIVE_INFINITY

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.f = None
        _hx_o.prev = None
        _hx_o.next = None
        _hx_o.isBlocking = None
        _hx_o.nextRun = None
        _hx_o.priority = None
haxe_MainEvent._hx_class = haxe_MainEvent
_hx_classes["haxe.MainEvent"] = haxe_MainEvent


class haxe_MainLoop:
    _hx_class_name = "haxe.MainLoop"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["pending", "hasEvents", "sortEvents", "tick"]
    pending = None

    @staticmethod
    def hasEvents():
        p = haxe_MainLoop.pending
        while (p is not None):
            if p.isBlocking:
                return True
            p = p.next
        return False

    @staticmethod
    def sortEvents():
        _hx_list = haxe_MainLoop.pending
        if (_hx_list is None):
            return
        insize = 1
        nmerges = None
        psize = 0
        qsize = 0
        p = None
        q = None
        e = None
        tail = None
        while True:
            p = _hx_list
            _hx_list = None
            tail = None
            nmerges = 0
            while (p is not None):
                nmerges = (nmerges + 1)
                q = p
                psize = 0
                _g = 0
                _g1 = insize
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    psize = (psize + 1)
                    q = q.next
                    if (q is None):
                        break
                qsize = insize
                while ((psize > 0) or (((qsize > 0) and ((q is not None))))):
                    if (psize == 0):
                        e = q
                        q = q.next
                        qsize = (qsize - 1)
                    elif (((qsize == 0) or ((q is None))) or (((p.priority > q.priority) or (((p.priority == q.priority) and ((p.nextRun <= q.nextRun))))))):
                        e = p
                        p = p.next
                        psize = (psize - 1)
                    else:
                        e = q
                        q = q.next
                        qsize = (qsize - 1)
                    if (tail is not None):
                        tail.next = e
                    else:
                        _hx_list = e
                    e.prev = tail
                    tail = e
                p = q
            tail.next = None
            if (nmerges <= 1):
                break
            insize = (insize * 2)
        _hx_list.prev = None
        haxe_MainLoop.pending = _hx_list

    @staticmethod
    def tick():
        haxe_MainLoop.sortEvents()
        e = haxe_MainLoop.pending
        now = python_lib_Timeit.default_timer()
        wait = 1e9
        while (e is not None):
            next = e.next
            wt = (e.nextRun - now)
            if (wt <= 0):
                wait = 0
                if (e.f is not None):
                    e.f()
            elif (wait > wt):
                wait = wt
            e = next
        return wait
haxe_MainLoop._hx_class = haxe_MainLoop
_hx_classes["haxe.MainLoop"] = haxe_MainLoop


class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []
haxe_NativeStackTrace._hx_class = haxe_NativeStackTrace
_hx_classes["haxe.NativeStackTrace"] = haxe_NativeStackTrace


class haxe_Timer:
    _hx_class_name = "haxe.Timer"
    _hx_is_interface = "False"
    _hx_fields = ["thread", "eventHandler"]
    _hx_methods = ["stop", "run"]
    _hx_statics = ["delay"]

    def __init__(self,time_ms):
        self.eventHandler = None
        self.thread = None
        _gthis = self
        self.thread = sys_thread__Thread_HxThread.current()
        def _hx_local_0():
            _gthis.run()
        self.eventHandler = sys_thread__Thread_Thread_Impl_.get_events(self.thread).repeat(_hx_local_0,time_ms)

    def stop(self):
        sys_thread__Thread_Thread_Impl_.get_events(self.thread).cancel(self.eventHandler)

    def run(self):
        pass

    @staticmethod
    def delay(f,time_ms):
        t = haxe_Timer(time_ms)
        def _hx_local_0():
            t.stop()
            f()
        t.run = _hx_local_0
        return t

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.thread = None
        _hx_o.eventHandler = None
haxe_Timer._hx_class = haxe_Timer
_hx_classes["haxe.Timer"] = haxe_Timer


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    _hx_is_interface = "False"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(("null" if ((value is None)) else Std.string(value)),previous,native)
        self.value = value

    def unwrap(self):
        return self.value

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.value = None
haxe_ValueException._hx_class = haxe_ValueException
_hx_classes["haxe.ValueException"] = haxe_ValueException


class haxe_crypto_Adler32:
    _hx_class_name = "haxe.crypto.Adler32"
    _hx_is_interface = "False"
    __slots__ = ("a1", "a2")
    _hx_fields = ["a1", "a2"]
    _hx_methods = ["get", "update"]
    _hx_statics = ["make"]

    def __init__(self):
        self.a1 = 1
        self.a2 = 0

    def get(self):
        return ((self.a2 << 16) | self.a1)

    def update(self,b,pos,_hx_len):
        a1 = self.a1
        a2 = self.a2
        _g = pos
        _g1 = (pos + _hx_len)
        while (_g < _g1):
            p = _g
            _g = (_g + 1)
            c = b.b[p]
            a1 = HxOverrides.mod(((a1 + c)), 65521)
            a2 = HxOverrides.mod(((a2 + a1)), 65521)
        self.a1 = a1
        self.a2 = a2

    @staticmethod
    def make(b):
        a = haxe_crypto_Adler32()
        a.update(b,0,b.length)
        return a.get()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.a1 = None
        _hx_o.a2 = None
haxe_crypto_Adler32._hx_class = haxe_crypto_Adler32
_hx_classes["haxe.crypto.Adler32"] = haxe_crypto_Adler32


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    _hx_is_interface = "False"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["getString", "toString", "toHex"]
    _hx_statics = ["alloc", "ofString", "ofHex"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    def getString(self,pos,_hx_len,encoding = None):
        tmp = (encoding is None)
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        return self.getString(0,self.length)

    def toHex(self):
        s_b = python_lib_io_StringIO()
        chars = []
        _hx_str = "0123456789abcdef"
        _g = 0
        _g1 = len(_hx_str)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = HxString.charCodeAt(_hx_str,i)
            chars.append(x)
        _g = 0
        _g1 = self.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = self.b[i]
            s_b.write("".join(map(chr,[python_internal_ArrayImpl._get(chars, (c >> 4))])))
            s_b.write("".join(map(chr,[python_internal_ArrayImpl._get(chars, (c & 15))])))
        return s_b.getvalue()

    @staticmethod
    def alloc(length):
        return haxe_io_Bytes(length,bytearray(length))

    @staticmethod
    def ofString(s,encoding = None):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)

    @staticmethod
    def ofHex(s):
        _hx_len = len(s)
        if (((_hx_len & 1)) != 0):
            raise haxe_Exception.thrown("Not a hex string (odd number of digits)")
        ret = haxe_io_Bytes.alloc((_hx_len >> 1))
        _g = 0
        _g1 = ret.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            index = (i * 2)
            high = (-1 if ((index >= len(s))) else ord(s[index]))
            index1 = ((i * 2) + 1)
            low = (-1 if ((index1 >= len(s))) else ord(s[index1]))
            high = (((high & 15)) + ((((((high & 64)) >> 6)) * 9)))
            low = (((low & 15)) + ((((((low & 64)) >> 6)) * 9)))
            ret.b[i] = (((((high << 4) | low)) & 255) & 255)
        return ret

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.length = None
        _hx_o.b = None
haxe_io_Bytes._hx_class = haxe_io_Bytes
_hx_classes["haxe.io.Bytes"] = haxe_io_Bytes


class haxe_crypto_Base64:
    _hx_class_name = "haxe.crypto.Base64"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["CHARS", "BYTES", "encode", "decode"]

    @staticmethod
    def encode(_hx_bytes,complement = None):
        if (complement is None):
            complement = True
        _hx_str = haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(_hx_bytes).toString()
        if complement:
            _g = HxOverrides.mod(_hx_bytes.length, 3)
            if (_g == 1):
                _hx_str = (("null" if _hx_str is None else _hx_str) + "==")
            elif (_g == 2):
                _hx_str = (("null" if _hx_str is None else _hx_str) + "=")
            else:
                pass
        return _hx_str

    @staticmethod
    def decode(_hx_str,complement = None):
        if (complement is None):
            complement = True
        if complement:
            while (HxString.charCodeAt(_hx_str,(len(_hx_str) - 1)) == 61):
                _hx_str = HxString.substr(_hx_str,0,-1)
        return haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(_hx_str))
haxe_crypto_Base64._hx_class = haxe_crypto_Base64
_hx_classes["haxe.crypto.Base64"] = haxe_crypto_Base64


class haxe_crypto_BaseCode:
    _hx_class_name = "haxe.crypto.BaseCode"
    _hx_is_interface = "False"
    __slots__ = ("base", "nbits", "tbl")
    _hx_fields = ["base", "nbits", "tbl"]
    _hx_methods = ["encodeBytes", "initTable", "decodeBytes"]

    def __init__(self,base):
        self.tbl = None
        _hx_len = base.length
        nbits = 1
        while (_hx_len > ((1 << nbits))):
            nbits = (nbits + 1)
        if ((nbits > 8) or ((_hx_len != ((1 << nbits))))):
            raise haxe_Exception.thrown("BaseCode : base length must be a power of two.")
        self.base = base
        self.nbits = nbits

    def encodeBytes(self,b):
        nbits = self.nbits
        base = self.base
        x = ((b.length * 8) / nbits)
        size = None
        try:
            size = int(x)
        except BaseException as _g:
            None
            size = None
        out = haxe_io_Bytes.alloc((size + ((0 if ((HxOverrides.mod((b.length * 8), nbits) == 0)) else 1))))
        buf = 0
        curbits = 0
        mask = (((1 << nbits)) - 1)
        pin = 0
        pout = 0
        while (pout < size):
            while (curbits < nbits):
                curbits = (curbits + 8)
                buf = (buf << 8)
                pos = pin
                pin = (pin + 1)
                buf = (buf | b.b[pos])
            curbits = (curbits - nbits)
            pos1 = pout
            pout = (pout + 1)
            v = base.b[((buf >> curbits) & mask)]
            out.b[pos1] = (v & 255)
        if (curbits > 0):
            pos = pout
            pout = (pout + 1)
            v = base.b[((buf << ((nbits - curbits))) & mask)]
            out.b[pos] = (v & 255)
        return out

    def initTable(self):
        tbl = list()
        _g = 0
        while (_g < 256):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(tbl, i, -1)
        _g = 0
        _g1 = self.base.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(tbl, self.base.b[i], i)
        self.tbl = tbl

    def decodeBytes(self,b):
        nbits = self.nbits
        base = self.base
        if (self.tbl is None):
            self.initTable()
        tbl = self.tbl
        size = ((b.length * nbits) >> 3)
        out = haxe_io_Bytes.alloc(size)
        buf = 0
        curbits = 0
        pin = 0
        pout = 0
        while (pout < size):
            while (curbits < 8):
                curbits = (curbits + nbits)
                buf = (buf << nbits)
                pos = pin
                pin = (pin + 1)
                i = python_internal_ArrayImpl._get(tbl, b.b[pos])
                if (i == -1):
                    raise haxe_Exception.thrown("BaseCode : invalid encoded char")
                buf = (buf | i)
            curbits = (curbits - 8)
            pos1 = pout
            pout = (pout + 1)
            out.b[pos1] = (((buf >> curbits) & 255) & 255)
        return out

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.base = None
        _hx_o.nbits = None
        _hx_o.tbl = None
haxe_crypto_BaseCode._hx_class = haxe_crypto_BaseCode
_hx_classes["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode


class haxe_crypto_Crc32:
    _hx_class_name = "haxe.crypto.Crc32"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["make"]

    @staticmethod
    def make(data):
        c_crc = -1
        b = data.b
        _g = 0
        _g1 = data.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            tmp = (((c_crc ^ b[i])) & 255)
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            tmp = (HxOverrides.rshift(tmp, 1) ^ ((-((tmp & 1)) & -306674912)))
            c_crc = (HxOverrides.rshift(c_crc, 8) ^ tmp)
        return (c_crc ^ -1)
haxe_crypto_Crc32._hx_class = haxe_crypto_Crc32
_hx_classes["haxe.crypto.Crc32"] = haxe_crypto_Crc32


class haxe_crypto_Md5:
    _hx_class_name = "haxe.crypto.Md5"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["bitOR", "bitXOR", "bitAND", "addme", "rol", "cmn", "ff", "gg", "hh", "ii", "doEncode"]
    _hx_statics = ["make", "bytes2blks"]

    def __init__(self):
        pass

    def bitOR(self,a,b):
        lsb = ((a & 1) | ((b & 1)))
        msb31 = (HxOverrides.rshift(a, 1) | (HxOverrides.rshift(b, 1)))
        return ((msb31 << 1) | lsb)

    def bitXOR(self,a,b):
        lsb = ((a & 1) ^ ((b & 1)))
        msb31 = (HxOverrides.rshift(a, 1) ^ (HxOverrides.rshift(b, 1)))
        return ((msb31 << 1) | lsb)

    def bitAND(self,a,b):
        lsb = ((a & 1) & ((b & 1)))
        msb31 = (HxOverrides.rshift(a, 1) & (HxOverrides.rshift(b, 1)))
        return ((msb31 << 1) | lsb)

    def addme(self,x,y):
        lsw = (((x & 65535)) + ((y & 65535)))
        msw = ((((x >> 16)) + ((y >> 16))) + ((lsw >> 16)))
        return ((msw << 16) | ((lsw & 65535)))

    def rol(self,num,cnt):
        return ((num << cnt) | (HxOverrides.rshift(num, ((32 - cnt)))))

    def cmn(self,q,a,b,x,s,t):
        return self.addme(self.rol(self.addme(self.addme(a,q),self.addme(x,t)),s),b)

    def ff(self,a,b,c,d,x,s,t):
        return self.cmn(self.bitOR(self.bitAND(b,c),self.bitAND(~b,d)),a,b,x,s,t)

    def gg(self,a,b,c,d,x,s,t):
        return self.cmn(self.bitOR(self.bitAND(b,d),self.bitAND(c,~d)),a,b,x,s,t)

    def hh(self,a,b,c,d,x,s,t):
        return self.cmn(self.bitXOR(self.bitXOR(b,c),d),a,b,x,s,t)

    def ii(self,a,b,c,d,x,s,t):
        return self.cmn(self.bitXOR(c,self.bitOR(b,~d)),a,b,x,s,t)

    def doEncode(self,x):
        a = 1732584193
        b = -271733879
        c = -1732584194
        d = 271733878
        step = None
        i = 0
        while (i < len(x)):
            olda = a
            oldb = b
            oldc = c
            oldd = d
            step = 0
            a = self.ff(a,b,c,d,(x[i] if i >= 0 and i < len(x) else None),7,-680876936)
            d = self.ff(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 1)),12,-389564586)
            c = self.ff(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 2)),17,606105819)
            b = self.ff(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 3)),22,-1044525330)
            a = self.ff(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 4)),7,-176418897)
            d = self.ff(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 5)),12,1200080426)
            c = self.ff(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 6)),17,-1473231341)
            b = self.ff(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 7)),22,-45705983)
            a = self.ff(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 8)),7,1770035416)
            d = self.ff(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 9)),12,-1958414417)
            c = self.ff(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 10)),17,-42063)
            b = self.ff(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 11)),22,-1990404162)
            a = self.ff(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 12)),7,1804603682)
            d = self.ff(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 13)),12,-40341101)
            c = self.ff(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 14)),17,-1502002290)
            b = self.ff(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 15)),22,1236535329)
            a = self.gg(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 1)),5,-165796510)
            d = self.gg(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 6)),9,-1069501632)
            c = self.gg(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 11)),14,643717713)
            b = self.gg(b,c,d,a,(x[i] if i >= 0 and i < len(x) else None),20,-373897302)
            a = self.gg(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 5)),5,-701558691)
            d = self.gg(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 10)),9,38016083)
            c = self.gg(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 15)),14,-660478335)
            b = self.gg(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 4)),20,-405537848)
            a = self.gg(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 9)),5,568446438)
            d = self.gg(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 14)),9,-1019803690)
            c = self.gg(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 3)),14,-187363961)
            b = self.gg(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 8)),20,1163531501)
            a = self.gg(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 13)),5,-1444681467)
            d = self.gg(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 2)),9,-51403784)
            c = self.gg(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 7)),14,1735328473)
            b = self.gg(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 12)),20,-1926607734)
            a = self.hh(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 5)),4,-378558)
            d = self.hh(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 8)),11,-2022574463)
            c = self.hh(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 11)),16,1839030562)
            b = self.hh(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 14)),23,-35309556)
            a = self.hh(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 1)),4,-1530992060)
            d = self.hh(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 4)),11,1272893353)
            c = self.hh(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 7)),16,-155497632)
            b = self.hh(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 10)),23,-1094730640)
            a = self.hh(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 13)),4,681279174)
            d = self.hh(d,a,b,c,(x[i] if i >= 0 and i < len(x) else None),11,-358537222)
            c = self.hh(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 3)),16,-722521979)
            b = self.hh(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 6)),23,76029189)
            a = self.hh(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 9)),4,-640364487)
            d = self.hh(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 12)),11,-421815835)
            c = self.hh(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 15)),16,530742520)
            b = self.hh(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 2)),23,-995338651)
            a = self.ii(a,b,c,d,(x[i] if i >= 0 and i < len(x) else None),6,-198630844)
            d = self.ii(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 7)),10,1126891415)
            c = self.ii(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 14)),15,-1416354905)
            b = self.ii(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 5)),21,-57434055)
            a = self.ii(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 12)),6,1700485571)
            d = self.ii(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 3)),10,-1894986606)
            c = self.ii(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 10)),15,-1051523)
            b = self.ii(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 1)),21,-2054922799)
            a = self.ii(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 8)),6,1873313359)
            d = self.ii(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 15)),10,-30611744)
            c = self.ii(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 6)),15,-1560198380)
            b = self.ii(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 13)),21,1309151649)
            a = self.ii(a,b,c,d,python_internal_ArrayImpl._get(x, (i + 4)),6,-145523070)
            d = self.ii(d,a,b,c,python_internal_ArrayImpl._get(x, (i + 11)),10,-1120210379)
            c = self.ii(c,d,a,b,python_internal_ArrayImpl._get(x, (i + 2)),15,718787259)
            b = self.ii(b,c,d,a,python_internal_ArrayImpl._get(x, (i + 9)),21,-343485551)
            a = self.addme(a,olda)
            b = self.addme(b,oldb)
            c = self.addme(c,oldc)
            d = self.addme(d,oldd)
            i = (i + 16)
        return [a, b, c, d]

    @staticmethod
    def make(b):
        h = haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b))
        out = haxe_io_Bytes.alloc(16)
        p = 0
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[0] if 0 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[0] if 0 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[0] if 0 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[0] if 0 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[1] if 1 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[1] if 1 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[1] if 1 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[1] if 1 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[2] if 2 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[2] if 2 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[2] if 2 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[2] if 2 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[3] if 3 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[3] if 3 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[3] if 3 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[3] if 3 < len(h) else None), 24) & 255)
        return out

    @staticmethod
    def bytes2blks(b):
        nblk = ((((b.length + 8) >> 6)) + 1)
        blks = list()
        blksSize = (nblk * 16)
        _g = 0
        _g1 = blksSize
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(blks, i, 0)
        i = 0
        while (i < b.length):
            _hx_local_0 = blks
            _hx_local_1 = (i >> 2)
            _hx_local_2 = (_hx_local_0[_hx_local_1] if _hx_local_1 >= 0 and _hx_local_1 < len(_hx_local_0) else None)
            python_internal_ArrayImpl._set(_hx_local_0, _hx_local_1, (_hx_local_2 | ((b.b[i] << (((((((b.length << 3)) + i) & 3)) << 3))))))
            (_hx_local_0[_hx_local_1] if _hx_local_1 >= 0 and _hx_local_1 < len(_hx_local_0) else None)
            i = (i + 1)
        _hx_local_4 = blks
        _hx_local_5 = (i >> 2)
        _hx_local_6 = (_hx_local_4[_hx_local_5] if _hx_local_5 >= 0 and _hx_local_5 < len(_hx_local_4) else None)
        python_internal_ArrayImpl._set(_hx_local_4, _hx_local_5, (_hx_local_6 | ((128 << ((HxOverrides.mod((((b.length * 8) + i)), 4) * 8))))))
        (_hx_local_4[_hx_local_5] if _hx_local_5 >= 0 and _hx_local_5 < len(_hx_local_4) else None)
        l = (b.length * 8)
        k = ((nblk * 16) - 2)
        python_internal_ArrayImpl._set(blks, k, (l & 255))
        python_internal_ArrayImpl._set(blks, k, ((blks[k] if k >= 0 and k < len(blks) else None) | ((((HxOverrides.rshift(l, 8) & 255)) << 8))))
        python_internal_ArrayImpl._set(blks, k, ((blks[k] if k >= 0 and k < len(blks) else None) | ((((HxOverrides.rshift(l, 16) & 255)) << 16))))
        python_internal_ArrayImpl._set(blks, k, ((blks[k] if k >= 0 and k < len(blks) else None) | ((((HxOverrides.rshift(l, 24) & 255)) << 24))))
        return blks

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_crypto_Md5._hx_class = haxe_crypto_Md5
_hx_classes["haxe.crypto.Md5"] = haxe_crypto_Md5


class haxe_crypto_Sha1:
    _hx_class_name = "haxe.crypto.Sha1"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["doEncode", "ft", "kt"]
    _hx_statics = ["make", "bytes2blks"]

    def __init__(self):
        pass

    def doEncode(self,x):
        w = list()
        a = 1732584193
        b = -271733879
        c = -1732584194
        d = 271733878
        e = -1009589776
        i = 0
        while (i < len(x)):
            olda = a
            oldb = b
            oldc = c
            oldd = d
            olde = e
            j = 0
            while (j < 80):
                if (j < 16):
                    python_internal_ArrayImpl._set(w, j, python_internal_ArrayImpl._get(x, (i + j)))
                else:
                    num = (((python_internal_ArrayImpl._get(w, (j - 3)) ^ python_internal_ArrayImpl._get(w, (j - 8))) ^ python_internal_ArrayImpl._get(w, (j - 14))) ^ python_internal_ArrayImpl._get(w, (j - 16)))
                    python_internal_ArrayImpl._set(w, j, ((num << 1) | (HxOverrides.rshift(num, 31))))
                t = (((((((a << 5) | (HxOverrides.rshift(a, 27)))) + self.ft(j,b,c,d)) + e) + (w[j] if j >= 0 and j < len(w) else None)) + self.kt(j))
                e = d
                d = c
                c = ((b << 30) | (HxOverrides.rshift(b, 2)))
                b = a
                a = t
                j = (j + 1)
            a = (a + olda)
            b = (b + oldb)
            c = (c + oldc)
            d = (d + oldd)
            e = (e + olde)
            i = (i + 16)
        return [a, b, c, d, e]

    def ft(self,t,b,c,d):
        if (t < 20):
            return ((b & c) | ((~b & d)))
        if (t < 40):
            return ((b ^ c) ^ d)
        if (t < 60):
            return (((b & c) | ((b & d))) | ((c & d)))
        return ((b ^ c) ^ d)

    def kt(self,t):
        if (t < 20):
            return 1518500249
        if (t < 40):
            return 1859775393
        if (t < 60):
            return -1894007588
        return -899497514

    @staticmethod
    def make(b):
        h = haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b))
        out = haxe_io_Bytes.alloc(20)
        p = 0
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[0] if 0 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[0] if 0 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[0] if 0 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[0] if 0 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[1] if 1 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[1] if 1 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[1] if 1 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[1] if 1 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[2] if 2 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[2] if 2 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[2] if 2 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[2] if 2 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[3] if 3 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[3] if 3 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[3] if 3 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[3] if 3 < len(h) else None) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (HxOverrides.rshift((h[4] if 4 < len(h) else None), 24) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[4] if 4 < len(h) else None) >> 16) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = ((((h[4] if 4 < len(h) else None) >> 8) & 255) & 255)
        pos = p
        p = (p + 1)
        out.b[pos] = (((h[4] if 4 < len(h) else None) & 255) & 255)
        return out

    @staticmethod
    def bytes2blks(b):
        nblk = ((((b.length + 8) >> 6)) + 1)
        blks = list()
        _g = 0
        _g1 = (nblk * 16)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(blks, i, 0)
        _g = 0
        _g1 = b.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            p = (i >> 2)
            python_internal_ArrayImpl._set(blks, p, ((blks[p] if p >= 0 and p < len(blks) else None) | ((b.b[i] << ((24 - ((((i & 3)) << 3))))))))
        i = b.length
        p = (i >> 2)
        python_internal_ArrayImpl._set(blks, p, ((blks[p] if p >= 0 and p < len(blks) else None) | ((128 << ((24 - ((((i & 3)) << 3))))))))
        python_internal_ArrayImpl._set(blks, ((nblk * 16) - 1), (b.length * 8))
        return blks

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_crypto_Sha1._hx_class = haxe_crypto_Sha1
_hx_classes["haxe.crypto.Sha1"] = haxe_crypto_Sha1


class haxe_ds_BalancedTree:
    _hx_class_name = "haxe.ds.BalancedTree"
    _hx_is_interface = "False"
    __slots__ = ("root",)
    _hx_fields = ["root"]
    _hx_methods = ["set", "get", "keys", "setLoop", "keysLoop", "balance", "compare", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.root = None

    def set(self,key,value):
        self.root = self.setLoop(key,value,self.root)

    def get(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return node.value
            if (c < 0):
                node = node.left
            else:
                node = node.right
        return None

    def keys(self):
        ret = []
        self.keysLoop(self.root,ret)
        return haxe_iterators_ArrayIterator(ret)

    def setLoop(self,k,v,node):
        if (node is None):
            return haxe_ds_TreeNode(None,k,v,None)
        c = self.compare(k,node.key)
        if (c == 0):
            return haxe_ds_TreeNode(node.left,k,v,node.right,(0 if ((node is None)) else node._height))
        elif (c < 0):
            nl = self.setLoop(k,v,node.left)
            return self.balance(nl,node.key,node.value,node.right)
        else:
            nr = self.setLoop(k,v,node.right)
            return self.balance(node.left,node.key,node.value,nr)

    def keysLoop(self,node,acc):
        if (node is not None):
            self.keysLoop(node.left,acc)
            x = node.key
            acc.append(x)
            self.keysLoop(node.right,acc)

    def balance(self,l,k,v,r):
        hl = (0 if ((l is None)) else l._height)
        hr = (0 if ((r is None)) else r._height)
        if (hl > ((hr + 2))):
            _this = l.left
            _this1 = l.right
            if (((0 if ((_this is None)) else _this._height)) >= ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(l.left,l.key,l.value,haxe_ds_TreeNode(l.right,k,v,r))
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,haxe_ds_TreeNode(l.right.right,k,v,r))
        elif (hr > ((hl + 2))):
            _this = r.right
            _this1 = r.left
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right)
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right))
        else:
            return haxe_ds_TreeNode(l,k,v,r,(((hl if ((hl > hr)) else hr)) + 1))

    def compare(self,k1,k2):
        return Reflect.compare(k1,k2)

    def toString(self):
        if (self.root is None):
            return "[]"
        else:
            return (("[" + HxOverrides.stringOrNull(self.root.toString())) + "]")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.root = None
haxe_ds_BalancedTree._hx_class = haxe_ds_BalancedTree
_hx_classes["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree


class haxe_ds_TreeNode:
    _hx_class_name = "haxe.ds.TreeNode"
    _hx_is_interface = "False"
    __slots__ = ("left", "right", "key", "value", "_height")
    _hx_fields = ["left", "right", "key", "value", "_height"]
    _hx_methods = ["toString"]

    def __init__(self,l,k,v,r,h = None):
        if (h is None):
            h = -1
        self._height = None
        self.left = l
        self.key = k
        self.value = v
        self.right = r
        if (h == -1):
            tmp = None
            _this = self.left
            _this1 = self.right
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                _this = self.left
                tmp = (0 if ((_this is None)) else _this._height)
            else:
                _this = self.right
                tmp = (0 if ((_this is None)) else _this._height)
            self._height = (tmp + 1)
        else:
            self._height = h

    def toString(self):
        return ((HxOverrides.stringOrNull((("" if ((self.left is None)) else (HxOverrides.stringOrNull(self.left.toString()) + ", ")))) + (((("" + Std.string(self.key)) + " => ") + Std.string(self.value)))) + HxOverrides.stringOrNull((("" if ((self.right is None)) else (", " + HxOverrides.stringOrNull(self.right.toString()))))))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.left = None
        _hx_o.right = None
        _hx_o.key = None
        _hx_o.value = None
        _hx_o._height = None
haxe_ds_TreeNode._hx_class = haxe_ds_TreeNode
_hx_classes["haxe.ds.TreeNode"] = haxe_ds_TreeNode

class haxe_ds_Either(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.ds.Either"
    _hx_constructs = ["Left", "Right"]

    @staticmethod
    def Left(v):
        return haxe_ds_Either("Left", 0, (v,))

    @staticmethod
    def Right(v):
        return haxe_ds_Either("Right", 1, (v,))
haxe_ds_Either._hx_class = haxe_ds_Either
_hx_classes["haxe.ds.Either"] = haxe_ds_Either


class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):
    _hx_class_name = "haxe.ds.EnumValueMap"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["compare", "compareArgs", "compareArg"]
    _hx_statics = []
    _hx_interfaces = [haxe_IMap]
    _hx_super = haxe_ds_BalancedTree


    def __init__(self):
        super().__init__()

    def compare(self,k1,k2):
        d = (k1.index - k2.index)
        if (d != 0):
            return d
        p1 = list(k1.params)
        p2 = list(k2.params)
        if ((len(p1) == 0) and ((len(p2) == 0))):
            return 0
        return self.compareArgs(p1,p2)

    def compareArgs(self,a1,a2):
        ld = (len(a1) - len(a2))
        if (ld != 0):
            return ld
        _g = 0
        _g1 = len(a1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            d = self.compareArg((a1[i] if i >= 0 and i < len(a1) else None),(a2[i] if i >= 0 and i < len(a2) else None))
            if (d != 0):
                return d
        return 0

    def compareArg(self,v1,v2):
        if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)):
            return self.compare(v1,v2)
        elif (Std.isOfType(v1,list) and Std.isOfType(v2,list)):
            return self.compareArgs(v1,v2)
        else:
            return Reflect.compare(v1,v2)

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_ds_EnumValueMap._hx_class = haxe_ds_EnumValueMap
_hx_classes["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap


class haxe_ds_GenericCell:
    _hx_class_name = "haxe.ds.GenericCell"
    _hx_is_interface = "False"
    __slots__ = ("elt", "next")
    _hx_fields = ["elt", "next"]

    def __init__(self,elt,next):
        self.elt = elt
        self.next = next

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.elt = None
        _hx_o.next = None
haxe_ds_GenericCell._hx_class = haxe_ds_GenericCell
_hx_classes["haxe.ds.GenericCell"] = haxe_ds_GenericCell


class haxe_ds_GenericStack:
    _hx_class_name = "haxe.ds.GenericStack"
    _hx_is_interface = "False"
    __slots__ = ("head",)
    _hx_fields = ["head"]

    def __init__(self):
        self.head = None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.head = None
haxe_ds_GenericStack._hx_class = haxe_ds_GenericStack
_hx_classes["haxe.ds.GenericStack"] = haxe_ds_GenericStack


class haxe_ds_IntMap:
    _hx_class_name = "haxe.ds.IntMap"
    _hx_is_interface = "False"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "get", "keys", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def set(self,key,value):
        self.h[key] = value

    def get(self,key):
        return self.h.get(key,None)

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

    def toString(self):
        s_b = python_lib_io_StringIO()
        s_b.write("[")
        it = self.keys()
        i = it
        while i.hasNext():
            i1 = i.next()
            s_b.write(Std.string(i1))
            s_b.write(" => ")
            s_b.write(Std.string(Std.string(self.h.get(i1,None))))
            if it.hasNext():
                s_b.write(", ")
        s_b.write("]")
        return s_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_IntMap._hx_class = haxe_ds_IntMap
_hx_classes["haxe.ds.IntMap"] = haxe_ds_IntMap

class haxe_ds_Option(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.ds.Option"
    _hx_constructs = ["Some", "None"]

    @staticmethod
    def Some(v):
        return haxe_ds_Option("Some", 0, (v,))
haxe_ds_Option._hx_None = haxe_ds_Option("None", 1, ())
haxe_ds_Option._hx_class = haxe_ds_Option
_hx_classes["haxe.ds.Option"] = haxe_ds_Option


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    _hx_is_interface = "False"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "get", "remove", "keys", "iterator", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def set(self,key,value):
        self.h[key] = value

    def get(self,key):
        return self.h.get(key,None)

    def remove(self,key):
        has = (key in self.h)
        if has:
            del self.h[key]
        return has

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

    def iterator(self):
        return python_HaxeIterator(iter(self.h.values()))

    def toString(self):
        s_b = python_lib_io_StringIO()
        s_b.write("[")
        it = self.keys()
        i = it
        while i.hasNext():
            i1 = i.next()
            s_b.write(Std.string(i1))
            s_b.write(" => ")
            s_b.write(Std.string(Std.string(self.h.get(i1,None))))
            if it.hasNext():
                s_b.write(", ")
        s_b.write("]")
        return s_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_StringMap._hx_class = haxe_ds_StringMap
_hx_classes["haxe.ds.StringMap"] = haxe_ds_StringMap


class haxe_exceptions_PosException(haxe_Exception):
    _hx_class_name = "haxe.exceptions.PosException"
    _hx_is_interface = "False"
    __slots__ = ("posInfos",)
    _hx_fields = ["posInfos"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,message,previous = None,pos = None):
        self.posInfos = None
        super().__init__(message,previous)
        if (pos is None):
            self.posInfos = _hx_AnonObject({'fileName': "(unknown)", 'lineNumber': 0, 'className': "(unknown)", 'methodName': "(unknown)"})
        else:
            self.posInfos = pos

    def toString(self):
        return ((((((((("" + HxOverrides.stringOrNull(super().toString())) + " in ") + HxOverrides.stringOrNull(self.posInfos.className)) + ".") + HxOverrides.stringOrNull(self.posInfos.methodName)) + " at ") + HxOverrides.stringOrNull(self.posInfos.fileName)) + ":") + Std.string(self.posInfos.lineNumber))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.posInfos = None
haxe_exceptions_PosException._hx_class = haxe_exceptions_PosException
_hx_classes["haxe.exceptions.PosException"] = haxe_exceptions_PosException


class haxe_exceptions_NotImplementedException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.NotImplementedException"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,message = None,previous = None,pos = None):
        if (message is None):
            message = "Not implemented"
        super().__init__(message,previous,pos)
haxe_exceptions_NotImplementedException._hx_class = haxe_exceptions_NotImplementedException
_hx_classes["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException


class haxe_format_JsonParser:
    _hx_class_name = "haxe.format.JsonParser"
    _hx_is_interface = "False"
    __slots__ = ("str", "pos")
    _hx_fields = ["str", "pos"]
    _hx_methods = ["doParse", "parseRec", "parseString", "invalidChar", "invalidNumber"]

    def __init__(self,_hx_str):
        self.str = _hx_str
        self.pos = 0

    def doParse(self):
        result = self.parseRec()
        c = None
        while True:
            s = self.str
            index = self.pos
            self.pos = (self.pos + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            if (not ((c != -1))):
                break
            c1 = c
            if ((((c1 == 32) or ((c1 == 13))) or ((c1 == 10))) or ((c1 == 9))):
                pass
            else:
                self.invalidChar()
        return result

    def parseRec(self):
        while True:
            s = self.str
            index = self.pos
            self.pos = (self.pos + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            c1 = c
            if ((((c1 == 32) or ((c1 == 13))) or ((c1 == 10))) or ((c1 == 9))):
                pass
            elif (c1 == 34):
                return self.parseString()
            elif (((((((((((c1 == 57) or ((c1 == 56))) or ((c1 == 55))) or ((c1 == 54))) or ((c1 == 53))) or ((c1 == 52))) or ((c1 == 51))) or ((c1 == 50))) or ((c1 == 49))) or ((c1 == 48))) or ((c1 == 45))):
                c2 = c
                start = (self.pos - 1)
                minus = (c2 == 45)
                digit = (not minus)
                zero = (c2 == 48)
                point = False
                e = False
                pm = False
                end = False
                while True:
                    s1 = self.str
                    index1 = self.pos
                    self.pos = (self.pos + 1)
                    c2 = (-1 if ((index1 >= len(s1))) else ord(s1[index1]))
                    c3 = c2
                    if ((c3 == 45) or ((c3 == 43))):
                        if ((not e) or pm):
                            self.invalidNumber(start)
                        digit = False
                        pm = True
                    elif (c3 == 46):
                        if ((minus or point) or e):
                            self.invalidNumber(start)
                        digit = False
                        point = True
                    elif (c3 == 48):
                        if (zero and (not point)):
                            self.invalidNumber(start)
                        if minus:
                            minus = False
                            zero = True
                        digit = True
                    elif (((((((((c3 == 57) or ((c3 == 56))) or ((c3 == 55))) or ((c3 == 54))) or ((c3 == 53))) or ((c3 == 52))) or ((c3 == 51))) or ((c3 == 50))) or ((c3 == 49))):
                        if (zero and (not point)):
                            self.invalidNumber(start)
                        if minus:
                            minus = False
                        digit = True
                        zero = False
                    elif ((c3 == 101) or ((c3 == 69))):
                        if ((minus or zero) or e):
                            self.invalidNumber(start)
                        digit = False
                        e = True
                    else:
                        if (not digit):
                            self.invalidNumber(start)
                        _hx_local_0 = self
                        _hx_local_1 = _hx_local_0.pos
                        _hx_local_0.pos = (_hx_local_1 - 1)
                        _hx_local_1
                        end = True
                    if (not ((not end))):
                        break
                f = Std.parseFloat(HxString.substr(self.str,start,(self.pos - start)))
                if point:
                    return f
                else:
                    i = None
                    try:
                        i = int(f)
                    except BaseException as _g:
                        None
                        i = None
                    i1 = i
                    if (i1 == f):
                        return i1
                    else:
                        return f
            elif (c1 == 91):
                arr = []
                comma = None
                while True:
                    s2 = self.str
                    index2 = self.pos
                    self.pos = (self.pos + 1)
                    c4 = (-1 if ((index2 >= len(s2))) else ord(s2[index2]))
                    c5 = c4
                    if ((((c5 == 32) or ((c5 == 13))) or ((c5 == 10))) or ((c5 == 9))):
                        pass
                    elif (c5 == 44):
                        if comma:
                            comma = False
                        else:
                            self.invalidChar()
                    elif (c5 == 93):
                        if (comma == False):
                            self.invalidChar()
                        return arr
                    else:
                        if comma:
                            self.invalidChar()
                        _hx_local_2 = self
                        _hx_local_3 = _hx_local_2.pos
                        _hx_local_2.pos = (_hx_local_3 - 1)
                        _hx_local_3
                        x = self.parseRec()
                        arr.append(x)
                        comma = True
            elif (c1 == 102):
                save = self.pos
                tmp = None
                tmp1 = None
                tmp2 = None
                s3 = self.str
                index3 = self.pos
                self.pos = (self.pos + 1)
                if (((-1 if ((index3 >= len(s3))) else ord(s3[index3]))) == 97):
                    s4 = self.str
                    index4 = self.pos
                    self.pos = (self.pos + 1)
                    tmp2 = (((-1 if ((index4 >= len(s4))) else ord(s4[index4]))) != 108)
                else:
                    tmp2 = True
                if (not tmp2):
                    s5 = self.str
                    index5 = self.pos
                    self.pos = (self.pos + 1)
                    tmp1 = (((-1 if ((index5 >= len(s5))) else ord(s5[index5]))) != 115)
                else:
                    tmp1 = True
                if (not tmp1):
                    s6 = self.str
                    index6 = self.pos
                    self.pos = (self.pos + 1)
                    tmp = (((-1 if ((index6 >= len(s6))) else ord(s6[index6]))) != 101)
                else:
                    tmp = True
                if tmp:
                    self.pos = save
                    self.invalidChar()
                return False
            elif (c1 == 110):
                save1 = self.pos
                tmp3 = None
                tmp4 = None
                s7 = self.str
                index7 = self.pos
                self.pos = (self.pos + 1)
                if (((-1 if ((index7 >= len(s7))) else ord(s7[index7]))) == 117):
                    s8 = self.str
                    index8 = self.pos
                    self.pos = (self.pos + 1)
                    tmp4 = (((-1 if ((index8 >= len(s8))) else ord(s8[index8]))) != 108)
                else:
                    tmp4 = True
                if (not tmp4):
                    s9 = self.str
                    index9 = self.pos
                    self.pos = (self.pos + 1)
                    tmp3 = (((-1 if ((index9 >= len(s9))) else ord(s9[index9]))) != 108)
                else:
                    tmp3 = True
                if tmp3:
                    self.pos = save1
                    self.invalidChar()
                return None
            elif (c1 == 116):
                save2 = self.pos
                tmp5 = None
                tmp6 = None
                s10 = self.str
                index10 = self.pos
                self.pos = (self.pos + 1)
                if (((-1 if ((index10 >= len(s10))) else ord(s10[index10]))) == 114):
                    s11 = self.str
                    index11 = self.pos
                    self.pos = (self.pos + 1)
                    tmp6 = (((-1 if ((index11 >= len(s11))) else ord(s11[index11]))) != 117)
                else:
                    tmp6 = True
                if (not tmp6):
                    s12 = self.str
                    index12 = self.pos
                    self.pos = (self.pos + 1)
                    tmp5 = (((-1 if ((index12 >= len(s12))) else ord(s12[index12]))) != 101)
                else:
                    tmp5 = True
                if tmp5:
                    self.pos = save2
                    self.invalidChar()
                return True
            elif (c1 == 123):
                obj = _hx_AnonObject({})
                field = None
                comma1 = None
                while True:
                    s13 = self.str
                    index13 = self.pos
                    self.pos = (self.pos + 1)
                    c6 = (-1 if ((index13 >= len(s13))) else ord(s13[index13]))
                    c7 = c6
                    if ((((c7 == 32) or ((c7 == 13))) or ((c7 == 10))) or ((c7 == 9))):
                        pass
                    elif (c7 == 34):
                        if ((field is not None) or comma1):
                            self.invalidChar()
                        field = self.parseString()
                    elif (c7 == 44):
                        if comma1:
                            comma1 = False
                        else:
                            self.invalidChar()
                    elif (c7 == 58):
                        if (field is None):
                            self.invalidChar()
                        value = self.parseRec()
                        setattr(obj,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)
                        field = None
                        comma1 = True
                    elif (c7 == 125):
                        if ((field is not None) or ((comma1 == False))):
                            self.invalidChar()
                        return obj
                    else:
                        self.invalidChar()
            else:
                self.invalidChar()

    def parseString(self):
        start = self.pos
        buf = None
        prev = -1
        while True:
            s = self.str
            index = self.pos
            self.pos = (self.pos + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            if (c == 34):
                break
            if (c == 92):
                if (buf is None):
                    buf = StringBuf()
                s1 = self.str
                _hx_len = ((self.pos - start) - 1)
                s2 = (HxString.substr(s1,start,None) if ((_hx_len is None)) else HxString.substr(s1,start,_hx_len))
                buf.b.write(s2)
                s3 = self.str
                index1 = self.pos
                self.pos = (self.pos + 1)
                c = (-1 if ((index1 >= len(s3))) else ord(s3[index1]))
                if ((c != 117) and ((prev != -1))):
                    s4 = "".join(map(chr,[65533]))
                    buf.b.write(s4)
                    prev = -1
                c1 = c
                if (((c1 == 92) or ((c1 == 47))) or ((c1 == 34))):
                    s5 = "".join(map(chr,[c]))
                    buf.b.write(s5)
                elif (c1 == 98):
                    s6 = "".join(map(chr,[8]))
                    buf.b.write(s6)
                elif (c1 == 102):
                    s7 = "".join(map(chr,[12]))
                    buf.b.write(s7)
                elif (c1 == 110):
                    s8 = "".join(map(chr,[10]))
                    buf.b.write(s8)
                elif (c1 == 114):
                    s9 = "".join(map(chr,[13]))
                    buf.b.write(s9)
                elif (c1 == 116):
                    s10 = "".join(map(chr,[9]))
                    buf.b.write(s10)
                elif (c1 == 117):
                    uc = Std.parseInt(("0x" + HxOverrides.stringOrNull(HxString.substr(self.str,self.pos,4))))
                    _hx_local_0 = self
                    _hx_local_1 = _hx_local_0.pos
                    _hx_local_0.pos = (_hx_local_1 + 4)
                    _hx_local_0.pos
                    if (prev != -1):
                        if ((uc < 56320) or ((uc > 57343))):
                            s11 = "".join(map(chr,[65533]))
                            buf.b.write(s11)
                            prev = -1
                        else:
                            s12 = "".join(map(chr,[(((((prev - 55296) << 10)) + ((uc - 56320))) + 65536)]))
                            buf.b.write(s12)
                            prev = -1
                    elif ((uc >= 55296) and ((uc <= 56319))):
                        prev = uc
                    else:
                        s13 = "".join(map(chr,[uc]))
                        buf.b.write(s13)
                else:
                    raise haxe_Exception.thrown(((("Invalid escape sequence \\" + HxOverrides.stringOrNull("".join(map(chr,[c])))) + " at position ") + Std.string(((self.pos - 1)))))
                start = self.pos
            elif (c == -1):
                raise haxe_Exception.thrown("Unclosed string")
        if (prev != -1):
            s = "".join(map(chr,[65533]))
            buf.b.write(s)
            prev = -1
        if (buf is None):
            return HxString.substr(self.str,start,((self.pos - start) - 1))
        else:
            s = self.str
            _hx_len = ((self.pos - start) - 1)
            s1 = (HxString.substr(s,start,None) if ((_hx_len is None)) else HxString.substr(s,start,_hx_len))
            buf.b.write(s1)
            return buf.b.getvalue()

    def invalidChar(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.pos
        _hx_local_0.pos = (_hx_local_1 - 1)
        _hx_local_1
        s = self.str
        index = self.pos
        raise haxe_Exception.thrown(((("Invalid char " + Std.string(((-1 if ((index >= len(s))) else ord(s[index]))))) + " at position ") + Std.string(self.pos)))

    def invalidNumber(self,start):
        raise haxe_Exception.thrown(((("Invalid number at position " + Std.string(start)) + ": ") + HxOverrides.stringOrNull(HxString.substr(self.str,start,(self.pos - start)))))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.str = None
        _hx_o.pos = None
haxe_format_JsonParser._hx_class = haxe_format_JsonParser
_hx_classes["haxe.format.JsonParser"] = haxe_format_JsonParser


class haxe_format_JsonPrinter:
    _hx_class_name = "haxe.format.JsonPrinter"
    _hx_is_interface = "False"
    __slots__ = ("buf", "replacer", "indent", "pretty", "nind")
    _hx_fields = ["buf", "replacer", "indent", "pretty", "nind"]
    _hx_methods = ["write", "classString", "fieldsString", "quote"]
    _hx_statics = ["print"]

    def __init__(self,replacer,space):
        self.replacer = replacer
        self.indent = space
        self.pretty = (space is not None)
        self.nind = 0
        self.buf = StringBuf()

    def write(self,k,v):
        if (self.replacer is not None):
            v = self.replacer(k,v)
        _g = Type.typeof(v)
        tmp = _g.index
        if (tmp == 0):
            self.buf.b.write("null")
        elif (tmp == 1):
            _this = self.buf
            s = Std.string(v)
            _this.b.write(s)
        elif (tmp == 2):
            f = v
            v1 = (Std.string(v) if ((((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))) else "null")
            _this = self.buf
            s = Std.string(v1)
            _this.b.write(s)
        elif (tmp == 3):
            _this = self.buf
            s = Std.string(v)
            _this.b.write(s)
        elif (tmp == 4):
            self.fieldsString(v,python_Boot.fields(v))
        elif (tmp == 5):
            self.buf.b.write("\"<fun>\"")
        elif (tmp == 6):
            c = _g.params[0]
            if (c == str):
                self.quote(v)
            elif (c == list):
                v1 = v
                _this = self.buf
                s = "".join(map(chr,[91]))
                _this.b.write(s)
                _hx_len = len(v1)
                last = (_hx_len - 1)
                _g1 = 0
                _g2 = _hx_len
                while (_g1 < _g2):
                    i = _g1
                    _g1 = (_g1 + 1)
                    if (i > 0):
                        _this = self.buf
                        s = "".join(map(chr,[44]))
                        _this.b.write(s)
                    else:
                        _hx_local_0 = self
                        _hx_local_1 = _hx_local_0.nind
                        _hx_local_0.nind = (_hx_local_1 + 1)
                        _hx_local_1
                    if self.pretty:
                        _this1 = self.buf
                        s1 = "".join(map(chr,[10]))
                        _this1.b.write(s1)
                    if self.pretty:
                        v2 = StringTools.lpad("",self.indent,(self.nind * len(self.indent)))
                        _this2 = self.buf
                        s2 = Std.string(v2)
                        _this2.b.write(s2)
                    self.write(i,(v1[i] if i >= 0 and i < len(v1) else None))
                    if (i == last):
                        _hx_local_2 = self
                        _hx_local_3 = _hx_local_2.nind
                        _hx_local_2.nind = (_hx_local_3 - 1)
                        _hx_local_3
                        if self.pretty:
                            _this3 = self.buf
                            s3 = "".join(map(chr,[10]))
                            _this3.b.write(s3)
                        if self.pretty:
                            v3 = StringTools.lpad("",self.indent,(self.nind * len(self.indent)))
                            _this4 = self.buf
                            s4 = Std.string(v3)
                            _this4.b.write(s4)
                _this = self.buf
                s = "".join(map(chr,[93]))
                _this.b.write(s)
            elif (c == haxe_ds_StringMap):
                v1 = v
                o = _hx_AnonObject({})
                k = v1.keys()
                while k.hasNext():
                    k1 = k.next()
                    value = v1.h.get(k1,None)
                    setattr(o,(("_hx_" + k1) if ((k1 in python_Boot.keywords)) else (("_hx_" + k1) if (((((len(k1) > 2) and ((ord(k1[0]) == 95))) and ((ord(k1[1]) == 95))) and ((ord(k1[(len(k1) - 1)]) != 95)))) else k1)),value)
                v1 = o
                self.fieldsString(v1,python_Boot.fields(v1))
            elif (c == Date):
                v1 = v
                self.quote(v1.toString())
            else:
                self.classString(v)
        elif (tmp == 7):
            _g1 = _g.params[0]
            i = v.index
            v = Std.string(i)
            _this = self.buf
            s = Std.string(v)
            _this.b.write(s)
        elif (tmp == 8):
            self.buf.b.write("\"???\"")
        else:
            pass

    def classString(self,v):
        self.fieldsString(v,python_Boot.getInstanceFields(Type.getClass(v)))

    def fieldsString(self,v,fields):
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        _hx_len = len(fields)
        last = (_hx_len - 1)
        first = True
        _g = 0
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            f = (fields[i] if i >= 0 and i < len(fields) else None)
            value = Reflect.field(v,f)
            if Reflect.isFunction(value):
                continue
            if first:
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.nind
                _hx_local_0.nind = (_hx_local_1 + 1)
                _hx_local_1
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            if self.pretty:
                _this1 = self.buf
                s1 = "".join(map(chr,[10]))
                _this1.b.write(s1)
            if self.pretty:
                v1 = StringTools.lpad("",self.indent,(self.nind * len(self.indent)))
                _this2 = self.buf
                s2 = Std.string(v1)
                _this2.b.write(s2)
            self.quote(f)
            _this3 = self.buf
            s3 = "".join(map(chr,[58]))
            _this3.b.write(s3)
            if self.pretty:
                _this4 = self.buf
                s4 = "".join(map(chr,[32]))
                _this4.b.write(s4)
            self.write(f,value)
            if (i == last):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.nind
                _hx_local_2.nind = (_hx_local_3 - 1)
                _hx_local_3
                if self.pretty:
                    _this5 = self.buf
                    s5 = "".join(map(chr,[10]))
                    _this5.b.write(s5)
                if self.pretty:
                    v2 = StringTools.lpad("",self.indent,(self.nind * len(self.indent)))
                    _this6 = self.buf
                    s6 = Std.string(v2)
                    _this6.b.write(s6)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def quote(self,s):
        _this = self.buf
        s1 = "".join(map(chr,[34]))
        _this.b.write(s1)
        i = 0
        length = len(s)
        while (i < length):
            index = i
            i = (i + 1)
            c = ord(s[index])
            c1 = c
            if (c1 == 8):
                self.buf.b.write("\\b")
            elif (c1 == 9):
                self.buf.b.write("\\t")
            elif (c1 == 10):
                self.buf.b.write("\\n")
            elif (c1 == 12):
                self.buf.b.write("\\f")
            elif (c1 == 13):
                self.buf.b.write("\\r")
            elif (c1 == 34):
                self.buf.b.write("\\\"")
            elif (c1 == 92):
                self.buf.b.write("\\\\")
            else:
                _this = self.buf
                s1 = "".join(map(chr,[c]))
                _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[34]))
        _this.b.write(s)

    @staticmethod
    def print(o,replacer = None,space = None):
        printer = haxe_format_JsonPrinter(replacer,space)
        printer.write("",o)
        return printer.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buf = None
        _hx_o.replacer = None
        _hx_o.indent = None
        _hx_o.pretty = None
        _hx_o.nind = None
haxe_format_JsonPrinter._hx_class = haxe_format_JsonPrinter
_hx_classes["haxe.format.JsonPrinter"] = haxe_format_JsonPrinter


class haxe_http_HttpBase:
    _hx_class_name = "haxe.http.HttpBase"
    _hx_is_interface = "False"
    __slots__ = ()
haxe_http_HttpBase._hx_class = haxe_http_HttpBase
_hx_classes["haxe.http.HttpBase"] = haxe_http_HttpBase


class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    _hx_is_interface = "False"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = bytearray()

    def getBytes(self):
        _hx_bytes = haxe_io_Bytes(len(self.b),self.b)
        self.b = None
        return _hx_bytes

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.b = None
haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer
_hx_classes["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    _hx_is_interface = "False"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.bigEndian = None
haxe_io_Output._hx_class = haxe_io_Output
_hx_classes["haxe.io.Output"] = haxe_io_Output


class haxe_io_BytesOutput(haxe_io_Output):
    _hx_class_name = "haxe.io.BytesOutput"
    _hx_is_interface = "False"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["writeByte", "getBytes"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self):
        self.b = haxe_io_BytesBuffer()
        self.set_bigEndian(False)

    def writeByte(self,c):
        self.b.b.append(c)

    def getBytes(self):
        return self.b.getBytes()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.b = None
haxe_io_BytesOutput._hx_class = haxe_io_BytesOutput
_hx_classes["haxe.io.BytesOutput"] = haxe_io_BytesOutput

class haxe_io_Encoding(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Encoding"
    _hx_constructs = ["UTF8", "RawNative"]
haxe_io_Encoding.UTF8 = haxe_io_Encoding("UTF8", 0, ())
haxe_io_Encoding.RawNative = haxe_io_Encoding("RawNative", 1, ())
haxe_io_Encoding._hx_class = haxe_io_Encoding
_hx_classes["haxe.io.Encoding"] = haxe_io_Encoding


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        return "Eof"

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_io_Eof._hx_class = haxe_io_Eof
_hx_classes["haxe.io.Eof"] = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, (e,))
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, ())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, ())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, ())
haxe_io_Error._hx_class = haxe_io_Error
_hx_classes["haxe.io.Error"] = haxe_io_Error


class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["readByte"]

    def readByte(self):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Input.hx", 'lineNumber': 53, 'className': "haxe.io.Input", 'methodName': "readByte"}))

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_io_Input._hx_class = haxe_io_Input
_hx_classes["haxe.io.Input"] = haxe_io_Input


class haxe_io_Path:
    _hx_class_name = "haxe.io.Path"
    _hx_is_interface = "False"
    __slots__ = ("dir", "file", "ext", "backslash")
    _hx_fields = ["dir", "file", "ext", "backslash"]
    _hx_methods = ["toString"]
    _hx_statics = ["withoutExtension", "withoutDirectory", "extension", "withExtension", "join", "normalize", "addTrailingSlash"]

    def __init__(self,path):
        self.backslash = None
        self.ext = None
        self.file = None
        self.dir = None
        path1 = path
        _hx_local_0 = len(path1)
        if (_hx_local_0 == 1):
            if (path1 == "."):
                self.dir = path
                self.file = ""
                return
        elif (_hx_local_0 == 2):
            if (path1 == ".."):
                self.dir = path
                self.file = ""
                return
        else:
            pass
        startIndex = None
        c1 = None
        if (startIndex is None):
            c1 = path.rfind("/", 0, len(path))
        else:
            i = path.rfind("/", 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len("/"))) if ((i == -1)) else (i + 1))
            check = path.find("/", startLeft, len(path))
            c1 = (check if (((check > i) and ((check <= startIndex)))) else i)
        startIndex = None
        c2 = None
        if (startIndex is None):
            c2 = path.rfind("\\", 0, len(path))
        else:
            i = path.rfind("\\", 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len("\\"))) if ((i == -1)) else (i + 1))
            check = path.find("\\", startLeft, len(path))
            c2 = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (c1 < c2):
            self.dir = HxString.substr(path,0,c2)
            path = HxString.substr(path,(c2 + 1),None)
            self.backslash = True
        elif (c2 < c1):
            self.dir = HxString.substr(path,0,c1)
            path = HxString.substr(path,(c1 + 1),None)
        else:
            self.dir = None
        startIndex = None
        cp = None
        if (startIndex is None):
            cp = path.rfind(".", 0, len(path))
        else:
            i = path.rfind(".", 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len("."))) if ((i == -1)) else (i + 1))
            check = path.find(".", startLeft, len(path))
            cp = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (cp != -1):
            self.ext = HxString.substr(path,(cp + 1),None)
            self.file = HxString.substr(path,0,cp)
        else:
            self.ext = None
            self.file = path

    def toString(self):
        return ((HxOverrides.stringOrNull((("" if ((self.dir is None)) else (HxOverrides.stringOrNull(self.dir) + HxOverrides.stringOrNull((("\\" if (self.backslash) else "/"))))))) + HxOverrides.stringOrNull(self.file)) + HxOverrides.stringOrNull((("" if ((self.ext is None)) else ("." + HxOverrides.stringOrNull(self.ext))))))

    @staticmethod
    def withoutExtension(path):
        s = haxe_io_Path(path)
        s.ext = None
        return s.toString()

    @staticmethod
    def withoutDirectory(path):
        s = haxe_io_Path(path)
        s.dir = None
        return s.toString()

    @staticmethod
    def extension(path):
        s = haxe_io_Path(path)
        if (s.ext is None):
            return ""
        return s.ext

    @staticmethod
    def withExtension(path,ext):
        s = haxe_io_Path(path)
        s.ext = ext
        return s.toString()

    @staticmethod
    def join(paths):
        def _hx_local_0(s):
            if (s is not None):
                return (s != "")
            else:
                return False
        paths1 = list(filter(_hx_local_0,paths))
        if (len(paths1) == 0):
            return ""
        path = (paths1[0] if 0 < len(paths1) else None)
        _g = 1
        _g1 = len(paths1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            path = haxe_io_Path.addTrailingSlash(path)
            path = (("null" if path is None else path) + HxOverrides.stringOrNull((paths1[i] if i >= 0 and i < len(paths1) else None)))
        return haxe_io_Path.normalize(path)

    @staticmethod
    def normalize(path):
        slash = "/"
        _this = path.split("\\")
        path = slash.join([python_Boot.toString1(x1,'') for x1 in _this])
        if (path == slash):
            return slash
        target = []
        _g = 0
        _g1 = (list(path) if ((slash == "")) else path.split(slash))
        while (_g < len(_g1)):
            token = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (((token == "..") and ((len(target) > 0))) and ((python_internal_ArrayImpl._get(target, (len(target) - 1)) != ".."))):
                if (len(target) != 0):
                    target.pop()
            elif (token == ""):
                if ((len(target) > 0) or ((HxString.charCodeAt(path,0) == 47))):
                    target.append(token)
            elif (token != "."):
                target.append(token)
        tmp = slash.join([python_Boot.toString1(x1,'') for x1 in target])
        acc_b = python_lib_io_StringIO()
        colon = False
        slashes = False
        _g = 0
        _g1 = len(tmp)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            _g2 = (-1 if ((i >= len(tmp))) else ord(tmp[i]))
            _g3 = _g2
            if (_g3 == 47):
                if (not colon):
                    slashes = True
                else:
                    i1 = _g2
                    colon = False
                    if slashes:
                        acc_b.write("/")
                        slashes = False
                    acc_b.write("".join(map(chr,[i1])))
            elif (_g3 == 58):
                acc_b.write(":")
                colon = True
            else:
                i2 = _g2
                colon = False
                if slashes:
                    acc_b.write("/")
                    slashes = False
                acc_b.write("".join(map(chr,[i2])))
        return acc_b.getvalue()

    @staticmethod
    def addTrailingSlash(path):
        if (len(path) == 0):
            return "/"
        startIndex = None
        c1 = None
        if (startIndex is None):
            c1 = path.rfind("/", 0, len(path))
        else:
            i = path.rfind("/", 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len("/"))) if ((i == -1)) else (i + 1))
            check = path.find("/", startLeft, len(path))
            c1 = (check if (((check > i) and ((check <= startIndex)))) else i)
        startIndex = None
        c2 = None
        if (startIndex is None):
            c2 = path.rfind("\\", 0, len(path))
        else:
            i = path.rfind("\\", 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len("\\"))) if ((i == -1)) else (i + 1))
            check = path.find("\\", startLeft, len(path))
            c2 = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (c1 < c2):
            if (c2 != ((len(path) - 1))):
                return (("null" if path is None else path) + "\\")
            else:
                return path
        elif (c1 != ((len(path) - 1))):
            return (("null" if path is None else path) + "/")
        else:
            return path

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.dir = None
        _hx_o.file = None
        _hx_o.ext = None
        _hx_o.backslash = None
haxe_io_Path._hx_class = haxe_io_Path
_hx_classes["haxe.io.Path"] = haxe_io_Path


class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    _hx_is_interface = "False"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.array = None
        _hx_o.current = None
haxe_iterators_ArrayIterator._hx_class = haxe_iterators_ArrayIterator
_hx_classes["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator


class haxe_iterators_ArrayKeyValueIterator:
    _hx_class_name = "haxe.iterators.ArrayKeyValueIterator"
    _hx_is_interface = "False"
    __slots__ = ("current", "array")
    _hx_fields = ["current", "array"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return _hx_AnonObject({'value': python_internal_ArrayImpl._get(self.array, self.current), 'key': _hx_local_2()})
        return _hx_local_3()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.current = None
        _hx_o.array = None
haxe_iterators_ArrayKeyValueIterator._hx_class = haxe_iterators_ArrayKeyValueIterator
_hx_classes["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator

class hscript_Const(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.Const"
    _hx_constructs = ["CInt", "CFloat", "CString"]

    @staticmethod
    def CInt(v):
        return hscript_Const("CInt", 0, (v,))

    @staticmethod
    def CFloat(f):
        return hscript_Const("CFloat", 1, (f,))

    @staticmethod
    def CString(s):
        return hscript_Const("CString", 2, (s,))
hscript_Const._hx_class = hscript_Const
_hx_classes["hscript.Const"] = hscript_Const

class hscript_Expr(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.Expr"
    _hx_constructs = ["EConst", "EIdent", "EVar", "EParent", "EBlock", "EField", "EBinop", "EUnop", "ECall", "EIf", "EWhile", "EFor", "EBreak", "EContinue", "EFunction", "EReturn", "EArray", "EArrayDecl", "ENew", "EThrow", "ETry", "EObject", "ETernary", "ESwitch", "EDoWhile", "EMeta", "ECheckType"]

    @staticmethod
    def EConst(c):
        return hscript_Expr("EConst", 0, (c,))

    @staticmethod
    def EIdent(v):
        return hscript_Expr("EIdent", 1, (v,))

    @staticmethod
    def EVar(n,t = None,e= None):
        return hscript_Expr("EVar", 2, (n,t,e))

    @staticmethod
    def EParent(e):
        return hscript_Expr("EParent", 3, (e,))

    @staticmethod
    def EBlock(e):
        return hscript_Expr("EBlock", 4, (e,))

    @staticmethod
    def EField(e,f):
        return hscript_Expr("EField", 5, (e,f))

    @staticmethod
    def EBinop(op,e1,e2):
        return hscript_Expr("EBinop", 6, (op,e1,e2))

    @staticmethod
    def EUnop(op,prefix,e):
        return hscript_Expr("EUnop", 7, (op,prefix,e))

    @staticmethod
    def ECall(e,params):
        return hscript_Expr("ECall", 8, (e,params))

    @staticmethod
    def EIf(cond,e1,e2 = None):
        return hscript_Expr("EIf", 9, (cond,e1,e2))

    @staticmethod
    def EWhile(cond,e):
        return hscript_Expr("EWhile", 10, (cond,e))

    @staticmethod
    def EFor(v,it,e):
        return hscript_Expr("EFor", 11, (v,it,e))

    @staticmethod
    def EFunction(args,e,name = None,ret= None):
        return hscript_Expr("EFunction", 14, (args,e,name,ret))

    @staticmethod
    def EReturn(e = None):
        return hscript_Expr("EReturn", 15, (e,))

    @staticmethod
    def EArray(e,index):
        return hscript_Expr("EArray", 16, (e,index))

    @staticmethod
    def EArrayDecl(e):
        return hscript_Expr("EArrayDecl", 17, (e,))

    @staticmethod
    def ENew(cl,params):
        return hscript_Expr("ENew", 18, (cl,params))

    @staticmethod
    def EThrow(e):
        return hscript_Expr("EThrow", 19, (e,))

    @staticmethod
    def ETry(e,v,t,ecatch):
        return hscript_Expr("ETry", 20, (e,v,t,ecatch))

    @staticmethod
    def EObject(fl):
        return hscript_Expr("EObject", 21, (fl,))

    @staticmethod
    def ETernary(cond,e1,e2):
        return hscript_Expr("ETernary", 22, (cond,e1,e2))

    @staticmethod
    def ESwitch(e,cases,defaultExpr = None):
        return hscript_Expr("ESwitch", 23, (e,cases,defaultExpr))

    @staticmethod
    def EDoWhile(cond,e):
        return hscript_Expr("EDoWhile", 24, (cond,e))

    @staticmethod
    def EMeta(name,args,e):
        return hscript_Expr("EMeta", 25, (name,args,e))

    @staticmethod
    def ECheckType(e,t):
        return hscript_Expr("ECheckType", 26, (e,t))
hscript_Expr.EBreak = hscript_Expr("EBreak", 12, ())
hscript_Expr.EContinue = hscript_Expr("EContinue", 13, ())
hscript_Expr._hx_class = hscript_Expr
_hx_classes["hscript.Expr"] = hscript_Expr

class hscript_CType(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.CType"
    _hx_constructs = ["CTPath", "CTFun", "CTAnon", "CTParent", "CTOpt", "CTNamed"]

    @staticmethod
    def CTPath(path,params = None):
        return hscript_CType("CTPath", 0, (path,params))

    @staticmethod
    def CTFun(args,ret):
        return hscript_CType("CTFun", 1, (args,ret))

    @staticmethod
    def CTAnon(fields):
        return hscript_CType("CTAnon", 2, (fields,))

    @staticmethod
    def CTParent(t):
        return hscript_CType("CTParent", 3, (t,))

    @staticmethod
    def CTOpt(t):
        return hscript_CType("CTOpt", 4, (t,))

    @staticmethod
    def CTNamed(n,t):
        return hscript_CType("CTNamed", 5, (n,t))
hscript_CType._hx_class = hscript_CType
_hx_classes["hscript.CType"] = hscript_CType

class hscript_Error(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.Error"
    _hx_constructs = ["EInvalidChar", "EUnexpected", "EUnterminatedString", "EUnterminatedComment", "EInvalidPreprocessor", "EUnknownVariable", "EInvalidIterator", "EInvalidOp", "EInvalidAccess", "ECustom"]

    @staticmethod
    def EInvalidChar(c):
        return hscript_Error("EInvalidChar", 0, (c,))

    @staticmethod
    def EUnexpected(s):
        return hscript_Error("EUnexpected", 1, (s,))

    @staticmethod
    def EInvalidPreprocessor(msg):
        return hscript_Error("EInvalidPreprocessor", 4, (msg,))

    @staticmethod
    def EUnknownVariable(v):
        return hscript_Error("EUnknownVariable", 5, (v,))

    @staticmethod
    def EInvalidIterator(v):
        return hscript_Error("EInvalidIterator", 6, (v,))

    @staticmethod
    def EInvalidOp(op):
        return hscript_Error("EInvalidOp", 7, (op,))

    @staticmethod
    def EInvalidAccess(f):
        return hscript_Error("EInvalidAccess", 8, (f,))

    @staticmethod
    def ECustom(msg):
        return hscript_Error("ECustom", 9, (msg,))
hscript_Error.EUnterminatedString = hscript_Error("EUnterminatedString", 2, ())
hscript_Error.EUnterminatedComment = hscript_Error("EUnterminatedComment", 3, ())
hscript_Error._hx_class = hscript_Error
_hx_classes["hscript.Error"] = hscript_Error

class hscript_ModuleDecl(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.ModuleDecl"
    _hx_constructs = ["DPackage", "DImport", "DClass", "DTypedef"]

    @staticmethod
    def DPackage(path):
        return hscript_ModuleDecl("DPackage", 0, (path,))

    @staticmethod
    def DImport(path,everything = None):
        return hscript_ModuleDecl("DImport", 1, (path,everything))

    @staticmethod
    def DClass(c):
        return hscript_ModuleDecl("DClass", 2, (c,))

    @staticmethod
    def DTypedef(c):
        return hscript_ModuleDecl("DTypedef", 3, (c,))
hscript_ModuleDecl._hx_class = hscript_ModuleDecl
_hx_classes["hscript.ModuleDecl"] = hscript_ModuleDecl

class hscript_FieldAccess(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.FieldAccess"
    _hx_constructs = ["APublic", "APrivate", "AInline", "AOverride", "AStatic", "AMacro"]
hscript_FieldAccess.APublic = hscript_FieldAccess("APublic", 0, ())
hscript_FieldAccess.APrivate = hscript_FieldAccess("APrivate", 1, ())
hscript_FieldAccess.AInline = hscript_FieldAccess("AInline", 2, ())
hscript_FieldAccess.AOverride = hscript_FieldAccess("AOverride", 3, ())
hscript_FieldAccess.AStatic = hscript_FieldAccess("AStatic", 4, ())
hscript_FieldAccess.AMacro = hscript_FieldAccess("AMacro", 5, ())
hscript_FieldAccess._hx_class = hscript_FieldAccess
_hx_classes["hscript.FieldAccess"] = hscript_FieldAccess

class hscript_FieldKind(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.FieldKind"
    _hx_constructs = ["KFunction", "KVar"]

    @staticmethod
    def KFunction(f):
        return hscript_FieldKind("KFunction", 0, (f,))

    @staticmethod
    def KVar(v):
        return hscript_FieldKind("KVar", 1, (v,))
hscript_FieldKind._hx_class = hscript_FieldKind
_hx_classes["hscript.FieldKind"] = hscript_FieldKind

class hscript__Interp_Stop(Enum):
    __slots__ = ()
    _hx_class_name = "hscript._Interp.Stop"
    _hx_constructs = ["SBreak", "SContinue", "SReturn"]
hscript__Interp_Stop.SBreak = hscript__Interp_Stop("SBreak", 0, ())
hscript__Interp_Stop.SContinue = hscript__Interp_Stop("SContinue", 1, ())
hscript__Interp_Stop.SReturn = hscript__Interp_Stop("SReturn", 2, ())
hscript__Interp_Stop._hx_class = hscript__Interp_Stop
_hx_classes["hscript._Interp.Stop"] = hscript__Interp_Stop


class hscript_Interp:
    _hx_class_name = "hscript.Interp"
    _hx_is_interface = "False"
    __slots__ = ("variables", "locals", "binops", "depth", "inTry", "declared", "returnValue")
    _hx_fields = ["variables", "locals", "binops", "depth", "inTry", "declared", "returnValue"]
    _hx_methods = ["resetVariables", "posInfos", "initOps", "setVar", "assign", "assignOp", "evalAssignOp", "increment", "execute", "exprReturn", "duplicate", "restore", "error", "rethrow", "resolve", "expr", "doWhileLoop", "whileLoop", "makeIterator", "forLoop", "isMap", "getMapValue", "setMapValue", "get", "set", "fcall", "call", "cnew"]

    def __init__(self):
        self.returnValue = None
        self.inTry = None
        self.depth = None
        self.binops = None
        self.variables = None
        self.locals = haxe_ds_StringMap()
        self.declared = list()
        self.resetVariables()
        self.initOps()

    def resetVariables(self):
        _gthis = self
        self.variables = haxe_ds_StringMap()
        self.variables.h["null"] = None
        self.variables.h["true"] = True
        self.variables.h["false"] = False
        this1 = self.variables
        def _hx_local_0(el):
            inf = _gthis.posInfos()
            v = (None if ((len(el) == 0)) else el.pop(0))
            if (len(el) > 0):
                Reflect.setField(inf,"customParams",el)
            haxe_Log.trace(Std.string(v),inf)
        value = Reflect.makeVarArgs(_hx_local_0)
        this1.h["trace"] = value

    def posInfos(self):
        return _hx_AnonObject({'fileName': "hscript", 'lineNumber': 0})

    def initOps(self):
        me = self
        self.binops = haxe_ds_StringMap()
        def _hx_local_0(e1,e2):
            return python_Boot._add_dynamic(me.expr(e1),me.expr(e2))
        self.binops.h["+"] = _hx_local_0
        def _hx_local_1(e1,e2):
            return (me.expr(e1) - me.expr(e2))
        self.binops.h["-"] = _hx_local_1
        def _hx_local_2(e1,e2):
            return (me.expr(e1) * me.expr(e2))
        self.binops.h["*"] = _hx_local_2
        def _hx_local_3(e1,e2):
            return (me.expr(e1) / me.expr(e2))
        self.binops.h["/"] = _hx_local_3
        def _hx_local_4(e1,e2):
            return HxOverrides.modf(me.expr(e1), me.expr(e2))
        self.binops.h["%"] = _hx_local_4
        def _hx_local_5(e1,e2):
            return (me.expr(e1) & me.expr(e2))
        self.binops.h["&"] = _hx_local_5
        def _hx_local_6(e1,e2):
            return (me.expr(e1) | me.expr(e2))
        self.binops.h["|"] = _hx_local_6
        def _hx_local_7(e1,e2):
            return (me.expr(e1) ^ me.expr(e2))
        self.binops.h["^"] = _hx_local_7
        def _hx_local_8(e1,e2):
            return (me.expr(e1) << me.expr(e2))
        self.binops.h["<<"] = _hx_local_8
        def _hx_local_9(e1,e2):
            return (me.expr(e1) >> me.expr(e2))
        self.binops.h[">>"] = _hx_local_9
        def _hx_local_10(e1,e2):
            return HxOverrides.rshift(me.expr(e1), me.expr(e2))
        self.binops.h[">>>"] = _hx_local_10
        def _hx_local_11(e1,e2):
            return HxOverrides.eq(me.expr(e1),me.expr(e2))
        self.binops.h["=="] = _hx_local_11
        def _hx_local_12(e1,e2):
            return not HxOverrides.eq(me.expr(e1),me.expr(e2))
        self.binops.h["!="] = _hx_local_12
        def _hx_local_13(e1,e2):
            return (me.expr(e1) >= me.expr(e2))
        self.binops.h[">="] = _hx_local_13
        def _hx_local_14(e1,e2):
            return (me.expr(e1) <= me.expr(e2))
        self.binops.h["<="] = _hx_local_14
        def _hx_local_15(e1,e2):
            return (me.expr(e1) > me.expr(e2))
        self.binops.h[">"] = _hx_local_15
        def _hx_local_16(e1,e2):
            return (me.expr(e1) < me.expr(e2))
        self.binops.h["<"] = _hx_local_16
        def _hx_local_17(e1,e2):
            if (me.expr(e1) != True):
                return (me.expr(e2) == True)
            else:
                return True
        self.binops.h["||"] = _hx_local_17
        def _hx_local_18(e1,e2):
            if (me.expr(e1) == True):
                return (me.expr(e2) == True)
            else:
                return False
        self.binops.h["&&"] = _hx_local_18
        self.binops.h["="] = self.assign
        def _hx_local_19(e1,e2):
            return IntIterator(me.expr(e1),me.expr(e2))
        self.binops.h["..."] = _hx_local_19
        def _hx_local_20(v1,v2):
            return python_Boot._add_dynamic(v1,v2)
        self.assignOp("+=",_hx_local_20)
        def _hx_local_21(v1,v2):
            return (v1 - v2)
        self.assignOp("-=",_hx_local_21)
        def _hx_local_22(v1,v2):
            return (v1 * v2)
        self.assignOp("*=",_hx_local_22)
        def _hx_local_23(v1,v2):
            return (v1 / v2)
        self.assignOp("/=",_hx_local_23)
        def _hx_local_24(v1,v2):
            return HxOverrides.modf(v1, v2)
        self.assignOp("%=",_hx_local_24)
        def _hx_local_25(v1,v2):
            return (v1 & v2)
        self.assignOp("&=",_hx_local_25)
        def _hx_local_26(v1,v2):
            return (v1 | v2)
        self.assignOp("|=",_hx_local_26)
        def _hx_local_27(v1,v2):
            return (v1 ^ v2)
        self.assignOp("^=",_hx_local_27)
        def _hx_local_28(v1,v2):
            return (v1 << v2)
        self.assignOp("<<=",_hx_local_28)
        def _hx_local_29(v1,v2):
            return (v1 >> v2)
        self.assignOp(">>=",_hx_local_29)
        def _hx_local_30(v1,v2):
            return HxOverrides.rshift(v1, v2)
        self.assignOp(">>>=",_hx_local_30)

    def setVar(self,name,v):
        self.variables.h[name] = v

    def assign(self,e1,e2):
        v = self.expr(e2)
        tmp = e1.index
        if (tmp == 1):
            id = e1.params[0]
            l = self.locals.h.get(id,None)
            if (l is None):
                self.setVar(id,v)
            else:
                l.r = v
        elif (tmp == 5):
            e = e1.params[0]
            f = e1.params[1]
            v = self.set(self.expr(e),f,v)
        elif (tmp == 16):
            e = e1.params[0]
            index = e1.params[1]
            arr = self.expr(e)
            index1 = self.expr(index)
            if Std.isOfType(arr,haxe_IMap):
                def _hx_local_1():
                    _hx_local_0 = arr
                    if (Std.isOfType(_hx_local_0,haxe_IMap) or ((_hx_local_0 is None))):
                        _hx_local_0
                    else:
                        raise "Class cast error"
                    return _hx_local_0
                (_hx_local_1()).set(index1,v)
            else:
                HxOverrides.arraySet(arr,index1,v)
        else:
            e = hscript_Error.EInvalidOp("=")
            raise haxe_Exception.thrown(e)
        return v

    def assignOp(self,op,fop):
        me = self
        def _hx_local_0(e1,e2):
            return me.evalAssignOp(op,fop,e1,e2)
        self.binops.h[op] = _hx_local_0

    def evalAssignOp(self,op,fop,e1,e2):
        v = None
        tmp = e1.index
        if (tmp == 1):
            id = e1.params[0]
            l = self.locals.h.get(id,None)
            v = fop(self.expr(e1),self.expr(e2))
            if (l is None):
                self.setVar(id,v)
            else:
                l.r = v
        elif (tmp == 5):
            e = e1.params[0]
            f = e1.params[1]
            obj = self.expr(e)
            v = fop(self.get(obj,f),self.expr(e2))
            v = self.set(obj,f,v)
        elif (tmp == 16):
            e = e1.params[0]
            index = e1.params[1]
            arr = self.expr(e)
            index1 = self.expr(index)
            if Std.isOfType(arr,haxe_IMap):
                def _hx_local_1():
                    _hx_local_0 = arr
                    if (Std.isOfType(_hx_local_0,haxe_IMap) or ((_hx_local_0 is None))):
                        _hx_local_0
                    else:
                        raise "Class cast error"
                    return _hx_local_0
                v = fop((_hx_local_1()).get(index1),self.expr(e2))
                def _hx_local_3():
                    _hx_local_2 = arr
                    if (Std.isOfType(_hx_local_2,haxe_IMap) or ((_hx_local_2 is None))):
                        _hx_local_2
                    else:
                        raise "Class cast error"
                    return _hx_local_2
                (_hx_local_3()).set(index1,v)
            else:
                v = fop(HxOverrides.arrayGet(arr, index1),self.expr(e2))
                HxOverrides.arraySet(arr,index1,v)
        else:
            e = hscript_Error.EInvalidOp(op)
            raise haxe_Exception.thrown(e)
        return v

    def increment(self,e,prefix,delta):
        tmp = e.index
        if (tmp == 1):
            id = e.params[0]
            l = self.locals.h.get(id,None)
            v = (self.resolve(id) if ((l is None)) else l.r)
            if prefix:
                v = python_Boot._add_dynamic(v,delta)
                if (l is None):
                    self.setVar(id,v)
                else:
                    l.r = v
            elif (l is None):
                self.setVar(id,python_Boot._add_dynamic(v,delta))
            else:
                l.r = python_Boot._add_dynamic(v,delta)
            return v
        elif (tmp == 5):
            e1 = e.params[0]
            f = e.params[1]
            obj = self.expr(e1)
            v = self.get(obj,f)
            if prefix:
                v = python_Boot._add_dynamic(v,delta)
                self.set(obj,f,v)
            else:
                self.set(obj,f,python_Boot._add_dynamic(v,delta))
            return v
        elif (tmp == 16):
            e1 = e.params[0]
            index = e.params[1]
            arr = self.expr(e1)
            index1 = self.expr(index)
            if Std.isOfType(arr,haxe_IMap):
                def _hx_local_3():
                    _hx_local_2 = arr
                    if (Std.isOfType(_hx_local_2,haxe_IMap) or ((_hx_local_2 is None))):
                        _hx_local_2
                    else:
                        raise "Class cast error"
                    return _hx_local_2
                v = (_hx_local_3()).get(index1)
                if prefix:
                    v = python_Boot._add_dynamic(v,delta)
                    def _hx_local_6():
                        _hx_local_5 = arr
                        if (Std.isOfType(_hx_local_5,haxe_IMap) or ((_hx_local_5 is None))):
                            _hx_local_5
                        else:
                            raise "Class cast error"
                        return _hx_local_5
                    (_hx_local_6()).set(index1,v)
                else:
                    def _hx_local_8():
                        _hx_local_7 = arr
                        if (Std.isOfType(_hx_local_7,haxe_IMap) or ((_hx_local_7 is None))):
                            _hx_local_7
                        else:
                            raise "Class cast error"
                        return _hx_local_7
                    (_hx_local_8()).set(index1,python_Boot._add_dynamic(v,delta))
                return v
            else:
                v = HxOverrides.arrayGet(arr, index1)
                if prefix:
                    v = (v + delta)
                    HxOverrides.arraySet(arr,index1,v)
                else:
                    HxOverrides.arraySet(arr,index1,(v + delta))
                return v
        else:
            e = hscript_Error.EInvalidOp(("++" if ((delta > 0)) else "--"))
            raise haxe_Exception.thrown(e)

    def execute(self,expr):
        self.depth = 0
        self.locals = haxe_ds_StringMap()
        self.declared = list()
        return self.exprReturn(expr)

    def exprReturn(self,e):
        try:
            return self.expr(e)
        except BaseException as _g:
            None
            _g1 = haxe_Exception.caught(_g).unwrap()
            if Std.isOfType(_g1,hscript__Interp_Stop):
                e = _g1
                tmp = e.index
                if (tmp == 0):
                    raise haxe_Exception.thrown("Invalid break")
                elif (tmp == 1):
                    raise haxe_Exception.thrown("Invalid continue")
                elif (tmp == 2):
                    v = self.returnValue
                    self.returnValue = None
                    return v
                else:
                    pass
            else:
                raise _g

    def duplicate(self,h):
        h2 = haxe_ds_StringMap()
        k = h.keys()
        while k.hasNext():
            k1 = k.next()
            value = h.h.get(k1,None)
            h2.h[k1] = value
        return h2

    def restore(self,old):
        while (len(self.declared) > old):
            _this = self.declared
            d = (None if ((len(_this) == 0)) else _this.pop())
            self.locals.h[d.n] = d.old

    def error(self,e,rethrow = None):
        if (rethrow is None):
            rethrow = False
        if rethrow:
            raise haxe_Exception.thrown(e)
        else:
            raise haxe_Exception.thrown(e)

    def rethrow(self,e):
        raise haxe_Exception.thrown(e)

    def resolve(self,id):
        l = self.locals.h.get(id,None)
        if (l is not None):
            return l.r
        v = self.variables.h.get(id,None)
        if ((v is None) and (not (id in self.variables.h))):
            e = hscript_Error.EUnknownVariable(id)
            raise haxe_Exception.thrown(e)
        return v

    def expr(self,e):
        _gthis = self
        tmp = e.index
        if (tmp == 0):
            c = e.params[0]
            tmp = c.index
            if (tmp == 0):
                v = c.params[0]
                return v
            elif (tmp == 1):
                f = c.params[0]
                return f
            elif (tmp == 2):
                s = c.params[0]
                return s
            else:
                pass
        elif (tmp == 1):
            id = e.params[0]
            return self.resolve(id)
        elif (tmp == 2):
            _g = e.params[1]
            n = e.params[0]
            e1 = e.params[2]
            _this = self.declared
            x = _hx_AnonObject({'n': n, 'old': self.locals.h.get(n,None)})
            _this.append(x)
            this1 = self.locals
            value = (None if ((e1 is None)) else self.expr(e1))
            this1.h[n] = _hx_AnonObject({'r': value})
            return None
        elif (tmp == 3):
            e1 = e.params[0]
            return self.expr(e1)
        elif (tmp == 4):
            exprs = e.params[0]
            old = len(self.declared)
            v = None
            _g = 0
            while (_g < len(exprs)):
                e1 = (exprs[_g] if _g >= 0 and _g < len(exprs) else None)
                _g = (_g + 1)
                v = self.expr(e1)
            self.restore(old)
            return v
        elif (tmp == 5):
            e1 = e.params[0]
            f = e.params[1]
            return self.get(self.expr(e1),f)
        elif (tmp == 6):
            op = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            fop = self.binops.h.get(op,None)
            if (fop is None):
                e3 = hscript_Error.EInvalidOp(op)
                raise haxe_Exception.thrown(e3)
            return fop(e1,e2)
        elif (tmp == 7):
            op = e.params[0]
            prefix = e.params[1]
            e1 = e.params[2]
            op1 = op
            _hx_local_1 = len(op1)
            if (_hx_local_1 == 1):
                if (op1 == "!"):
                    return (self.expr(e1) != True)
                elif (op1 == "-"):
                    return -self.expr(e1)
                elif (op1 == "~"):
                    return ~self.expr(e1)
                else:
                    e1 = hscript_Error.EInvalidOp(op)
                    raise haxe_Exception.thrown(e1)
            elif (_hx_local_1 == 2):
                if (op1 == "++"):
                    return self.increment(e1,prefix,1)
                elif (op1 == "--"):
                    return self.increment(e1,prefix,-1)
                else:
                    e1 = hscript_Error.EInvalidOp(op)
                    raise haxe_Exception.thrown(e1)
            else:
                e1 = hscript_Error.EInvalidOp(op)
                raise haxe_Exception.thrown(e1)
        elif (tmp == 8):
            e1 = e.params[0]
            params = e.params[1]
            args = list()
            _g = 0
            while (_g < len(params)):
                p = (params[_g] if _g >= 0 and _g < len(params) else None)
                _g = (_g + 1)
                x = self.expr(p)
                args.append(x)
            if (e1.index == 5):
                e2 = e1.params[0]
                f = e1.params[1]
                obj = self.expr(e2)
                if (obj is None):
                    e2 = hscript_Error.EInvalidAccess(f)
                    raise haxe_Exception.thrown(e2)
                return self.fcall(obj,f,args)
            else:
                return self.call(None,self.expr(e1),args)
        elif (tmp == 9):
            econd = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            if (self.expr(econd) == True):
                return self.expr(e1)
            elif (e2 is None):
                return None
            else:
                return self.expr(e2)
        elif (tmp == 10):
            econd = e.params[0]
            e1 = e.params[1]
            self.whileLoop(econd,e1)
            return None
        elif (tmp == 11):
            v = e.params[0]
            it = e.params[1]
            e1 = e.params[2]
            self.forLoop(v,it,e1)
            return None
        elif (tmp == 12):
            raise haxe_Exception.thrown(hscript__Interp_Stop.SBreak)
        elif (tmp == 13):
            raise haxe_Exception.thrown(hscript__Interp_Stop.SContinue)
        elif (tmp == 14):
            _g = e.params[3]
            params = e.params[0]
            fexpr = e.params[1]
            name = e.params[2]
            capturedLocals = self.duplicate(self.locals)
            me = self
            hasOpt = False
            minParams = 0
            _g = 0
            while (_g < len(params)):
                p = (params[_g] if _g >= 0 and _g < len(params) else None)
                _g = (_g + 1)
                if Reflect.field(p,"opt"):
                    hasOpt = True
                else:
                    minParams = (minParams + 1)
            def _hx_local_9(args):
                if (((0 if ((args is None)) else len(args))) != len(params)):
                    if (len(args) < minParams):
                        _hx_str = ((("Invalid number of parameters. Got " + Std.string(len(args))) + ", required ") + Std.string(minParams))
                        if (name is not None):
                            _hx_str = (("null" if _hx_str is None else _hx_str) + HxOverrides.stringOrNull((((" for function '" + ("null" if name is None else name)) + "'"))))
                        e = hscript_Error.ECustom(_hx_str)
                        raise haxe_Exception.thrown(e)
                    args2 = []
                    extraParams = (len(args) - minParams)
                    pos = 0
                    _g = 0
                    while (_g < len(params)):
                        p = (params[_g] if _g >= 0 and _g < len(params) else None)
                        _g = (_g + 1)
                        if Reflect.field(p,"opt"):
                            if (extraParams > 0):
                                x = pos
                                pos = (pos + 1)
                                x1 = (args[x] if x >= 0 and x < len(args) else None)
                                args2.append(x1)
                                extraParams = (extraParams - 1)
                            else:
                                args2.append(None)
                        else:
                            x2 = pos
                            pos = (pos + 1)
                            x3 = (args[x2] if x2 >= 0 and x2 < len(args) else None)
                            args2.append(x3)
                    args = args2
                old = me.locals
                depth = me.depth
                me.depth = (me.depth + 1)
                me.locals = me.duplicate(capturedLocals)
                _g = 0
                _g1 = len(params)
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    me.locals.h[(params[i] if i >= 0 and i < len(params) else None).name] = _hx_AnonObject({'r': (args[i] if i >= 0 and i < len(args) else None)})
                r = None
                oldDecl = len(_gthis.declared)
                if _gthis.inTry:
                    try:
                        r = me.exprReturn(fexpr)
                    except BaseException as _g:
                        None
                        e = haxe_Exception.caught(_g).unwrap()
                        me.locals = old
                        me.depth = depth
                        raise haxe_Exception.thrown(e)
                else:
                    r = me.exprReturn(fexpr)
                _gthis.restore(oldDecl)
                me.locals = old
                me.depth = depth
                return r
            f = _hx_local_9
            f1 = Reflect.makeVarArgs(f)
            if (name is not None):
                if (self.depth == 0):
                    self.variables.h[name] = f1
                else:
                    _this = self.declared
                    x = _hx_AnonObject({'n': name, 'old': self.locals.h.get(name,None)})
                    _this.append(x)
                    ref = _hx_AnonObject({'r': f1})
                    self.locals.h[name] = ref
                    capturedLocals.h[name] = ref
            return f1
        elif (tmp == 15):
            e1 = e.params[0]
            self.returnValue = (None if ((e1 is None)) else self.expr(e1))
            raise haxe_Exception.thrown(hscript__Interp_Stop.SReturn)
        elif (tmp == 16):
            e1 = e.params[0]
            index = e.params[1]
            arr = self.expr(e1)
            index1 = self.expr(index)
            if Std.isOfType(arr,haxe_IMap):
                def _hx_local_12():
                    def _hx_local_11():
                        _hx_local_10 = arr
                        if (Std.isOfType(_hx_local_10,haxe_IMap) or ((_hx_local_10 is None))):
                            _hx_local_10
                        else:
                            raise "Class cast error"
                        return _hx_local_10
                    return (_hx_local_11()).get(index1)
                return _hx_local_12()
            else:
                return HxOverrides.arrayGet(arr, index1)
        elif (tmp == 17):
            arr = e.params[0]
            tmp = None
            if (len(arr) > 0):
                _g = (arr[0] if 0 < len(arr) else None)
                if (_g.index == 6):
                    _g1 = _g.params[1]
                    _g1 = _g.params[2]
                    tmp = (_g.params[0] == "=>")
                else:
                    tmp = False
            else:
                tmp = False
            if tmp:
                isAllString = True
                isAllInt = True
                isAllObject = True
                isAllEnum = True
                keys = []
                values = []
                _g = 0
                while (_g < len(arr)):
                    e1 = (arr[_g] if _g >= 0 and _g < len(arr) else None)
                    _g = (_g + 1)
                    if (e1.index == 6):
                        if (e1.params[0] == "=>"):
                            eKey = e1.params[1]
                            eValue = e1.params[2]
                            key = self.expr(eKey)
                            value = self.expr(eValue)
                            isAllString = (isAllString and Std.isOfType(key,str))
                            isAllInt = (isAllInt and Std.isOfType(key,Int))
                            isAllObject = (isAllObject and Reflect.isObject(key))
                            isAllEnum = (isAllEnum and Reflect.isEnumValue(key))
                            keys.append(key)
                            values.append(value)
                        else:
                            raise haxe_Exception.thrown("=> expected")
                    else:
                        raise haxe_Exception.thrown("=> expected")
                _hx_map = None
                if isAllInt:
                    _hx_map = haxe_ds_IntMap()
                elif isAllString:
                    _hx_map = haxe_ds_StringMap()
                elif isAllEnum:
                    _hx_map = haxe_ds_EnumValueMap()
                elif isAllObject:
                    _hx_map = haxe_ds_ObjectMap()
                else:
                    raise haxe_Exception.thrown("Inconsistent key types")
                _g = 0
                _g1 = len(keys)
                while (_g < _g1):
                    n = _g
                    _g = (_g + 1)
                    def _hx_local_15():
                        _hx_local_14 = _hx_map
                        if (Std.isOfType(_hx_local_14,haxe_IMap) or ((_hx_local_14 is None))):
                            _hx_local_14
                        else:
                            raise "Class cast error"
                        return _hx_local_14
                    (_hx_local_15()).set((keys[n] if n >= 0 and n < len(keys) else None),(values[n] if n >= 0 and n < len(values) else None))
                return _hx_map
            else:
                a = list()
                _g = 0
                while (_g < len(arr)):
                    e1 = (arr[_g] if _g >= 0 and _g < len(arr) else None)
                    _g = (_g + 1)
                    x = self.expr(e1)
                    a.append(x)
                return a
        elif (tmp == 18):
            cl = e.params[0]
            params1 = e.params[1]
            a = list()
            _g = 0
            while (_g < len(params1)):
                e1 = (params1[_g] if _g >= 0 and _g < len(params1) else None)
                _g = (_g + 1)
                x = self.expr(e1)
                a.append(x)
            return self.cnew(cl,a)
        elif (tmp == 19):
            e1 = e.params[0]
            raise haxe_Exception.thrown(self.expr(e1))
        elif (tmp == 20):
            _g = e.params[2]
            e1 = e.params[0]
            n = e.params[1]
            ecatch = e.params[3]
            old = len(self.declared)
            oldTry = self.inTry
            try:
                self.inTry = True
                v = self.expr(e1)
                self.restore(old)
                self.inTry = oldTry
                return v
            except BaseException as _g:
                None
                _g1 = haxe_Exception.caught(_g).unwrap()
                if Std.isOfType(_g1,hscript__Interp_Stop):
                    err = _g1
                    self.inTry = oldTry
                    raise haxe_Exception.thrown(err)
                else:
                    err = _g1
                    self.restore(old)
                    self.inTry = oldTry
                    _this = self.declared
                    x = _hx_AnonObject({'n': n, 'old': self.locals.h.get(n,None)})
                    _this.append(x)
                    self.locals.h[n] = _hx_AnonObject({'r': err})
                    v = self.expr(ecatch)
                    self.restore(old)
                    return v
        elif (tmp == 21):
            fl = e.params[0]
            o = _hx_AnonObject({})
            _g = 0
            while (_g < len(fl)):
                f = (fl[_g] if _g >= 0 and _g < len(fl) else None)
                _g = (_g + 1)
                self.set(o,f.name,self.expr(f.e))
            return o
        elif (tmp == 22):
            econd = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            if (self.expr(econd) == True):
                return self.expr(e1)
            else:
                return self.expr(e2)
        elif (tmp == 23):
            e1 = e.params[0]
            cases = e.params[1]
            _hx_def = e.params[2]
            val = self.expr(e1)
            match = False
            _g = 0
            while (_g < len(cases)):
                c = (cases[_g] if _g >= 0 and _g < len(cases) else None)
                _g = (_g + 1)
                _g1 = 0
                _g2 = c.values
                while (_g1 < len(_g2)):
                    v = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                    _g1 = (_g1 + 1)
                    if HxOverrides.eq(self.expr(v),val):
                        match = True
                        break
                if match:
                    val = self.expr(c.expr)
                    break
            if (not match):
                val = (None if ((_hx_def is None)) else self.expr(_hx_def))
            return val
        elif (tmp == 24):
            econd = e.params[0]
            e1 = e.params[1]
            self.doWhileLoop(econd,e1)
            return None
        elif (tmp == 25):
            _g = e.params[0]
            _g = e.params[1]
            e1 = e.params[2]
            return self.expr(e1)
        elif (tmp == 26):
            _g = e.params[1]
            e1 = e.params[0]
            return self.expr(e1)
        else:
            pass

    def doWhileLoop(self,econd,e):
        old = len(self.declared)
        while True:
            try:
                self.expr(e)
            except BaseException as _g:
                None
                _g1 = haxe_Exception.caught(_g).unwrap()
                if Std.isOfType(_g1,hscript__Interp_Stop):
                    err = _g1
                    tmp = err.index
                    if (tmp == 0):
                        break
                    elif (tmp == 1):
                        pass
                    elif (tmp == 2):
                        raise haxe_Exception.thrown(err)
                    else:
                        pass
                else:
                    raise _g
            if (not ((self.expr(econd) == True))):
                break
        self.restore(old)

    def whileLoop(self,econd,e):
        old = len(self.declared)
        while (self.expr(econd) == True):
            try:
                self.expr(e)
            except BaseException as _g:
                None
                _g1 = haxe_Exception.caught(_g).unwrap()
                if Std.isOfType(_g1,hscript__Interp_Stop):
                    err = _g1
                    tmp = err.index
                    if (tmp == 0):
                        break
                    elif (tmp == 1):
                        pass
                    elif (tmp == 2):
                        raise haxe_Exception.thrown(err)
                    else:
                        pass
                else:
                    raise _g
        self.restore(old)

    def makeIterator(self,v):
        try:
            v = Reflect.field(v,"iterator")()
        except BaseException as _g:
            None
        if ((Reflect.field(v,"hasNext") is None) or ((Reflect.field(v,"next") is None))):
            e = hscript_Error.EInvalidIterator(v)
            raise haxe_Exception.thrown(e)
        return v

    def forLoop(self,n,it,e):
        old = len(self.declared)
        _this = self.declared
        x = _hx_AnonObject({'n': n, 'old': self.locals.h.get(n,None)})
        _this.append(x)
        it1 = self.makeIterator(self.expr(it))
        while it1.hasNext():
            this1 = self.locals
            value = _hx_AnonObject({'r': it1.next()})
            this1.h[n] = value
            try:
                self.expr(e)
            except BaseException as _g:
                None
                _g1 = haxe_Exception.caught(_g).unwrap()
                if Std.isOfType(_g1,hscript__Interp_Stop):
                    err = _g1
                    tmp = err.index
                    if (tmp == 0):
                        break
                    elif (tmp == 1):
                        pass
                    elif (tmp == 2):
                        raise haxe_Exception.thrown(err)
                    else:
                        pass
                else:
                    raise _g
        self.restore(old)

    def isMap(self,o):
        return Std.isOfType(o,haxe_IMap)

    def getMapValue(self,_hx_map,key):
        def _hx_local_2():
            def _hx_local_1():
                _hx_local_0 = _hx_map
                if (Std.isOfType(_hx_local_0,haxe_IMap) or ((_hx_local_0 is None))):
                    _hx_local_0
                else:
                    raise "Class cast error"
                return _hx_local_0
            return (_hx_local_1()).get(key)
        return _hx_local_2()

    def setMapValue(self,_hx_map,key,value):
        def _hx_local_1():
            _hx_local_0 = _hx_map
            if (Std.isOfType(_hx_local_0,haxe_IMap) or ((_hx_local_0 is None))):
                _hx_local_0
            else:
                raise "Class cast error"
            return _hx_local_0
        (_hx_local_1()).set(key,value)

    def get(self,o,f):
        if (o is None):
            e = hscript_Error.EInvalidAccess(f)
            raise haxe_Exception.thrown(e)
        return Reflect.getProperty(o,f)

    def set(self,o,f,v):
        if (o is None):
            e = hscript_Error.EInvalidAccess(f)
            raise haxe_Exception.thrown(e)
        Reflect.setProperty(o,f,v)
        return v

    def fcall(self,o,f,args):
        return self.call(o,self.get(o,f),args)

    def call(self,o,f,args):
        return Reflect.callMethod(o,f,args)

    def cnew(self,cl,args):
        c = Type.resolveClass(cl)
        if (c is None):
            c = self.resolve(cl)
        return c(*args)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.variables = None
        _hx_o.locals = None
        _hx_o.binops = None
        _hx_o.depth = None
        _hx_o.inTry = None
        _hx_o.declared = None
        _hx_o.returnValue = None
hscript_Interp._hx_class = hscript_Interp
_hx_classes["hscript.Interp"] = hscript_Interp

class hscript_Token(Enum):
    __slots__ = ()
    _hx_class_name = "hscript.Token"
    _hx_constructs = ["TEof", "TConst", "TId", "TOp", "TPOpen", "TPClose", "TBrOpen", "TBrClose", "TDot", "TComma", "TSemicolon", "TBkOpen", "TBkClose", "TQuestion", "TDoubleDot", "TMeta", "TPrepro"]

    @staticmethod
    def TConst(c):
        return hscript_Token("TConst", 1, (c,))

    @staticmethod
    def TId(s):
        return hscript_Token("TId", 2, (s,))

    @staticmethod
    def TOp(s):
        return hscript_Token("TOp", 3, (s,))

    @staticmethod
    def TMeta(s):
        return hscript_Token("TMeta", 15, (s,))

    @staticmethod
    def TPrepro(s):
        return hscript_Token("TPrepro", 16, (s,))
hscript_Token.TEof = hscript_Token("TEof", 0, ())
hscript_Token.TPOpen = hscript_Token("TPOpen", 4, ())
hscript_Token.TPClose = hscript_Token("TPClose", 5, ())
hscript_Token.TBrOpen = hscript_Token("TBrOpen", 6, ())
hscript_Token.TBrClose = hscript_Token("TBrClose", 7, ())
hscript_Token.TDot = hscript_Token("TDot", 8, ())
hscript_Token.TComma = hscript_Token("TComma", 9, ())
hscript_Token.TSemicolon = hscript_Token("TSemicolon", 10, ())
hscript_Token.TBkOpen = hscript_Token("TBkOpen", 11, ())
hscript_Token.TBkClose = hscript_Token("TBkClose", 12, ())
hscript_Token.TQuestion = hscript_Token("TQuestion", 13, ())
hscript_Token.TDoubleDot = hscript_Token("TDoubleDot", 14, ())
hscript_Token._hx_class = hscript_Token
_hx_classes["hscript.Token"] = hscript_Token


class hscript_Parser:
    _hx_class_name = "hscript.Parser"
    _hx_is_interface = "False"
    __slots__ = ("line", "opChars", "identChars", "opPriority", "opRightAssoc", "preprocesorValues", "allowJSON", "allowTypes", "allowMetadata", "resumeErrors", "input", "readPos", "char", "ops", "idents", "uid", "tokens", "preprocStack")
    _hx_fields = ["line", "opChars", "identChars", "opPriority", "opRightAssoc", "preprocesorValues", "allowJSON", "allowTypes", "allowMetadata", "resumeErrors", "input", "readPos", "char", "ops", "idents", "uid", "tokens", "preprocStack"]
    _hx_methods = ["error", "invalidChar", "initParser", "parseString", "unexpected", "push", "ensure", "ensureToken", "maybe", "getIdent", "expr", "pmin", "pmax", "mk", "isBlock", "parseFullExpr", "parseObject", "parseExpr", "parseLambda", "parseMetaArgs", "mapCompr", "makeUnop", "makeBinop", "parseStructure", "parseExprNext", "parseFunctionArgs", "parseFunctionDecl", "parsePath", "parseType", "parseTypeNext", "parseExprList", "parseModule", "parseMetadata", "parseParams", "parseModuleDecl", "parseField", "readChar", "readString", "token", "preprocValue", "parsePreproCond", "evalPreproCond", "preprocess", "skipTokens", "tokenComment", "constString", "tokenString"]
    _hx_statics = ["p1", "tokenMin", "tokenMax"]

    def __init__(self):
        self.preprocStack = None
        self.tokens = None
        self.idents = None
        self.ops = None
        self.char = None
        self.readPos = None
        self.input = None
        self.resumeErrors = None
        self.allowMetadata = None
        self.allowTypes = None
        self.allowJSON = None
        self.uid = 0
        self.preprocesorValues = haxe_ds_StringMap()
        self.line = 1
        self.opChars = "+*/-=!><&|^%~"
        self.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"
        priorities = [["%"], ["*", "/"], ["+", "-"], ["<<", ">>", ">>>"], ["|", "&", "^"], ["==", "!=", ">", "<", ">=", "<="], ["..."], ["&&"], ["||"], ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "&=", "^=", "=>"], ["->"]]
        self.opPriority = haxe_ds_StringMap()
        self.opRightAssoc = haxe_ds_StringMap()
        _g = 0
        _g1 = len(priorities)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            _g2 = 0
            _g3 = (priorities[i] if i >= 0 and i < len(priorities) else None)
            while (_g2 < len(_g3)):
                x = (_g3[_g2] if _g2 >= 0 and _g2 < len(_g3) else None)
                _g2 = (_g2 + 1)
                self.opPriority.h[x] = i
                if (i == 9):
                    self.opRightAssoc.h[x] = True
        x = "!"
        self.opPriority.h[x] = (-1 if (((x == "++") or ((x == "--")))) else -2)
        x = "++"
        self.opPriority.h[x] = (-1 if (((x == "++") or ((x == "--")))) else -2)
        x = "--"
        self.opPriority.h[x] = (-1 if (((x == "++") or ((x == "--")))) else -2)
        x = "~"
        self.opPriority.h[x] = (-1 if (((x == "++") or ((x == "--")))) else -2)

    def error(self,err,pmin,pmax):
        if (not self.resumeErrors):
            raise haxe_Exception.thrown(err)

    def invalidChar(self,c):
        if (not self.resumeErrors):
            raise haxe_Exception.thrown(hscript_Error.EInvalidChar(c))

    def initParser(self,origin):
        self.preprocStack = []
        self.tokens = haxe_ds_GenericStack()
        self.char = -1
        self.ops = list()
        self.idents = list()
        self.uid = 0
        _g = 0
        _g1 = len(self.opChars)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(self.ops, HxString.charCodeAt(self.opChars,i), True)
        _g = 0
        _g1 = len(self.identChars)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(self.idents, HxString.charCodeAt(self.identChars,i), True)

    def parseString(self,s,origin = None):
        if (origin is None):
            origin = "hscript"
        self.initParser(origin)
        self.input = s
        self.readPos = 0
        a = list()
        while True:
            tk = self.token()
            if (tk == hscript_Token.TEof):
                break
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            self.parseFullExpr(a)
        if (len(a) == 1):
            return (a[0] if 0 < len(a) else None)
        else:
            return hscript_Expr.EBlock(a)

    def unexpected(self,tk):
        err = hscript_Error.EUnexpected(self.tokenString(tk))
        if (not self.resumeErrors):
            raise haxe_Exception.thrown(err)
        return None

    def push(self,tk):
        _this = self.tokens
        _this.head = haxe_ds_GenericCell(tk,_this.head)

    def ensure(self,tk):
        t = self.token()
        if (t != tk):
            self.unexpected(t)

    def ensureToken(self,tk):
        t = self.token()
        if (not Type.enumEq(t,tk)):
            self.unexpected(t)

    def maybe(self,tk):
        t = self.token()
        if Type.enumEq(t,tk):
            return True
        _this = self.tokens
        _this.head = haxe_ds_GenericCell(t,_this.head)
        return False

    def getIdent(self):
        tk = self.token()
        if (tk is None):
            self.unexpected(tk)
            return None
        elif (tk.index == 2):
            id = tk.params[0]
            return id
        else:
            self.unexpected(tk)
            return None

    def expr(self,e):
        return e

    def pmin(self,e):
        return 0

    def pmax(self,e):
        return 0

    def mk(self,e,pmin = None,pmax = None):
        return e

    def isBlock(self,e):
        if (e is None):
            return False
        if (e is None):
            return False
        else:
            tmp = e.index
            if (tmp == 2):
                _g = e.params[0]
                t = e.params[1]
                e1 = e.params[2]
                if (e1 is not None):
                    return self.isBlock(e1)
                elif (t is not None):
                    if (t is None):
                        return False
                    elif (t.index == 2):
                        _g = t.params[0]
                        return True
                    else:
                        return False
                else:
                    return False
            elif (tmp == 4):
                _g = e.params[0]
                return True
            elif (tmp == 6):
                _g = e.params[0]
                _g = e.params[1]
                e1 = e.params[2]
                return self.isBlock(e1)
            elif (tmp == 7):
                _g = e.params[0]
                prefix = e.params[1]
                e1 = e.params[2]
                if (not prefix):
                    return self.isBlock(e1)
                else:
                    return False
            elif (tmp == 9):
                _g = e.params[0]
                e1 = e.params[1]
                e2 = e.params[2]
                if (e2 is not None):
                    return self.isBlock(e2)
                else:
                    return self.isBlock(e1)
            elif (tmp == 10):
                _g = e.params[0]
                e1 = e.params[1]
                return self.isBlock(e1)
            elif (tmp == 11):
                _g = e.params[0]
                _g = e.params[1]
                e1 = e.params[2]
                return self.isBlock(e1)
            elif (tmp == 14):
                _g = e.params[0]
                _g = e.params[2]
                _g = e.params[3]
                e1 = e.params[1]
                return self.isBlock(e1)
            elif (tmp == 15):
                e1 = e.params[0]
                if (e1 is not None):
                    return self.isBlock(e1)
                else:
                    return False
            elif (tmp == 20):
                _g = e.params[0]
                _g = e.params[1]
                _g = e.params[2]
                e1 = e.params[3]
                return self.isBlock(e1)
            elif (tmp == 21):
                _g = e.params[0]
                return True
            elif (tmp == 23):
                _g = e.params[0]
                _g = e.params[1]
                _g = e.params[2]
                return True
            elif (tmp == 24):
                _g = e.params[0]
                e1 = e.params[1]
                return self.isBlock(e1)
            elif (tmp == 25):
                _g = e.params[0]
                _g = e.params[1]
                e1 = e.params[2]
                return self.isBlock(e1)
            else:
                return False

    def parseFullExpr(self,exprs):
        e = self.parseExpr()
        exprs.append(e)
        tk = self.token()
        while True:
            tmp = None
            if ((tk == hscript_Token.TComma) and ((e is not None))):
                if (e is None):
                    tmp = False
                elif (e.index == 2):
                    _g = e.params[0]
                    _g1 = e.params[1]
                    _g2 = e.params[2]
                    tmp = True
                else:
                    tmp = False
            else:
                tmp = False
            if (not tmp):
                break
            e = self.parseStructure("var")
            exprs.append(e)
            tk = self.token()
        if ((tk != hscript_Token.TSemicolon) and ((tk != hscript_Token.TEof))):
            if self.isBlock(e):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
            else:
                self.unexpected(tk)

    def parseObject(self,p1):
        fl = list()
        while True:
            tk = self.token()
            id = None
            if (tk is None):
                self.unexpected(tk)
                break
            else:
                tmp = tk.index
                if (tmp == 1):
                    c = tk.params[0]
                    if (not self.allowJSON):
                        self.unexpected(tk)
                    if (c.index == 2):
                        s = c.params[0]
                        id = s
                    else:
                        self.unexpected(tk)
                elif (tmp == 2):
                    i = tk.params[0]
                    id = i
                elif (tmp == 7):
                    break
                else:
                    self.unexpected(tk)
                    break
            t = self.token()
            if (t != hscript_Token.TDoubleDot):
                self.unexpected(t)
            x = _hx_AnonObject({'name': id, 'e': self.parseExpr()})
            fl.append(x)
            tk = self.token()
            if (tk is None):
                self.unexpected(tk)
            else:
                tmp1 = tk.index
                if (tmp1 == 7):
                    break
                elif (tmp1 == 9):
                    pass
                else:
                    self.unexpected(tk)
        return self.parseExprNext(hscript_Expr.EObject(fl))

    def parseExpr(self):
        tk = self.token()
        if (tk is None):
            return self.unexpected(tk)
        else:
            tmp = tk.index
            if (tmp == 1):
                c = tk.params[0]
                return self.parseExprNext(hscript_Expr.EConst(c))
            elif (tmp == 2):
                id = tk.params[0]
                e = self.parseStructure(id)
                if (e is None):
                    e = hscript_Expr.EIdent(id)
                return self.parseExprNext(e)
            elif (tmp == 3):
                op = tk.params[0]
                if (op == "-"):
                    start = 0
                    e = self.parseExpr()
                    if (e is None):
                        return self.makeUnop(op,e)
                    if (e is None):
                        return self.makeUnop(op,e)
                    elif (e.index == 0):
                        _g = e.params[0]
                        tmp = _g.index
                        if (tmp == 0):
                            i = _g.params[0]
                            return hscript_Expr.EConst(hscript_Const.CInt(-i))
                        elif (tmp == 1):
                            f = _g.params[0]
                            return hscript_Expr.EConst(hscript_Const.CFloat(-f))
                        else:
                            return self.makeUnop(op,e)
                    else:
                        return self.makeUnop(op,e)
                if (self.opPriority.h.get(op,None) < 0):
                    return self.makeUnop(op,self.parseExpr())
                return self.unexpected(tk)
            elif (tmp == 4):
                tk = self.token()
                if (tk == hscript_Token.TPClose):
                    t = self.token()
                    if (not Type.enumEq(t,hscript_Token.TOp("->"))):
                        self.unexpected(t)
                    eret = self.parseExpr()
                    return hscript_Expr.EFunction([],hscript_Expr.EReturn(eret))
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                e = self.parseExpr()
                tk = self.token()
                if (tk is not None):
                    tmp = tk.index
                    if (tmp == 5):
                        return self.parseExprNext(hscript_Expr.EParent(e))
                    elif (tmp == 9):
                        if (e is not None):
                            if (e.index == 1):
                                v = e.params[0]
                                return self.parseLambda([_hx_AnonObject({'name': v})],0)
                    elif (tmp == 14):
                        t = self.parseType()
                        tk = self.token()
                        if (tk is not None):
                            tmp = tk.index
                            if (tmp == 5):
                                return self.parseExprNext(hscript_Expr.ECheckType(e,t))
                            elif (tmp == 9):
                                if (e is not None):
                                    if (e.index == 1):
                                        v = e.params[0]
                                        return self.parseLambda([_hx_AnonObject({'name': v, 't': t})],0)
                            else:
                                pass
                    else:
                        pass
                return self.unexpected(tk)
            elif (tmp == 6):
                tk = self.token()
                if (tk is None):
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                else:
                    tmp = tk.index
                    if (tmp == 1):
                        c = tk.params[0]
                        if self.allowJSON:
                            if (c.index == 2):
                                _g = c.params[0]
                                tk2 = self.token()
                                _this = self.tokens
                                _this.head = haxe_ds_GenericCell(tk2,_this.head)
                                _this = self.tokens
                                _this.head = haxe_ds_GenericCell(tk,_this.head)
                                if (tk2 is not None):
                                    if (tk2.index == 14):
                                        return self.parseExprNext(self.parseObject(0))
                            else:
                                _this = self.tokens
                                _this.head = haxe_ds_GenericCell(tk,_this.head)
                        else:
                            _this = self.tokens
                            _this.head = haxe_ds_GenericCell(tk,_this.head)
                    elif (tmp == 2):
                        _g = tk.params[0]
                        tk2 = self.token()
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(tk2,_this.head)
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(tk,_this.head)
                        if (tk2 is not None):
                            if (tk2.index == 14):
                                return self.parseExprNext(self.parseObject(0))
                    elif (tmp == 7):
                        return self.parseExprNext(hscript_Expr.EObject([]))
                    else:
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(tk,_this.head)
                a = list()
                while True:
                    self.parseFullExpr(a)
                    tk = self.token()
                    if ((tk == hscript_Token.TBrClose) or ((self.resumeErrors and ((tk == hscript_Token.TEof))))):
                        break
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                return hscript_Expr.EBlock(a)
            elif (tmp == 11):
                a = list()
                tk = self.token()
                while ((tk != hscript_Token.TBkClose) and (((not self.resumeErrors) or ((tk != hscript_Token.TEof))))):
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                    x = self.parseExpr()
                    a.append(x)
                    tk = self.token()
                    if (tk == hscript_Token.TComma):
                        tk = self.token()
                if ((len(a) == 1) and (((a[0] if 0 < len(a) else None) is not None))):
                    _g = (a[0] if 0 < len(a) else None)
                    if (_g is not None):
                        tmp = _g.index
                        if (tmp == 10):
                            _g1 = _g.params[0]
                            _g1 = _g.params[1]
                            def _hx_local_2():
                                _hx_local_0 = self
                                _hx_local_1 = _hx_local_0.uid
                                _hx_local_0.uid = (_hx_local_1 + 1)
                                return _hx_local_1
                            tmp = ("__a_" + Std.string(_hx_local_2()))
                            e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,None,hscript_Expr.EArrayDecl([])), self.mapCompr(tmp,(a[0] if 0 < len(a) else None)), hscript_Expr.EIdent(tmp)])
                            return self.parseExprNext(e)
                        elif (tmp == 11):
                            _g1 = _g.params[0]
                            _g1 = _g.params[1]
                            _g1 = _g.params[2]
                            def _hx_local_5():
                                _hx_local_3 = self
                                _hx_local_4 = _hx_local_3.uid
                                _hx_local_3.uid = (_hx_local_4 + 1)
                                return _hx_local_4
                            tmp = ("__a_" + Std.string(_hx_local_5()))
                            e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,None,hscript_Expr.EArrayDecl([])), self.mapCompr(tmp,(a[0] if 0 < len(a) else None)), hscript_Expr.EIdent(tmp)])
                            return self.parseExprNext(e)
                        elif (tmp == 24):
                            _g1 = _g.params[0]
                            _g1 = _g.params[1]
                            def _hx_local_8():
                                _hx_local_6 = self
                                _hx_local_7 = _hx_local_6.uid
                                _hx_local_6.uid = (_hx_local_7 + 1)
                                return _hx_local_7
                            tmp = ("__a_" + Std.string(_hx_local_8()))
                            e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,None,hscript_Expr.EArrayDecl([])), self.mapCompr(tmp,(a[0] if 0 < len(a) else None)), hscript_Expr.EIdent(tmp)])
                            return self.parseExprNext(e)
                        else:
                            pass
                return self.parseExprNext(hscript_Expr.EArrayDecl(a))
            elif (tmp == 15):
                id = tk.params[0]
                if self.allowMetadata:
                    args = self.parseMetaArgs()
                    return hscript_Expr.EMeta(id,args,self.parseExpr())
                else:
                    return self.unexpected(tk)
            else:
                return self.unexpected(tk)

    def parseLambda(self,args,pmin):
        while True:
            id = self.getIdent()
            t = (self.parseType() if (self.maybe(hscript_Token.TDoubleDot)) else None)
            args.append(_hx_AnonObject({'name': id, 't': t}))
            tk = self.token()
            if (tk is None):
                self.unexpected(tk)
                break
            else:
                tmp = tk.index
                if (tmp == 5):
                    break
                elif (tmp == 9):
                    pass
                else:
                    self.unexpected(tk)
                    break
        t = self.token()
        if (not Type.enumEq(t,hscript_Token.TOp("->"))):
            self.unexpected(t)
        eret = self.parseExpr()
        return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret))

    def parseMetaArgs(self):
        tk = self.token()
        if (tk != hscript_Token.TPOpen):
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            return None
        args = []
        tk = self.token()
        if (tk != hscript_Token.TPClose):
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            while True:
                x = self.parseExpr()
                args.append(x)
                _g = self.token()
                if (_g is None):
                    tk = _g
                    self.unexpected(tk)
                else:
                    tmp = _g.index
                    if (tmp == 5):
                        break
                    elif (tmp == 9):
                        pass
                    else:
                        tk1 = _g
                        self.unexpected(tk1)
        return args

    def mapCompr(self,tmp,e):
        if (e is None):
            return None
        edef = None
        edef1 = e.index
        if (edef1 == 3):
            e2 = e.params[0]
            edef = hscript_Expr.EParent(self.mapCompr(tmp,e2))
        elif (edef1 == 4):
            _g = e.params[0]
            if (len(_g) == 1):
                e1 = (_g[0] if 0 < len(_g) else None)
                edef = hscript_Expr.EBlock([self.mapCompr(tmp,e1)])
            else:
                edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e])
        elif (edef1 == 9):
            cond = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            edef = (hscript_Expr.EIf(cond,self.mapCompr(tmp,e1),None) if ((e2 is None)) else hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]))
        elif (edef1 == 10):
            cond = e.params[0]
            e2 = e.params[1]
            edef = hscript_Expr.EWhile(cond,self.mapCompr(tmp,e2))
        elif (edef1 == 11):
            v = e.params[0]
            it = e.params[1]
            e2 = e.params[2]
            edef = hscript_Expr.EFor(v,it,self.mapCompr(tmp,e2))
        elif (edef1 == 24):
            cond = e.params[0]
            e2 = e.params[1]
            edef = hscript_Expr.EDoWhile(cond,self.mapCompr(tmp,e2))
        else:
            edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e])
        return edef

    def makeUnop(self,op,e):
        if ((e is None) and self.resumeErrors):
            return None
        if (e is None):
            return hscript_Expr.EUnop(op,True,e)
        else:
            tmp = e.index
            if (tmp == 6):
                bop = e.params[0]
                e1 = e.params[1]
                e2 = e.params[2]
                return hscript_Expr.EBinop(bop,self.makeUnop(op,e1),e2)
            elif (tmp == 22):
                e1 = e.params[0]
                e2 = e.params[1]
                e3 = e.params[2]
                return hscript_Expr.ETernary(self.makeUnop(op,e1),e2,e3)
            else:
                return hscript_Expr.EUnop(op,True,e)

    def makeBinop(self,op,e1,e):
        if ((e is None) and self.resumeErrors):
            return hscript_Expr.EBinop(op,e1,e)
        if (e is None):
            return hscript_Expr.EBinop(op,e1,e)
        else:
            tmp = e.index
            if (tmp == 6):
                op2 = e.params[0]
                e2 = e.params[1]
                e3 = e.params[2]
                if ((self.opPriority.h.get(op,None) <= self.opPriority.h.get(op2,None)) and (not (op in self.opRightAssoc.h))):
                    return hscript_Expr.EBinop(op2,self.makeBinop(op,e1,e2),e3)
                else:
                    return hscript_Expr.EBinop(op,e1,e)
            elif (tmp == 22):
                e2 = e.params[0]
                e3 = e.params[1]
                e4 = e.params[2]
                if (op in self.opRightAssoc.h):
                    return hscript_Expr.EBinop(op,e1,e)
                else:
                    return hscript_Expr.ETernary(self.makeBinop(op,e1,e2),e3,e4)
            else:
                return hscript_Expr.EBinop(op,e1,e)

    def parseStructure(self,id):
        id1 = id
        _hx_local_0 = len(id1)
        if (_hx_local_0 == 5):
            if (id1 == "break"):
                return hscript_Expr.EBreak
            elif (id1 == "throw"):
                e = self.parseExpr()
                return hscript_Expr.EThrow(e)
            elif (id1 == "while"):
                econd = self.parseExpr()
                e = self.parseExpr()
                return hscript_Expr.EWhile(econd,e)
            else:
                return None
        elif (_hx_local_0 == 4):
            if (id1 == "else"):
                return self.unexpected(hscript_Token.TId(id))
            else:
                return None
        elif (_hx_local_0 == 3):
            if (id1 == "for"):
                t = self.token()
                if (t != hscript_Token.TPOpen):
                    self.unexpected(t)
                vname = self.getIdent()
                t = self.token()
                if (not Type.enumEq(t,hscript_Token.TId("in"))):
                    self.unexpected(t)
                eiter = self.parseExpr()
                t = self.token()
                if (t != hscript_Token.TPClose):
                    self.unexpected(t)
                e = self.parseExpr()
                return hscript_Expr.EFor(vname,eiter,e)
            elif (id1 == "new"):
                a = list()
                x = self.getIdent()
                a.append(x)
                while True:
                    tk = self.token()
                    if (tk is None):
                        self.unexpected(tk)
                        break
                    else:
                        tmp = tk.index
                        if (tmp == 4):
                            break
                        elif (tmp == 8):
                            x = self.getIdent()
                            a.append(x)
                        else:
                            self.unexpected(tk)
                            break
                args = self.parseExprList(hscript_Token.TPClose)
                return hscript_Expr.ENew(".".join([python_Boot.toString1(x1,'') for x1 in a]),args)
            elif (id1 == "try"):
                e = self.parseExpr()
                t = self.token()
                if (not Type.enumEq(t,hscript_Token.TId("catch"))):
                    self.unexpected(t)
                t = self.token()
                if (t != hscript_Token.TPOpen):
                    self.unexpected(t)
                vname = self.getIdent()
                t = self.token()
                if (t != hscript_Token.TDoubleDot):
                    self.unexpected(t)
                t = None
                if self.allowTypes:
                    t = self.parseType()
                else:
                    t1 = self.token()
                    if (not Type.enumEq(t1,hscript_Token.TId("Dynamic"))):
                        self.unexpected(t1)
                t1 = self.token()
                if (t1 != hscript_Token.TPClose):
                    self.unexpected(t1)
                ec = self.parseExpr()
                return hscript_Expr.ETry(e,vname,t,ec)
            elif (id1 == "var"):
                ident = self.getIdent()
                tk = self.token()
                t = None
                if ((tk == hscript_Token.TDoubleDot) and self.allowTypes):
                    t = self.parseType()
                    tk = self.token()
                e = None
                if Type.enumEq(tk,hscript_Token.TOp("=")):
                    e = self.parseExpr()
                else:
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                return hscript_Expr.EVar(ident,t,e)
            else:
                return None
        elif (_hx_local_0 == 8):
            if (id1 == "continue"):
                return hscript_Expr.EContinue
            elif (id1 == "function"):
                tk = self.token()
                name = None
                if (tk is None):
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                elif (tk.index == 2):
                    id = tk.params[0]
                    name = id
                else:
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                inf = self.parseFunctionDecl()
                return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret)
            else:
                return None
        elif (_hx_local_0 == 2):
            if (id1 == "do"):
                e = self.parseExpr()
                tk = self.token()
                if (tk is None):
                    self.unexpected(tk)
                elif (tk.index == 2):
                    if (tk.params[0] != "while"):
                        self.unexpected(tk)
                else:
                    self.unexpected(tk)
                econd = self.parseExpr()
                return hscript_Expr.EDoWhile(econd,e)
            elif (id1 == "if"):
                t = self.token()
                if (t != hscript_Token.TPOpen):
                    self.unexpected(t)
                cond = self.parseExpr()
                t = self.token()
                if (t != hscript_Token.TPClose):
                    self.unexpected(t)
                e1 = self.parseExpr()
                e2 = None
                semic = False
                tk = self.token()
                if (tk == hscript_Token.TSemicolon):
                    semic = True
                    tk = self.token()
                if Type.enumEq(tk,hscript_Token.TId("else")):
                    e2 = self.parseExpr()
                else:
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(tk,_this.head)
                    if semic:
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head)
                return hscript_Expr.EIf(cond,e1,e2)
            else:
                return None
        elif (_hx_local_0 == 6):
            if (id1 == "inline"):
                if (not self.maybe(hscript_Token.TId("function"))):
                    self.unexpected(hscript_Token.TId("inline"))
                return self.parseStructure("function")
            elif (id1 == "return"):
                tk = self.token()
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                e = (None if ((tk == hscript_Token.TSemicolon)) else self.parseExpr())
                return hscript_Expr.EReturn(e)
            elif (id1 == "switch"):
                e = self.parseExpr()
                _hx_def = None
                cases = []
                t = self.token()
                if (t != hscript_Token.TBrOpen):
                    self.unexpected(t)
                while True:
                    tk = self.token()
                    if (tk is None):
                        self.unexpected(tk)
                        break
                    else:
                        tmp = tk.index
                        if (tmp == 2):
                            _g = tk.params[0]
                            _hx_local_1 = len(_g)
                            if (_hx_local_1 == 4):
                                if (_g == "case"):
                                    c = _hx_AnonObject({'values': [], 'expr': None})
                                    cases.append(c)
                                    while True:
                                        e1 = self.parseExpr()
                                        _this = c.values
                                        _this.append(e1)
                                        tk = self.token()
                                        if (tk is None):
                                            self.unexpected(tk)
                                            break
                                        else:
                                            tmp1 = tk.index
                                            if (tmp1 == 9):
                                                pass
                                            elif (tmp1 == 14):
                                                break
                                            else:
                                                self.unexpected(tk)
                                                break
                                    exprs = []
                                    while True:
                                        tk = self.token()
                                        _this1 = self.tokens
                                        _this1.head = haxe_ds_GenericCell(tk,_this1.head)
                                        if (tk is None):
                                            self.parseFullExpr(exprs)
                                        else:
                                            tmp2 = tk.index
                                            if (tmp2 == 0):
                                                if self.resumeErrors:
                                                    break
                                                else:
                                                    self.parseFullExpr(exprs)
                                            elif (tmp2 == 2):
                                                _g1 = tk.params[0]
                                                _hx_local_2 = len(_g1)
                                                if (_hx_local_2 == 4):
                                                    if (_g1 == "case"):
                                                        break
                                                    else:
                                                        self.parseFullExpr(exprs)
                                                elif (_hx_local_2 == 7):
                                                    if (_g1 == "default"):
                                                        break
                                                    else:
                                                        self.parseFullExpr(exprs)
                                                else:
                                                    self.parseFullExpr(exprs)
                                            elif (tmp2 == 7):
                                                break
                                            else:
                                                self.parseFullExpr(exprs)
                                    c.expr = ((exprs[0] if 0 < len(exprs) else None) if ((len(exprs) == 1)) else (hscript_Expr.EBlock([]) if ((len(exprs) == 0)) else hscript_Expr.EBlock(exprs)))
                                else:
                                    self.unexpected(tk)
                                    break
                            elif (_hx_local_1 == 7):
                                if (_g == "default"):
                                    if (_hx_def is not None):
                                        self.unexpected(tk)
                                    t = self.token()
                                    if (t != hscript_Token.TDoubleDot):
                                        self.unexpected(t)
                                    exprs1 = []
                                    while True:
                                        tk = self.token()
                                        _this2 = self.tokens
                                        _this2.head = haxe_ds_GenericCell(tk,_this2.head)
                                        if (tk is None):
                                            self.parseFullExpr(exprs1)
                                        else:
                                            tmp3 = tk.index
                                            if (tmp3 == 0):
                                                if self.resumeErrors:
                                                    break
                                                else:
                                                    self.parseFullExpr(exprs1)
                                            elif (tmp3 == 2):
                                                _g2 = tk.params[0]
                                                _hx_local_3 = len(_g2)
                                                if (_hx_local_3 == 4):
                                                    if (_g2 == "case"):
                                                        break
                                                    else:
                                                        self.parseFullExpr(exprs1)
                                                elif (_hx_local_3 == 7):
                                                    if (_g2 == "default"):
                                                        break
                                                    else:
                                                        self.parseFullExpr(exprs1)
                                                else:
                                                    self.parseFullExpr(exprs1)
                                            elif (tmp3 == 7):
                                                break
                                            else:
                                                self.parseFullExpr(exprs1)
                                    _hx_def = ((exprs1[0] if 0 < len(exprs1) else None) if ((len(exprs1) == 1)) else (hscript_Expr.EBlock([]) if ((len(exprs1) == 0)) else hscript_Expr.EBlock(exprs1)))
                                else:
                                    self.unexpected(tk)
                                    break
                            else:
                                self.unexpected(tk)
                                break
                        elif (tmp == 7):
                            break
                        else:
                            self.unexpected(tk)
                            break
                return hscript_Expr.ESwitch(e,cases,_hx_def)
            else:
                return None
        else:
            return None

    def parseExprNext(self,e1):
        tk = self.token()
        if (tk is None):
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            return e1
        else:
            tmp = tk.index
            if (tmp == 3):
                op = tk.params[0]
                if (op == "->"):
                    tmp = e1.index
                    if (tmp == 1):
                        i = e1.params[0]
                        eret = self.parseExpr()
                        return hscript_Expr.EFunction([_hx_AnonObject({'name': i})],hscript_Expr.EReturn(eret))
                    elif (tmp == 3):
                        _hx_tmp = e1.params[0]
                        if (_hx_tmp.index == 1):
                            i = _hx_tmp.params[0]
                            eret = self.parseExpr()
                            return hscript_Expr.EFunction([_hx_AnonObject({'name': i})],hscript_Expr.EReturn(eret))
                    elif (tmp == 26):
                        _hx_tmp = e1.params[0]
                        if (_hx_tmp.index == 1):
                            i = _hx_tmp.params[0]
                            t = e1.params[1]
                            eret = self.parseExpr()
                            return hscript_Expr.EFunction([_hx_AnonObject({'name': i, 't': t})],hscript_Expr.EReturn(eret))
                    else:
                        pass
                    self.unexpected(tk)
                if (self.opPriority.h.get(op,None) == -1):
                    tmp = None
                    if (not self.isBlock(e1)):
                        if (e1.index == 3):
                            _g = e1.params[0]
                            tmp = True
                        else:
                            tmp = False
                    else:
                        tmp = True
                    if tmp:
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(tk,_this.head)
                        return e1
                    return self.parseExprNext(hscript_Expr.EUnop(op,False,e1))
                return self.makeBinop(op,e1,self.parseExpr())
            elif (tmp == 4):
                return self.parseExprNext(hscript_Expr.ECall(e1,self.parseExprList(hscript_Token.TPClose)))
            elif (tmp == 8):
                field = self.getIdent()
                return self.parseExprNext(hscript_Expr.EField(e1,field))
            elif (tmp == 11):
                e2 = self.parseExpr()
                t = self.token()
                if (t != hscript_Token.TBkClose):
                    self.unexpected(t)
                return self.parseExprNext(hscript_Expr.EArray(e1,e2))
            elif (tmp == 13):
                e2 = self.parseExpr()
                t = self.token()
                if (t != hscript_Token.TDoubleDot):
                    self.unexpected(t)
                e3 = self.parseExpr()
                return hscript_Expr.ETernary(e1,e2,e3)
            else:
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                return e1

    def parseFunctionArgs(self):
        args = list()
        tk = self.token()
        if (tk != hscript_Token.TPClose):
            done = False
            while (not done):
                name = None
                opt = False
                if (tk is not None):
                    if (tk.index == 13):
                        opt = True
                        tk = self.token()
                if (tk is None):
                    self.unexpected(tk)
                    break
                elif (tk.index == 2):
                    id = tk.params[0]
                    name = id
                else:
                    self.unexpected(tk)
                    break
                arg = _hx_AnonObject({'name': name})
                args.append(arg)
                if opt:
                    Reflect.setField(arg,"opt",True)
                if self.allowTypes:
                    if self.maybe(hscript_Token.TDoubleDot):
                        Reflect.setField(arg,"t",self.parseType())
                    if self.maybe(hscript_Token.TOp("=")):
                        Reflect.setField(arg,"value",self.parseExpr())
                tk = self.token()
                if (tk is None):
                    self.unexpected(tk)
                else:
                    tmp = tk.index
                    if (tmp == 5):
                        done = True
                    elif (tmp == 9):
                        tk = self.token()
                    else:
                        self.unexpected(tk)
        return args

    def parseFunctionDecl(self):
        t = self.token()
        if (t != hscript_Token.TPOpen):
            self.unexpected(t)
        args = self.parseFunctionArgs()
        ret = None
        if self.allowTypes:
            tk = self.token()
            if (tk != hscript_Token.TDoubleDot):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
            else:
                ret = self.parseType()
        return _hx_AnonObject({'args': args, 'ret': ret, 'body': self.parseExpr()})

    def parsePath(self):
        path = [self.getIdent()]
        while True:
            t = self.token()
            if (t != hscript_Token.TDot):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(t,_this.head)
                break
            x = self.getIdent()
            path.append(x)
        return path

    def parseType(self):
        _gthis = self
        t = self.token()
        if (t is None):
            return self.unexpected(t)
        else:
            tmp = t.index
            if (tmp == 2):
                v = t.params[0]
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(t,_this.head)
                path = self.parsePath()
                params = None
                t = self.token()
                if (t is None):
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(t,_this.head)
                elif (t.index == 3):
                    op = t.params[0]
                    if (op == "<"):
                        params = []
                        while True:
                            x = self.parseType()
                            params.append(x)
                            t = self.token()
                            if (t is not None):
                                tmp = t.index
                                if (tmp == 3):
                                    op = t.params[0]
                                    if (op == ">"):
                                        break
                                    if (HxString.charCodeAt(op,0) == 62):
                                        _this = self.tokens
                                        _this.head = haxe_ds_GenericCell(hscript_Token.TOp(HxString.substr(op,1,None)),_this.head)
                                        break
                                elif (tmp == 9):
                                    continue
                                else:
                                    pass
                            self.unexpected(t)
                            break
                    else:
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(t,_this.head)
                else:
                    _this = self.tokens
                    _this.head = haxe_ds_GenericCell(t,_this.head)
                return self.parseTypeNext(hscript_CType.CTPath(path,params))
            elif (tmp == 4):
                a = self.token()
                b = self.token()
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(b,_this.head)
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(a,_this.head)
                def _hx_local_0(args):
                    _g = _gthis.token()
                    if (_g is None):
                        t = _g
                        _gthis.unexpected(t)
                    elif (_g.index == 3):
                        if (_g.params[0] != "->"):
                            t = _g
                            _gthis.unexpected(t)
                    else:
                        t = _g
                        _gthis.unexpected(t)
                    return hscript_CType.CTFun(args,_gthis.parseType())
                withReturn = _hx_local_0
                if (a is None):
                    t1 = self.parseType()
                    _g = self.token()
                    if (_g is None):
                        t2 = _g
                        return self.unexpected(t2)
                    else:
                        tmp = _g.index
                        if (tmp == 5):
                            return self.parseTypeNext(hscript_CType.CTParent(t1))
                        elif (tmp == 9):
                            args = [t1]
                            while True:
                                x = self.parseType()
                                args.append(x)
                                if (not (self.maybe(hscript_Token.TComma))):
                                    break
                            t1 = self.token()
                            if (t1 != hscript_Token.TPClose):
                                self.unexpected(t1)
                            return withReturn(args)
                        else:
                            t1 = _g
                            return self.unexpected(t1)
                else:
                    tmp = a.index
                    if (tmp == 2):
                        _g = a.params[0]
                        if (b is None):
                            t1 = self.parseType()
                            _g = self.token()
                            if (_g is None):
                                t2 = _g
                                return self.unexpected(t2)
                            else:
                                tmp = _g.index
                                if (tmp == 5):
                                    return self.parseTypeNext(hscript_CType.CTParent(t1))
                                elif (tmp == 9):
                                    args = [t1]
                                    while True:
                                        x = self.parseType()
                                        args.append(x)
                                        if (not (self.maybe(hscript_Token.TComma))):
                                            break
                                    t1 = self.token()
                                    if (t1 != hscript_Token.TPClose):
                                        self.unexpected(t1)
                                    return withReturn(args)
                                else:
                                    t1 = _g
                                    return self.unexpected(t1)
                        elif (b.index == 14):
                            _g = []
                            _g1 = 0
                            _g2 = self.parseFunctionArgs()
                            while (_g1 < len(_g2)):
                                arg = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                                _g1 = (_g1 + 1)
                                _g3 = Reflect.field(arg,"value")
                                if (_g3 is not None):
                                    v = _g3
                                    if (not self.resumeErrors):
                                        raise haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"))
                                x = hscript_CType.CTNamed(arg.name,(hscript_CType.CTOpt(Reflect.field(arg,"t")) if (Reflect.field(arg,"opt")) else Reflect.field(arg,"t")))
                                _g.append(x)
                            args = _g
                            return withReturn(args)
                        else:
                            t1 = self.parseType()
                            _g = self.token()
                            if (_g is None):
                                t2 = _g
                                return self.unexpected(t2)
                            else:
                                tmp = _g.index
                                if (tmp == 5):
                                    return self.parseTypeNext(hscript_CType.CTParent(t1))
                                elif (tmp == 9):
                                    args = [t1]
                                    while True:
                                        x = self.parseType()
                                        args.append(x)
                                        if (not (self.maybe(hscript_Token.TComma))):
                                            break
                                    t1 = self.token()
                                    if (t1 != hscript_Token.TPClose):
                                        self.unexpected(t1)
                                    return withReturn(args)
                                else:
                                    t1 = _g
                                    return self.unexpected(t1)
                    elif (tmp == 5):
                        _g = []
                        _g1 = 0
                        _g2 = self.parseFunctionArgs()
                        while (_g1 < len(_g2)):
                            arg = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                            _g1 = (_g1 + 1)
                            _g3 = Reflect.field(arg,"value")
                            if (_g3 is not None):
                                v = _g3
                                if (not self.resumeErrors):
                                    raise haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"))
                            x = hscript_CType.CTNamed(arg.name,(hscript_CType.CTOpt(Reflect.field(arg,"t")) if (Reflect.field(arg,"opt")) else Reflect.field(arg,"t")))
                            _g.append(x)
                        args = _g
                        return withReturn(args)
                    else:
                        t1 = self.parseType()
                        _g = self.token()
                        if (_g is None):
                            t2 = _g
                            return self.unexpected(t2)
                        else:
                            tmp = _g.index
                            if (tmp == 5):
                                return self.parseTypeNext(hscript_CType.CTParent(t1))
                            elif (tmp == 9):
                                args = [t1]
                                while True:
                                    x = self.parseType()
                                    args.append(x)
                                    if (not (self.maybe(hscript_Token.TComma))):
                                        break
                                t1 = self.token()
                                if (t1 != hscript_Token.TPClose):
                                    self.unexpected(t1)
                                return withReturn(args)
                            else:
                                t1 = _g
                                return self.unexpected(t1)
            elif (tmp == 6):
                fields = []
                meta = None
                while True:
                    t = self.token()
                    if (t is None):
                        self.unexpected(t)
                        break
                    else:
                        tmp = t.index
                        if (tmp == 2):
                            _g = t.params[0]
                            if (_g == "var"):
                                name = self.getIdent()
                                t1 = self.token()
                                if (t1 != hscript_Token.TDoubleDot):
                                    self.unexpected(t1)
                                x = _hx_AnonObject({'name': name, 't': self.parseType(), 'meta': meta})
                                fields.append(x)
                                meta = None
                                t2 = self.token()
                                if (t2 != hscript_Token.TSemicolon):
                                    self.unexpected(t2)
                            else:
                                name1 = _g
                                t3 = self.token()
                                if (t3 != hscript_Token.TDoubleDot):
                                    self.unexpected(t3)
                                x1 = _hx_AnonObject({'name': name1, 't': self.parseType(), 'meta': meta})
                                fields.append(x1)
                                t = self.token()
                                if (t is None):
                                    self.unexpected(t)
                                else:
                                    tmp1 = t.index
                                    if (tmp1 == 7):
                                        break
                                    elif (tmp1 == 9):
                                        pass
                                    else:
                                        self.unexpected(t)
                        elif (tmp == 7):
                            break
                        elif (tmp == 15):
                            name2 = t.params[0]
                            if (meta is None):
                                meta = []
                            x2 = _hx_AnonObject({'name': name2, 'params': self.parseMetaArgs()})
                            meta.append(x2)
                        else:
                            self.unexpected(t)
                            break
                return self.parseTypeNext(hscript_CType.CTAnon(fields))
            else:
                return self.unexpected(t)

    def parseTypeNext(self,t):
        tk = self.token()
        if (tk is None):
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            return t
        elif (tk.index == 3):
            op = tk.params[0]
            if (op != "->"):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                return t
        else:
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            return t
        t2 = self.parseType()
        if (t2.index == 1):
            _g = t2.params[1]
            args = t2.params[0]
            args.insert(0, t)
            return t2
        else:
            return hscript_CType.CTFun([t],t2)

    def parseExprList(self,etk):
        args = list()
        tk = self.token()
        if (tk == etk):
            return args
        _this = self.tokens
        _this.head = haxe_ds_GenericCell(tk,_this.head)
        while True:
            x = self.parseExpr()
            args.append(x)
            tk = self.token()
            if (tk is None):
                if (tk == etk):
                    break
                self.unexpected(tk)
                break
            elif (tk.index != 9):
                if (tk == etk):
                    break
                self.unexpected(tk)
                break
        return args

    def parseModule(self,content,origin = None):
        if (origin is None):
            origin = "hscript"
        self.initParser(origin)
        self.input = content
        self.readPos = 0
        self.allowTypes = True
        self.allowMetadata = True
        decls = []
        while True:
            tk = self.token()
            if (tk == hscript_Token.TEof):
                break
            _this = self.tokens
            _this.head = haxe_ds_GenericCell(tk,_this.head)
            x = self.parseModuleDecl()
            decls.append(x)
        return decls

    def parseMetadata(self):
        meta = []
        while True:
            tk = self.token()
            if (tk is None):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                break
            elif (tk.index == 15):
                name = tk.params[0]
                x = _hx_AnonObject({'name': name, 'params': self.parseMetaArgs()})
                meta.append(x)
            else:
                _this1 = self.tokens
                _this1.head = haxe_ds_GenericCell(tk,_this1.head)
                break
        return meta

    def parseParams(self):
        if self.maybe(hscript_Token.TOp("<")):
            if (not self.resumeErrors):
                raise haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"))
        return _hx_AnonObject({})

    def parseModuleDecl(self):
        meta = self.parseMetadata()
        ident = self.getIdent()
        isPrivate = False
        isExtern = False
        while True:
            ident1 = ident
            _hx_local_0 = len(ident1)
            if (_hx_local_0 == 7):
                if (ident1 == "private"):
                    isPrivate = True
                else:
                    break
            elif (_hx_local_0 == 6):
                if (ident1 == "extern"):
                    isExtern = True
                else:
                    break
            else:
                break
            ident = self.getIdent()
        ident1 = ident
        _hx_local_1 = len(ident1)
        if (_hx_local_1 == 5):
            if (ident1 == "class"):
                name = self.getIdent()
                params = self.parseParams()
                extend = None
                implement = []
                while True:
                    t = self.token()
                    if (t is None):
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(t,_this.head)
                        break
                    elif (t.index == 2):
                        _g = t.params[0]
                        _hx_local_2 = len(_g)
                        if (_hx_local_2 == 10):
                            if (_g == "implements"):
                                x = self.parseType()
                                implement.append(x)
                            else:
                                _this1 = self.tokens
                                _this1.head = haxe_ds_GenericCell(t,_this1.head)
                                break
                        elif (_hx_local_2 == 7):
                            if (_g == "extends"):
                                extend = self.parseType()
                            else:
                                _this1 = self.tokens
                                _this1.head = haxe_ds_GenericCell(t,_this1.head)
                                break
                        else:
                            _this1 = self.tokens
                            _this1.head = haxe_ds_GenericCell(t,_this1.head)
                            break
                    else:
                        _this2 = self.tokens
                        _this2.head = haxe_ds_GenericCell(t,_this2.head)
                        break
                fields = []
                t = self.token()
                if (t != hscript_Token.TBrOpen):
                    self.unexpected(t)
                while (not self.maybe(hscript_Token.TBrClose)):
                    x = self.parseField()
                    fields.append(x)
                return hscript_ModuleDecl.DClass(_hx_AnonObject({'name': name, 'meta': meta, 'params': params, 'extend': extend, 'implement': implement, 'fields': fields, 'isPrivate': isPrivate, 'isExtern': isExtern}))
            else:
                self.unexpected(hscript_Token.TId(ident))
        elif (_hx_local_1 == 7):
            if (ident1 == "package"):
                path = self.parsePath()
                t = self.token()
                if (t != hscript_Token.TSemicolon):
                    self.unexpected(t)
                return hscript_ModuleDecl.DPackage(path)
            elif (ident1 == "typedef"):
                name = self.getIdent()
                params = self.parseParams()
                t = self.token()
                if (not Type.enumEq(t,hscript_Token.TOp("="))):
                    self.unexpected(t)
                t = self.parseType()
                return hscript_ModuleDecl.DTypedef(_hx_AnonObject({'name': name, 'meta': meta, 'params': params, 'isPrivate': isPrivate, 't': t}))
            else:
                self.unexpected(hscript_Token.TId(ident))
        elif (_hx_local_1 == 6):
            if (ident1 == "import"):
                path = [self.getIdent()]
                star = False
                while True:
                    t = self.token()
                    if (t != hscript_Token.TDot):
                        _this = self.tokens
                        _this.head = haxe_ds_GenericCell(t,_this.head)
                        break
                    t = self.token()
                    if (t is None):
                        self.unexpected(t)
                    else:
                        tmp = t.index
                        if (tmp == 2):
                            id = t.params[0]
                            path.append(id)
                        elif (tmp == 3):
                            if (t.params[0] == "*"):
                                star = True
                            else:
                                self.unexpected(t)
                        else:
                            self.unexpected(t)
                t = self.token()
                if (t != hscript_Token.TSemicolon):
                    self.unexpected(t)
                return hscript_ModuleDecl.DImport(path,star)
            else:
                self.unexpected(hscript_Token.TId(ident))
        else:
            self.unexpected(hscript_Token.TId(ident))
        return None

    def parseField(self):
        meta = self.parseMetadata()
        access = []
        while True:
            id = self.getIdent()
            id1 = id
            _hx_local_0 = len(id1)
            if (_hx_local_0 == 5):
                if (id1 == "macro"):
                    access.append(hscript_FieldAccess.AMacro)
                else:
                    self.unexpected(hscript_Token.TId(id))
                    break
            elif (_hx_local_0 == 7):
                if (id1 == "private"):
                    access.append(hscript_FieldAccess.APrivate)
                else:
                    self.unexpected(hscript_Token.TId(id))
                    break
            elif (_hx_local_0 == 3):
                if (id1 == "var"):
                    name1 = self.getIdent()
                    get = None
                    _hx_set = None
                    if self.maybe(hscript_Token.TPOpen):
                        get = self.getIdent()
                        t = self.token()
                        if (t != hscript_Token.TComma):
                            self.unexpected(t)
                        _hx_set = self.getIdent()
                        t1 = self.token()
                        if (t1 != hscript_Token.TPClose):
                            self.unexpected(t1)
                    _hx_type = (self.parseType() if (self.maybe(hscript_Token.TDoubleDot)) else None)
                    expr = (self.parseExpr() if (self.maybe(hscript_Token.TOp("="))) else None)
                    if (expr is not None):
                        if self.isBlock(expr):
                            self.maybe(hscript_Token.TSemicolon)
                        else:
                            t2 = self.token()
                            if (t2 != hscript_Token.TSemicolon):
                                self.unexpected(t2)
                    else:
                        tmp = None
                        if (_hx_type is not None):
                            if (_hx_type is None):
                                tmp = False
                            elif (_hx_type.index == 2):
                                _g = _hx_type.params[0]
                                tmp = True
                            else:
                                tmp = False
                        else:
                            tmp = False
                        if tmp:
                            self.maybe(hscript_Token.TSemicolon)
                        else:
                            t3 = self.token()
                            if (t3 != hscript_Token.TSemicolon):
                                self.unexpected(t3)
                    return _hx_AnonObject({'name': name1, 'meta': meta, 'access': access, 'kind': hscript_FieldKind.KVar(_hx_AnonObject({'get': get, 'set': _hx_set, 'type': _hx_type, 'expr': expr}))})
                else:
                    self.unexpected(hscript_Token.TId(id))
                    break
            elif (_hx_local_0 == 8):
                if (id1 == "function"):
                    name = self.getIdent()
                    inf = self.parseFunctionDecl()
                    return _hx_AnonObject({'name': name, 'meta': meta, 'access': access, 'kind': hscript_FieldKind.KFunction(_hx_AnonObject({'args': inf.args, 'expr': inf.body, 'ret': inf.ret}))})
                elif (id1 == "override"):
                    access.append(hscript_FieldAccess.AOverride)
                else:
                    self.unexpected(hscript_Token.TId(id))
                    break
            elif (_hx_local_0 == 6):
                if (id1 == "inline"):
                    access.append(hscript_FieldAccess.AInline)
                elif (id1 == "public"):
                    access.append(hscript_FieldAccess.APublic)
                elif (id1 == "static"):
                    access.append(hscript_FieldAccess.AStatic)
                else:
                    self.unexpected(hscript_Token.TId(id))
                    break
            else:
                self.unexpected(hscript_Token.TId(id))
                break
        return None

    def readChar(self):
        s = self.input
        index = self.readPos
        self.readPos = (self.readPos + 1)
        if (index >= len(s)):
            return -1
        else:
            return ord(s[index])

    def readString(self,until):
        c = 0
        b_b = python_lib_io_StringIO()
        esc = False
        old = self.line
        s = self.input
        while True:
            s = self.input
            index = self.readPos
            self.readPos = (self.readPos + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            if (c == -1):
                self.line = old
                if (not self.resumeErrors):
                    raise haxe_Exception.thrown(hscript_Error.EUnterminatedString)
                break
            if esc:
                esc = False
                c1 = c
                if (c1 == 47):
                    if self.allowJSON:
                        b_b.write("".join(map(chr,[c])))
                    else:
                        self.invalidChar(c)
                elif (((c1 == 92) or ((c1 == 39))) or ((c1 == 34))):
                    b_b.write("".join(map(chr,[c])))
                elif (c1 == 110):
                    b_b.write("".join(map(chr,[10])))
                elif (c1 == 114):
                    b_b.write("".join(map(chr,[13])))
                elif (c1 == 116):
                    b_b.write("".join(map(chr,[9])))
                elif (c1 == 117):
                    if (not self.allowJSON):
                        self.invalidChar(c)
                    k = 0
                    _g = 0
                    while (_g < 4):
                        i = _g
                        _g = (_g + 1)
                        k = (k << 4)
                        s1 = self.input
                        index1 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index1 >= len(s1))) else ord(s1[index1]))
                        char1 = char
                        if ((((((((((char1 == 57) or ((char1 == 56))) or ((char1 == 55))) or ((char1 == 54))) or ((char1 == 53))) or ((char1 == 52))) or ((char1 == 51))) or ((char1 == 50))) or ((char1 == 49))) or ((char1 == 48))):
                            k = (k + ((char - 48)))
                        elif ((((((char1 == 70) or ((char1 == 69))) or ((char1 == 68))) or ((char1 == 67))) or ((char1 == 66))) or ((char1 == 65))):
                            k = (k + ((char - 55)))
                        elif ((((((char1 == 102) or ((char1 == 101))) or ((char1 == 100))) or ((char1 == 99))) or ((char1 == 98))) or ((char1 == 97))):
                            k = (k + ((char - 87)))
                        else:
                            if (char == -1):
                                self.line = old
                                if (not self.resumeErrors):
                                    raise haxe_Exception.thrown(hscript_Error.EUnterminatedString)
                            self.invalidChar(char)
                    b_b.write("".join(map(chr,[k])))
                else:
                    self.invalidChar(c)
            elif (c == 92):
                esc = True
            elif (c == until):
                break
            else:
                if (c == 10):
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.line
                    _hx_local_4.line = (_hx_local_5 + 1)
                    _hx_local_5
                b_b.write("".join(map(chr,[c])))
        return b_b.getvalue()

    def token(self):
        if (self.tokens.head is not None):
            _this = self.tokens
            k = _this.head
            if (k is None):
                return None
            else:
                _this.head = k.next
                return k.elt
        char = None
        if (self.char < 0):
            s = self.input
            index = self.readPos
            self.readPos = (self.readPos + 1)
            char = (-1 if ((index >= len(s))) else ord(s[index]))
        else:
            char = self.char
            self.char = -1
        while True:
            if (char == -1):
                self.char = char
                return hscript_Token.TEof
            char1 = char
            if (char1 == 0):
                return hscript_Token.TEof
            elif (char1 == 10):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.line
                _hx_local_0.line = (_hx_local_1 + 1)
                _hx_local_1
            elif (((char1 == 32) or ((char1 == 13))) or ((char1 == 9))):
                pass
            elif ((char1 == 39) or ((char1 == 34))):
                return hscript_Token.TConst(hscript_Const.CString(self.readString(char)))
            elif (char1 == 35):
                s = self.input
                index = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index >= len(s))) else ord(s[index]))
                if (self.idents[char] if char >= 0 and char < len(self.idents) else None):
                    id = "".join(map(chr,[char]))
                    while True:
                        s1 = self.input
                        index1 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index1 >= len(s1))) else ord(s1[index1]))
                        if (not (self.idents[char] if char >= 0 and char < len(self.idents) else None)):
                            self.char = char
                            return self.preprocess(id)
                        id = (("null" if id is None else id) + HxOverrides.stringOrNull("".join(map(chr,[char]))))
                self.invalidChar(char)
            elif (char1 == 40):
                return hscript_Token.TPOpen
            elif (char1 == 41):
                return hscript_Token.TPClose
            elif (char1 == 44):
                return hscript_Token.TComma
            elif (char1 == 46):
                s2 = self.input
                index2 = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index2 >= len(s2))) else ord(s2[index2]))
                char2 = char
                if (char2 == 46):
                    s3 = self.input
                    index3 = self.readPos
                    self.readPos = (self.readPos + 1)
                    char = (-1 if ((index3 >= len(s3))) else ord(s3[index3]))
                    if (char != 46):
                        self.invalidChar(char)
                    return hscript_Token.TOp("...")
                elif ((((((((((char2 == 57) or ((char2 == 56))) or ((char2 == 55))) or ((char2 == 54))) or ((char2 == 53))) or ((char2 == 52))) or ((char2 == 51))) or ((char2 == 50))) or ((char2 == 49))) or ((char2 == 48))):
                    n = (char - 48)
                    exp = 1
                    while True:
                        s4 = self.input
                        index4 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index4 >= len(s4))) else ord(s4[index4]))
                        exp = (exp * 10)
                        char3 = char
                        if ((((((((((char3 == 57) or ((char3 == 56))) or ((char3 == 55))) or ((char3 == 54))) or ((char3 == 53))) or ((char3 == 52))) or ((char3 == 51))) or ((char3 == 50))) or ((char3 == 49))) or ((char3 == 48))):
                            n = ((n * 10) + ((char - 48)))
                        else:
                            self.char = char
                            return hscript_Token.TConst(hscript_Const.CFloat((n / exp)))
                else:
                    self.char = char
                    return hscript_Token.TDot
            elif ((((((((((char1 == 57) or ((char1 == 56))) or ((char1 == 55))) or ((char1 == 54))) or ((char1 == 53))) or ((char1 == 52))) or ((char1 == 51))) or ((char1 == 50))) or ((char1 == 49))) or ((char1 == 48))):
                n1 = (((char - 48)) * 1.0)
                exp1 = 0.
                while True:
                    s5 = self.input
                    index5 = self.readPos
                    self.readPos = (self.readPos + 1)
                    char = (-1 if ((index5 >= len(s5))) else ord(s5[index5]))
                    exp1 = (exp1 * 10)
                    char4 = char
                    if (char4 == 46):
                        if (exp1 > 0):
                            tmp = None
                            if (exp1 == 10):
                                s6 = self.input
                                index6 = self.readPos
                                self.readPos = (self.readPos + 1)
                                tmp = (((-1 if ((index6 >= len(s6))) else ord(s6[index6]))) == 46)
                            else:
                                tmp = False
                            if tmp:
                                _this = self.tokens
                                _this.head = haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head)
                                i = None
                                try:
                                    i = int(n1)
                                except BaseException as _g:
                                    None
                                    i = None
                                i1 = i
                                return hscript_Token.TConst((hscript_Const.CInt(i1) if ((i1 == n1)) else hscript_Const.CFloat(n1)))
                            self.invalidChar(char)
                        exp1 = 1.
                    elif ((((((((((char4 == 57) or ((char4 == 56))) or ((char4 == 55))) or ((char4 == 54))) or ((char4 == 53))) or ((char4 == 52))) or ((char4 == 51))) or ((char4 == 50))) or ((char4 == 49))) or ((char4 == 48))):
                        n1 = ((n1 * 10) + ((char - 48)))
                    elif ((char4 == 101) or ((char4 == 69))):
                        tk = self.token()
                        pow = None
                        if (tk is None):
                            _this1 = self.tokens
                            _this1.head = haxe_ds_GenericCell(tk,_this1.head)
                        else:
                            tmp1 = tk.index
                            if (tmp1 == 1):
                                _g1 = tk.params[0]
                                if (_g1.index == 0):
                                    e = _g1.params[0]
                                    pow = e
                                else:
                                    _this2 = self.tokens
                                    _this2.head = haxe_ds_GenericCell(tk,_this2.head)
                            elif (tmp1 == 3):
                                if (tk.params[0] == "-"):
                                    tk = self.token()
                                    if (tk is None):
                                        _this3 = self.tokens
                                        _this3.head = haxe_ds_GenericCell(tk,_this3.head)
                                    elif (tk.index == 1):
                                        _g2 = tk.params[0]
                                        if (_g2.index == 0):
                                            e1 = _g2.params[0]
                                            pow = -e1
                                        else:
                                            _this4 = self.tokens
                                            _this4.head = haxe_ds_GenericCell(tk,_this4.head)
                                    else:
                                        _this5 = self.tokens
                                        _this5.head = haxe_ds_GenericCell(tk,_this5.head)
                                else:
                                    _this6 = self.tokens
                                    _this6.head = haxe_ds_GenericCell(tk,_this6.head)
                            else:
                                _this7 = self.tokens
                                _this7.head = haxe_ds_GenericCell(tk,_this7.head)
                        if (pow is None):
                            self.invalidChar(char)
                        return hscript_Token.TConst(hscript_Const.CFloat((((Math.pow(10,pow) / exp1) * n1) * 10)))
                    elif (char4 == 120):
                        if ((n1 > 0) or ((exp1 > 0))):
                            self.invalidChar(char)
                        n2 = 0
                        while True:
                            s7 = self.input
                            index7 = self.readPos
                            self.readPos = (self.readPos + 1)
                            char = (-1 if ((index7 >= len(s7))) else ord(s7[index7]))
                            char5 = char
                            if ((((((((((char5 == 57) or ((char5 == 56))) or ((char5 == 55))) or ((char5 == 54))) or ((char5 == 53))) or ((char5 == 52))) or ((char5 == 51))) or ((char5 == 50))) or ((char5 == 49))) or ((char5 == 48))):
                                n2 = ((((n2 << 4)) + char) - 48)
                            elif ((((((char5 == 70) or ((char5 == 69))) or ((char5 == 68))) or ((char5 == 67))) or ((char5 == 66))) or ((char5 == 65))):
                                n2 = (((n2 << 4)) + ((char - 55)))
                            elif ((((((char5 == 102) or ((char5 == 101))) or ((char5 == 100))) or ((char5 == 99))) or ((char5 == 98))) or ((char5 == 97))):
                                n2 = (((n2 << 4)) + ((char - 87)))
                            else:
                                self.char = char
                                return hscript_Token.TConst(hscript_Const.CInt(n2))
                    else:
                        self.char = char
                        i2 = None
                        try:
                            i2 = int(n1)
                        except BaseException as _g3:
                            None
                            i2 = None
                        i3 = i2
                        return hscript_Token.TConst((hscript_Const.CFloat(((n1 * 10) / exp1)) if ((exp1 > 0)) else (hscript_Const.CInt(i3) if ((i3 == n1)) else hscript_Const.CFloat(n1))))
            elif (char1 == 58):
                return hscript_Token.TDoubleDot
            elif (char1 == 59):
                return hscript_Token.TSemicolon
            elif (char1 == 61):
                s8 = self.input
                index8 = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index8 >= len(s8))) else ord(s8[index8]))
                if (char == 61):
                    return hscript_Token.TOp("==")
                elif (char == 62):
                    return hscript_Token.TOp("=>")
                self.char = char
                return hscript_Token.TOp("=")
            elif (char1 == 63):
                return hscript_Token.TQuestion
            elif (char1 == 64):
                s9 = self.input
                index9 = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index9 >= len(s9))) else ord(s9[index9]))
                if ((self.idents[char] if char >= 0 and char < len(self.idents) else None) or ((char == 58))):
                    id1 = "".join(map(chr,[char]))
                    while True:
                        s10 = self.input
                        index10 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index10 >= len(s10))) else ord(s10[index10]))
                        if (not (self.idents[char] if char >= 0 and char < len(self.idents) else None)):
                            self.char = char
                            return hscript_Token.TMeta(id1)
                        id1 = (("null" if id1 is None else id1) + HxOverrides.stringOrNull("".join(map(chr,[char]))))
                self.invalidChar(char)
            elif (char1 == 91):
                return hscript_Token.TBkOpen
            elif (char1 == 93):
                return hscript_Token.TBkClose
            elif (char1 == 123):
                return hscript_Token.TBrOpen
            elif (char1 == 125):
                return hscript_Token.TBrClose
            else:
                if (self.ops[char] if char >= 0 and char < len(self.ops) else None):
                    op = "".join(map(chr,[char]))
                    while True:
                        s11 = self.input
                        index11 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index11 >= len(s11))) else ord(s11[index11]))
                        if (char == -1):
                            char = 0
                        if (not (self.ops[char] if char >= 0 and char < len(self.ops) else None)):
                            self.char = char
                            return hscript_Token.TOp(op)
                        pop = op
                        op = (("null" if op is None else op) + HxOverrides.stringOrNull("".join(map(chr,[char]))))
                        if ((not (op in self.opPriority.h)) and (pop in self.opPriority.h)):
                            if ((op == "//") or ((op == "/*"))):
                                return self.tokenComment(op,char)
                            self.char = char
                            return hscript_Token.TOp(pop)
                if (self.idents[char] if char >= 0 and char < len(self.idents) else None):
                    id2 = "".join(map(chr,[char]))
                    while True:
                        s12 = self.input
                        index12 = self.readPos
                        self.readPos = (self.readPos + 1)
                        char = (-1 if ((index12 >= len(s12))) else ord(s12[index12]))
                        if (char == -1):
                            char = 0
                        if (not (self.idents[char] if char >= 0 and char < len(self.idents) else None)):
                            self.char = char
                            return hscript_Token.TId(id2)
                        id2 = (("null" if id2 is None else id2) + HxOverrides.stringOrNull("".join(map(chr,[char]))))
                self.invalidChar(char)
            s13 = self.input
            index13 = self.readPos
            self.readPos = (self.readPos + 1)
            char = (-1 if ((index13 >= len(s13))) else ord(s13[index13]))

    def preprocValue(self,id):
        return self.preprocesorValues.h.get(id,None)

    def parsePreproCond(self):
        tk = self.token()
        if (tk is None):
            return self.unexpected(tk)
        else:
            tmp = tk.index
            if (tmp == 2):
                id = tk.params[0]
                return hscript_Expr.EIdent(id)
            elif (tmp == 3):
                if (tk.params[0] == "!"):
                    return hscript_Expr.EUnop("!",True,self.parsePreproCond())
                else:
                    return self.unexpected(tk)
            elif (tmp == 4):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head)
                return self.parseExpr()
            else:
                return self.unexpected(tk)

    def evalPreproCond(self,e):
        tmp = e.index
        if (tmp == 1):
            id = e.params[0]
            return (self.preprocValue(id) is not None)
        elif (tmp == 3):
            e1 = e.params[0]
            return self.evalPreproCond(e1)
        elif (tmp == 6):
            _g = e.params[1]
            _g1 = e.params[2]
            _g2 = e.params[0]
            if (_g2 == "&&"):
                e1 = _g
                e2 = _g1
                if self.evalPreproCond(e1):
                    return self.evalPreproCond(e2)
                else:
                    return False
            elif (_g2 == "||"):
                e1 = _g
                e2 = _g1
                if (not self.evalPreproCond(e1)):
                    return self.evalPreproCond(e2)
                else:
                    return True
            else:
                if (not self.resumeErrors):
                    raise haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor(("Can't eval " + HxOverrides.stringOrNull(e.tag))))
                return False
        elif (tmp == 7):
            _g = e.params[1]
            if (e.params[0] == "!"):
                e1 = e.params[2]
                return (not self.evalPreproCond(e1))
            else:
                if (not self.resumeErrors):
                    raise haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor(("Can't eval " + HxOverrides.stringOrNull(e.tag))))
                return False
        else:
            if (not self.resumeErrors):
                raise haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor(("Can't eval " + HxOverrides.stringOrNull(e.tag))))
            return False

    def preprocess(self,id):
        id1 = id
        _hx_local_0 = len(id1)
        if (_hx_local_0 == 4):
            if (id1 == "else"):
                if (len(self.preprocStack) > 0):
                    if python_internal_ArrayImpl._get(self.preprocStack, (len(self.preprocStack) - 1)).r:
                        python_internal_ArrayImpl._get(self.preprocStack, (len(self.preprocStack) - 1)).r = False
                        self.skipTokens()
                        return self.token()
                    elif (id == "else"):
                        _this = self.preprocStack
                        if (len(_this) != 0):
                            _this.pop()
                        _this = self.preprocStack
                        _this.append(_hx_AnonObject({'r': True}))
                        return self.token()
                    else:
                        _this = self.preprocStack
                        if (len(_this) != 0):
                            _this.pop()
                        return self.preprocess("if")
                else:
                    return hscript_Token.TPrepro(id)
            else:
                return hscript_Token.TPrepro(id)
        elif (_hx_local_0 == 3):
            if (id1 == "end"):
                if (len(self.preprocStack) > 0):
                    _this = self.preprocStack
                    if (len(_this) != 0):
                        _this.pop()
                    return self.token()
                else:
                    return hscript_Token.TPrepro(id)
            else:
                return hscript_Token.TPrepro(id)
        elif (_hx_local_0 == 6):
            if (id1 == "elseif"):
                if (len(self.preprocStack) > 0):
                    if python_internal_ArrayImpl._get(self.preprocStack, (len(self.preprocStack) - 1)).r:
                        python_internal_ArrayImpl._get(self.preprocStack, (len(self.preprocStack) - 1)).r = False
                        self.skipTokens()
                        return self.token()
                    elif (id == "else"):
                        _this = self.preprocStack
                        if (len(_this) != 0):
                            _this.pop()
                        _this = self.preprocStack
                        _this.append(_hx_AnonObject({'r': True}))
                        return self.token()
                    else:
                        _this = self.preprocStack
                        if (len(_this) != 0):
                            _this.pop()
                        return self.preprocess("if")
                else:
                    return hscript_Token.TPrepro(id)
            else:
                return hscript_Token.TPrepro(id)
        elif (_hx_local_0 == 2):
            if (id1 == "if"):
                e = self.parsePreproCond()
                if self.evalPreproCond(e):
                    _this = self.preprocStack
                    _this.append(_hx_AnonObject({'r': True}))
                    return self.token()
                _this = self.preprocStack
                _this.append(_hx_AnonObject({'r': False}))
                self.skipTokens()
                return self.token()
            else:
                return hscript_Token.TPrepro(id)
        else:
            return hscript_Token.TPrepro(id)

    def skipTokens(self):
        spos = (len(self.preprocStack) - 1)
        obj = (self.preprocStack[spos] if spos >= 0 and spos < len(self.preprocStack) else None)
        pos = self.readPos
        while True:
            tk = self.token()
            if (tk == hscript_Token.TEof):
                if (not self.resumeErrors):
                    raise haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"))
            if ((self.preprocStack[spos] if spos >= 0 and spos < len(self.preprocStack) else None) != obj):
                _this = self.tokens
                _this.head = haxe_ds_GenericCell(tk,_this.head)
                break

    def tokenComment(self,op,char):
        c = HxString.charCodeAt(op,1)
        s = self.input
        if (c == 47):
            while ((char != 13) and ((char != 10))):
                s = self.input
                index = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index >= len(s))) else ord(s[index]))
                if (char == -1):
                    break
            self.char = char
            return self.token()
        if (c == 42):
            old = self.line
            if (op == "/**/"):
                self.char = char
                return self.token()
            while True:
                while (char != 42):
                    if (char == 10):
                        _hx_local_0 = self
                        _hx_local_1 = _hx_local_0.line
                        _hx_local_0.line = (_hx_local_1 + 1)
                        _hx_local_1
                    s = self.input
                    index = self.readPos
                    self.readPos = (self.readPos + 1)
                    char = (-1 if ((index >= len(s))) else ord(s[index]))
                    if (char == -1):
                        self.line = old
                        if (not self.resumeErrors):
                            raise haxe_Exception.thrown(hscript_Error.EUnterminatedComment)
                        break
                s1 = self.input
                index1 = self.readPos
                self.readPos = (self.readPos + 1)
                char = (-1 if ((index1 >= len(s1))) else ord(s1[index1]))
                if (char == -1):
                    self.line = old
                    if (not self.resumeErrors):
                        raise haxe_Exception.thrown(hscript_Error.EUnterminatedComment)
                    break
                if (not ((char != 47))):
                    break
            return self.token()
        self.char = char
        return hscript_Token.TOp(op)

    def constString(self,c):
        tmp = c.index
        if (tmp == 0):
            v = c.params[0]
            return Std.string(v)
        elif (tmp == 1):
            f = c.params[0]
            return Std.string(f)
        elif (tmp == 2):
            s = c.params[0]
            return s
        else:
            pass

    def tokenString(self,t):
        tmp = t.index
        if (tmp == 0):
            return "<eof>"
        elif (tmp == 1):
            c = t.params[0]
            return self.constString(c)
        elif (tmp == 2):
            s = t.params[0]
            return s
        elif (tmp == 3):
            s = t.params[0]
            return s
        elif (tmp == 4):
            return "("
        elif (tmp == 5):
            return ")"
        elif (tmp == 6):
            return "{"
        elif (tmp == 7):
            return "}"
        elif (tmp == 8):
            return "."
        elif (tmp == 9):
            return ","
        elif (tmp == 10):
            return ";"
        elif (tmp == 11):
            return "["
        elif (tmp == 12):
            return "]"
        elif (tmp == 13):
            return "?"
        elif (tmp == 14):
            return ":"
        elif (tmp == 15):
            id = t.params[0]
            return ("@" + ("null" if id is None else id))
        elif (tmp == 16):
            id = t.params[0]
            return ("#" + ("null" if id is None else id))
        else:
            pass

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.line = None
        _hx_o.opChars = None
        _hx_o.identChars = None
        _hx_o.opPriority = None
        _hx_o.opRightAssoc = None
        _hx_o.preprocesorValues = None
        _hx_o.allowJSON = None
        _hx_o.allowTypes = None
        _hx_o.allowMetadata = None
        _hx_o.resumeErrors = None
        _hx_o.input = None
        _hx_o.readPos = None
        _hx_o.char = None
        _hx_o.ops = None
        _hx_o.idents = None
        _hx_o.uid = None
        _hx_o.tokens = None
        _hx_o.preprocStack = None
hscript_Parser._hx_class = hscript_Parser
_hx_classes["hscript.Parser"] = hscript_Parser


class hscript_Tools:
    _hx_class_name = "hscript.Tools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["iter", "map", "expr", "mk"]

    @staticmethod
    def iter(e,f):
        tmp = e.index
        if (tmp == 0):
            _g = e.params[0]
        elif (tmp == 1):
            _g = e.params[0]
        elif (tmp == 2):
            _g = e.params[0]
            _g = e.params[1]
            e1 = e.params[2]
            if (e1 is not None):
                f(e1)
        elif (tmp == 3):
            e1 = e.params[0]
            f(e1)
        elif (tmp == 4):
            el = e.params[0]
            _g = 0
            while (_g < len(el)):
                e1 = (el[_g] if _g >= 0 and _g < len(el) else None)
                _g = (_g + 1)
                f(e1)
        elif (tmp == 5):
            _g = e.params[1]
            e1 = e.params[0]
            f(e1)
        elif (tmp == 6):
            _g = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            f(e1)
            f(e2)
        elif (tmp == 7):
            _g = e.params[0]
            _g = e.params[1]
            e1 = e.params[2]
            f(e1)
        elif (tmp == 8):
            e1 = e.params[0]
            args = e.params[1]
            f(e1)
            _g = 0
            while (_g < len(args)):
                a = (args[_g] if _g >= 0 and _g < len(args) else None)
                _g = (_g + 1)
                f(a)
        elif (tmp == 9):
            c = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            f(c)
            f(e1)
            if (e2 is not None):
                f(e2)
        elif (tmp == 10):
            c = e.params[0]
            e1 = e.params[1]
            f(c)
            f(e1)
        elif (tmp == 11):
            _g = e.params[0]
            it = e.params[1]
            e1 = e.params[2]
            f(it)
            f(e1)
        elif ((tmp == 13) or ((tmp == 12))):
            pass
        elif (tmp == 14):
            _g = e.params[0]
            _g = e.params[2]
            _g = e.params[3]
            e1 = e.params[1]
            f(e1)
        elif (tmp == 15):
            e1 = e.params[0]
            if (e1 is not None):
                f(e1)
        elif (tmp == 16):
            e1 = e.params[0]
            i = e.params[1]
            f(e1)
            f(i)
        elif (tmp == 17):
            el = e.params[0]
            _g = 0
            while (_g < len(el)):
                e1 = (el[_g] if _g >= 0 and _g < len(el) else None)
                _g = (_g + 1)
                f(e1)
        elif (tmp == 18):
            _g = e.params[0]
            el = e.params[1]
            _g = 0
            while (_g < len(el)):
                e1 = (el[_g] if _g >= 0 and _g < len(el) else None)
                _g = (_g + 1)
                f(e1)
        elif (tmp == 19):
            e1 = e.params[0]
            f(e1)
        elif (tmp == 20):
            _g = e.params[1]
            _g = e.params[2]
            e1 = e.params[0]
            c = e.params[3]
            f(e1)
            f(c)
        elif (tmp == 21):
            fl = e.params[0]
            _g = 0
            while (_g < len(fl)):
                fi = (fl[_g] if _g >= 0 and _g < len(fl) else None)
                _g = (_g + 1)
                f(fi.e)
        elif (tmp == 22):
            c = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            f(c)
            f(e1)
            f(e2)
        elif (tmp == 23):
            e1 = e.params[0]
            cases = e.params[1]
            _hx_def = e.params[2]
            f(e1)
            _g = 0
            while (_g < len(cases)):
                c = (cases[_g] if _g >= 0 and _g < len(cases) else None)
                _g = (_g + 1)
                _g1 = 0
                _g2 = c.values
                while (_g1 < len(_g2)):
                    v = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                    _g1 = (_g1 + 1)
                    f(v)
                f(c.expr)
            if (_hx_def is not None):
                f(_hx_def)
        elif (tmp == 24):
            c = e.params[0]
            e1 = e.params[1]
            f(c)
            f(e1)
        elif (tmp == 25):
            name = e.params[0]
            args = e.params[1]
            e1 = e.params[2]
            if (args is not None):
                _g = 0
                while (_g < len(args)):
                    a = (args[_g] if _g >= 0 and _g < len(args) else None)
                    _g = (_g + 1)
                    f(a)
            f(e1)
        elif (tmp == 26):
            _g = e.params[1]
            e1 = e.params[0]
            f(e1)
        else:
            pass

    @staticmethod
    def map(e,f):
        edef = None
        edef1 = e.index
        if (edef1 == 0):
            _g = e.params[0]
            edef = e
        elif (edef1 == 1):
            _g = e.params[0]
            edef = e
        elif (edef1 == 2):
            n = e.params[0]
            t = e.params[1]
            e1 = e.params[2]
            edef = hscript_Expr.EVar(n,t,(f(e1) if ((e1 is not None)) else None))
        elif (edef1 == 3):
            e1 = e.params[0]
            edef = hscript_Expr.EParent(f(e1))
        elif (edef1 == 4):
            el = e.params[0]
            _g = []
            _g1 = 0
            while (_g1 < len(el)):
                e1 = (el[_g1] if _g1 >= 0 and _g1 < len(el) else None)
                _g1 = (_g1 + 1)
                x = f(e1)
                _g.append(x)
            edef = hscript_Expr.EBlock(_g)
        elif (edef1 == 5):
            e1 = e.params[0]
            fi = e.params[1]
            edef = hscript_Expr.EField(f(e1),fi)
        elif (edef1 == 6):
            op = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            edef = hscript_Expr.EBinop(op,f(e1),f(e2))
        elif (edef1 == 7):
            op = e.params[0]
            pre = e.params[1]
            e1 = e.params[2]
            edef = hscript_Expr.EUnop(op,pre,f(e1))
        elif (edef1 == 8):
            e1 = e.params[0]
            args = e.params[1]
            edef1 = f(e1)
            _g = []
            _g1 = 0
            while (_g1 < len(args)):
                a = (args[_g1] if _g1 >= 0 and _g1 < len(args) else None)
                _g1 = (_g1 + 1)
                x = f(a)
                _g.append(x)
            edef = hscript_Expr.ECall(edef1,_g)
        elif (edef1 == 9):
            c = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            edef = hscript_Expr.EIf(f(c),f(e1),(f(e2) if ((e2 is not None)) else None))
        elif (edef1 == 10):
            c = e.params[0]
            e1 = e.params[1]
            edef = hscript_Expr.EWhile(f(c),f(e1))
        elif (edef1 == 11):
            v = e.params[0]
            it = e.params[1]
            e1 = e.params[2]
            edef = hscript_Expr.EFor(v,f(it),f(e1))
        elif ((edef1 == 13) or ((edef1 == 12))):
            edef = e
        elif (edef1 == 14):
            args = e.params[0]
            e1 = e.params[1]
            name = e.params[2]
            t = e.params[3]
            edef = hscript_Expr.EFunction(args,f(e1),name,t)
        elif (edef1 == 15):
            e1 = e.params[0]
            edef = hscript_Expr.EReturn((f(e1) if ((e1 is not None)) else None))
        elif (edef1 == 16):
            e1 = e.params[0]
            i = e.params[1]
            edef = hscript_Expr.EArray(f(e1),f(i))
        elif (edef1 == 17):
            el = e.params[0]
            _g = []
            _g1 = 0
            while (_g1 < len(el)):
                e1 = (el[_g1] if _g1 >= 0 and _g1 < len(el) else None)
                _g1 = (_g1 + 1)
                x = f(e1)
                _g.append(x)
            edef = hscript_Expr.EArrayDecl(_g)
        elif (edef1 == 18):
            cl = e.params[0]
            el = e.params[1]
            _g = []
            _g1 = 0
            while (_g1 < len(el)):
                e1 = (el[_g1] if _g1 >= 0 and _g1 < len(el) else None)
                _g1 = (_g1 + 1)
                x = f(e1)
                _g.append(x)
            edef = hscript_Expr.ENew(cl,_g)
        elif (edef1 == 19):
            e1 = e.params[0]
            edef = hscript_Expr.EThrow(f(e1))
        elif (edef1 == 20):
            e1 = e.params[0]
            v = e.params[1]
            t = e.params[2]
            c = e.params[3]
            edef = hscript_Expr.ETry(f(e1),v,t,f(c))
        elif (edef1 == 21):
            fl = e.params[0]
            _g = []
            _g1 = 0
            while (_g1 < len(fl)):
                fi = (fl[_g1] if _g1 >= 0 and _g1 < len(fl) else None)
                _g1 = (_g1 + 1)
                x = _hx_AnonObject({'name': fi.name, 'e': f(fi.e)})
                _g.append(x)
            edef = hscript_Expr.EObject(_g)
        elif (edef1 == 22):
            c = e.params[0]
            e1 = e.params[1]
            e2 = e.params[2]
            edef = hscript_Expr.ETernary(f(c),f(e1),f(e2))
        elif (edef1 == 23):
            e1 = e.params[0]
            cases = e.params[1]
            _hx_def = e.params[2]
            edef1 = f(e1)
            _g = []
            _g1 = 0
            while (_g1 < len(cases)):
                c = (cases[_g1] if _g1 >= 0 and _g1 < len(cases) else None)
                _g1 = (_g1 + 1)
                _g2 = []
                _g3 = 0
                _g4 = c.values
                while (_g3 < len(_g4)):
                    v = (_g4[_g3] if _g3 >= 0 and _g3 < len(_g4) else None)
                    _g3 = (_g3 + 1)
                    x = f(v)
                    _g2.append(x)
                x1 = _hx_AnonObject({'values': _g2, 'expr': f(c.expr)})
                _g.append(x1)
            edef = hscript_Expr.ESwitch(edef1,_g,(None if ((_hx_def is None)) else f(_hx_def)))
        elif (edef1 == 24):
            c = e.params[0]
            e1 = e.params[1]
            edef = hscript_Expr.EDoWhile(f(c),f(e1))
        elif (edef1 == 25):
            name = e.params[0]
            args = e.params[1]
            e1 = e.params[2]
            edef1 = None
            if (args is None):
                edef1 = None
            else:
                _g = []
                _g1 = 0
                while (_g1 < len(args)):
                    a = (args[_g1] if _g1 >= 0 and _g1 < len(args) else None)
                    _g1 = (_g1 + 1)
                    x = f(a)
                    _g.append(x)
                edef1 = _g
            edef = hscript_Expr.EMeta(name,edef1,f(e1))
        elif (edef1 == 26):
            e1 = e.params[0]
            t = e.params[1]
            edef = hscript_Expr.ECheckType(f(e1),t)
        else:
            pass
        return edef

    @staticmethod
    def expr(e):
        return e

    @staticmethod
    def mk(e,p):
        return e
hscript_Tools._hx_class = hscript_Tools
_hx_classes["hscript.Tools"] = hscript_Tools


class hx_strings__AnyAsString_AnyAsString_Impl_:
    _hx_class_name = "hx.strings._AnyAsString.AnyAsString_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["fromBool", "fromAny"]

    @staticmethod
    def fromBool(value):
        if value:
            return "true"
        else:
            return "false"

    @staticmethod
    def fromAny(value):
        return Std.string(value)
hx_strings__AnyAsString_AnyAsString_Impl_._hx_class = hx_strings__AnyAsString_AnyAsString_Impl_
_hx_classes["hx.strings._AnyAsString.AnyAsString_Impl_"] = hx_strings__AnyAsString_AnyAsString_Impl_


class hx_strings__Char_CharCaseMapper:
    _hx_class_name = "hx.strings._Char.CharCaseMapper"
    _hx_is_interface = "False"
    __slots__ = ("mapU2L", "mapL2U")
    _hx_fields = ["mapU2L", "mapL2U"]
    _hx_methods = ["_addCaseMapping", "isLowerCase", "isUpperCase", "toLowerCase", "toUpperCase"]

    def __init__(self):
        self.mapL2U = haxe_ds_IntMap()
        self.mapU2L = haxe_ds_IntMap()
        self._addCaseMapping(97,65)
        self._addCaseMapping(98,66)
        self._addCaseMapping(99,67)
        self._addCaseMapping(100,68)
        self._addCaseMapping(101,69)
        self._addCaseMapping(102,70)
        self._addCaseMapping(103,71)
        self._addCaseMapping(104,72)
        self._addCaseMapping(105,73)
        self._addCaseMapping(106,74)
        self._addCaseMapping(107,75)
        self._addCaseMapping(108,76)
        self._addCaseMapping(109,77)
        self._addCaseMapping(110,78)
        self._addCaseMapping(111,79)
        self._addCaseMapping(112,80)
        self._addCaseMapping(113,81)
        self._addCaseMapping(114,82)
        self._addCaseMapping(115,83)
        self._addCaseMapping(116,84)
        self._addCaseMapping(117,85)
        self._addCaseMapping(118,86)
        self._addCaseMapping(119,87)
        self._addCaseMapping(120,88)
        self._addCaseMapping(121,89)
        self._addCaseMapping(122,90)
        self._addCaseMapping(224,192)
        self._addCaseMapping(225,193)
        self._addCaseMapping(226,194)
        self._addCaseMapping(227,195)
        self._addCaseMapping(228,196)
        self._addCaseMapping(229,197)
        self._addCaseMapping(230,198)
        self._addCaseMapping(231,199)
        self._addCaseMapping(232,200)
        self._addCaseMapping(233,201)
        self._addCaseMapping(234,202)
        self._addCaseMapping(235,203)
        self._addCaseMapping(236,204)
        self._addCaseMapping(237,205)
        self._addCaseMapping(238,206)
        self._addCaseMapping(239,207)
        self._addCaseMapping(240,208)
        self._addCaseMapping(241,209)
        self._addCaseMapping(242,210)
        self._addCaseMapping(243,211)
        self._addCaseMapping(244,212)
        self._addCaseMapping(245,213)
        self._addCaseMapping(246,214)
        self._addCaseMapping(248,216)
        self._addCaseMapping(249,217)
        self._addCaseMapping(250,218)
        self._addCaseMapping(251,219)
        self._addCaseMapping(252,220)
        self._addCaseMapping(253,221)
        self._addCaseMapping(254,222)
        self._addCaseMapping(255,376)
        self._addCaseMapping(257,256)
        self._addCaseMapping(259,258)
        self._addCaseMapping(261,260)
        self._addCaseMapping(263,262)
        self._addCaseMapping(265,264)
        self._addCaseMapping(267,266)
        self._addCaseMapping(269,268)
        self._addCaseMapping(271,270)
        self._addCaseMapping(273,272)
        self._addCaseMapping(275,274)
        self._addCaseMapping(277,276)
        self._addCaseMapping(279,278)
        self._addCaseMapping(281,280)
        self._addCaseMapping(283,282)
        self._addCaseMapping(285,284)
        self._addCaseMapping(287,286)
        self._addCaseMapping(289,288)
        self._addCaseMapping(291,290)
        self._addCaseMapping(293,292)
        self._addCaseMapping(295,294)
        self._addCaseMapping(297,296)
        self._addCaseMapping(299,298)
        self._addCaseMapping(301,300)
        self._addCaseMapping(303,302)
        self._addCaseMapping(305,73)
        self._addCaseMapping(307,306)
        self._addCaseMapping(309,308)
        self._addCaseMapping(311,310)
        self._addCaseMapping(314,313)
        self._addCaseMapping(316,315)
        self._addCaseMapping(318,317)
        self._addCaseMapping(320,319)
        self._addCaseMapping(322,321)
        self._addCaseMapping(324,323)
        self._addCaseMapping(326,325)
        self._addCaseMapping(328,327)
        self._addCaseMapping(331,330)
        self._addCaseMapping(333,332)
        self._addCaseMapping(335,334)
        self._addCaseMapping(337,336)
        self._addCaseMapping(339,338)
        self._addCaseMapping(341,340)
        self._addCaseMapping(343,342)
        self._addCaseMapping(345,344)
        self._addCaseMapping(347,346)
        self._addCaseMapping(349,348)
        self._addCaseMapping(351,350)
        self._addCaseMapping(353,352)
        self._addCaseMapping(355,354)
        self._addCaseMapping(357,356)
        self._addCaseMapping(359,358)
        self._addCaseMapping(361,360)
        self._addCaseMapping(363,362)
        self._addCaseMapping(365,364)
        self._addCaseMapping(367,366)
        self._addCaseMapping(369,368)
        self._addCaseMapping(371,370)
        self._addCaseMapping(373,372)
        self._addCaseMapping(375,374)
        self._addCaseMapping(378,377)
        self._addCaseMapping(380,379)
        self._addCaseMapping(382,381)
        self._addCaseMapping(387,386)
        self._addCaseMapping(389,388)
        self._addCaseMapping(392,391)
        self._addCaseMapping(396,395)
        self._addCaseMapping(402,401)
        self._addCaseMapping(409,408)
        self._addCaseMapping(417,416)
        self._addCaseMapping(419,418)
        self._addCaseMapping(421,420)
        self._addCaseMapping(424,423)
        self._addCaseMapping(429,428)
        self._addCaseMapping(432,431)
        self._addCaseMapping(436,435)
        self._addCaseMapping(438,437)
        self._addCaseMapping(441,440)
        self._addCaseMapping(445,444)
        self._addCaseMapping(454,452)
        self._addCaseMapping(457,455)
        self._addCaseMapping(460,458)
        self._addCaseMapping(462,461)
        self._addCaseMapping(464,463)
        self._addCaseMapping(466,465)
        self._addCaseMapping(468,467)
        self._addCaseMapping(470,469)
        self._addCaseMapping(472,471)
        self._addCaseMapping(474,473)
        self._addCaseMapping(476,475)
        self._addCaseMapping(479,478)
        self._addCaseMapping(481,480)
        self._addCaseMapping(483,482)
        self._addCaseMapping(485,484)
        self._addCaseMapping(487,486)
        self._addCaseMapping(489,488)
        self._addCaseMapping(491,490)
        self._addCaseMapping(493,492)
        self._addCaseMapping(495,494)
        self._addCaseMapping(499,497)
        self._addCaseMapping(501,500)
        self._addCaseMapping(507,506)
        self._addCaseMapping(509,508)
        self._addCaseMapping(511,510)
        self._addCaseMapping(513,512)
        self._addCaseMapping(515,514)
        self._addCaseMapping(517,516)
        self._addCaseMapping(519,518)
        self._addCaseMapping(521,520)
        self._addCaseMapping(523,522)
        self._addCaseMapping(525,524)
        self._addCaseMapping(527,526)
        self._addCaseMapping(529,528)
        self._addCaseMapping(531,530)
        self._addCaseMapping(533,532)
        self._addCaseMapping(535,534)
        self._addCaseMapping(595,385)
        self._addCaseMapping(596,390)
        self._addCaseMapping(599,394)
        self._addCaseMapping(600,398)
        self._addCaseMapping(601,399)
        self._addCaseMapping(603,400)
        self._addCaseMapping(608,403)
        self._addCaseMapping(611,404)
        self._addCaseMapping(616,407)
        self._addCaseMapping(617,406)
        self._addCaseMapping(623,412)
        self._addCaseMapping(626,413)
        self._addCaseMapping(629,415)
        self._addCaseMapping(643,425)
        self._addCaseMapping(648,430)
        self._addCaseMapping(650,433)
        self._addCaseMapping(651,434)
        self._addCaseMapping(658,439)
        self._addCaseMapping(924,181)
        self._addCaseMapping(940,902)
        self._addCaseMapping(941,904)
        self._addCaseMapping(942,905)
        self._addCaseMapping(943,906)
        self._addCaseMapping(945,913)
        self._addCaseMapping(946,914)
        self._addCaseMapping(947,915)
        self._addCaseMapping(948,916)
        self._addCaseMapping(949,917)
        self._addCaseMapping(950,918)
        self._addCaseMapping(951,919)
        self._addCaseMapping(952,920)
        self._addCaseMapping(953,921)
        self._addCaseMapping(954,922)
        self._addCaseMapping(955,923)
        self._addCaseMapping(956,924)
        self._addCaseMapping(957,925)
        self._addCaseMapping(958,926)
        self._addCaseMapping(959,927)
        self._addCaseMapping(960,928)
        self._addCaseMapping(961,929)
        self._addCaseMapping(963,931)
        self._addCaseMapping(964,932)
        self._addCaseMapping(965,933)
        self._addCaseMapping(966,934)
        self._addCaseMapping(967,935)
        self._addCaseMapping(968,936)
        self._addCaseMapping(969,937)
        self._addCaseMapping(970,938)
        self._addCaseMapping(971,939)
        self._addCaseMapping(972,908)
        self._addCaseMapping(973,910)
        self._addCaseMapping(974,911)
        self._addCaseMapping(995,994)
        self._addCaseMapping(997,996)
        self._addCaseMapping(999,998)
        self._addCaseMapping(1001,1000)
        self._addCaseMapping(1003,1002)
        self._addCaseMapping(1005,1004)
        self._addCaseMapping(1007,1006)
        self._addCaseMapping(1072,1040)
        self._addCaseMapping(1073,1041)
        self._addCaseMapping(1074,1042)
        self._addCaseMapping(1075,1043)
        self._addCaseMapping(1076,1044)
        self._addCaseMapping(1077,1045)
        self._addCaseMapping(1078,1046)
        self._addCaseMapping(1079,1047)
        self._addCaseMapping(1080,1048)
        self._addCaseMapping(1081,1049)
        self._addCaseMapping(1082,1050)
        self._addCaseMapping(1083,1051)
        self._addCaseMapping(1084,1052)
        self._addCaseMapping(1085,1053)
        self._addCaseMapping(1086,1054)
        self._addCaseMapping(1087,1055)
        self._addCaseMapping(1088,1056)
        self._addCaseMapping(1089,1057)
        self._addCaseMapping(1090,1058)
        self._addCaseMapping(1091,1059)
        self._addCaseMapping(1092,1060)
        self._addCaseMapping(1093,1061)
        self._addCaseMapping(1094,1062)
        self._addCaseMapping(1095,1063)
        self._addCaseMapping(1096,1064)
        self._addCaseMapping(1097,1065)
        self._addCaseMapping(1098,1066)
        self._addCaseMapping(1099,1067)
        self._addCaseMapping(1100,1068)
        self._addCaseMapping(1101,1069)
        self._addCaseMapping(1102,1070)
        self._addCaseMapping(1103,1071)
        self._addCaseMapping(1105,1025)
        self._addCaseMapping(1106,1026)
        self._addCaseMapping(1107,1027)
        self._addCaseMapping(1108,1028)
        self._addCaseMapping(1109,1029)
        self._addCaseMapping(1110,1030)
        self._addCaseMapping(1111,1031)
        self._addCaseMapping(1112,1032)
        self._addCaseMapping(1113,1033)
        self._addCaseMapping(1114,1034)
        self._addCaseMapping(1115,1035)
        self._addCaseMapping(1116,1036)
        self._addCaseMapping(1118,1038)
        self._addCaseMapping(1119,1039)
        self._addCaseMapping(1121,1120)
        self._addCaseMapping(1123,1122)
        self._addCaseMapping(1125,1124)
        self._addCaseMapping(1127,1126)
        self._addCaseMapping(1129,1128)
        self._addCaseMapping(1131,1130)
        self._addCaseMapping(1133,1132)
        self._addCaseMapping(1135,1134)
        self._addCaseMapping(1137,1136)
        self._addCaseMapping(1139,1138)
        self._addCaseMapping(1141,1140)
        self._addCaseMapping(1143,1142)
        self._addCaseMapping(1145,1144)
        self._addCaseMapping(1147,1146)
        self._addCaseMapping(1149,1148)
        self._addCaseMapping(1151,1150)
        self._addCaseMapping(1153,1152)
        self._addCaseMapping(1169,1168)
        self._addCaseMapping(1171,1170)
        self._addCaseMapping(1173,1172)
        self._addCaseMapping(1175,1174)
        self._addCaseMapping(1177,1176)
        self._addCaseMapping(1179,1178)
        self._addCaseMapping(1181,1180)
        self._addCaseMapping(1183,1182)
        self._addCaseMapping(1185,1184)
        self._addCaseMapping(1187,1186)
        self._addCaseMapping(1189,1188)
        self._addCaseMapping(1191,1190)
        self._addCaseMapping(1193,1192)
        self._addCaseMapping(1195,1194)
        self._addCaseMapping(1197,1196)
        self._addCaseMapping(1199,1198)
        self._addCaseMapping(1201,1200)
        self._addCaseMapping(1203,1202)
        self._addCaseMapping(1205,1204)
        self._addCaseMapping(1207,1206)
        self._addCaseMapping(1209,1208)
        self._addCaseMapping(1211,1210)
        self._addCaseMapping(1213,1212)
        self._addCaseMapping(1215,1214)
        self._addCaseMapping(1218,1217)
        self._addCaseMapping(1220,1219)
        self._addCaseMapping(1224,1223)
        self._addCaseMapping(1228,1227)
        self._addCaseMapping(1233,1232)
        self._addCaseMapping(1235,1234)
        self._addCaseMapping(1237,1236)
        self._addCaseMapping(1239,1238)
        self._addCaseMapping(1241,1240)
        self._addCaseMapping(1243,1242)
        self._addCaseMapping(1245,1244)
        self._addCaseMapping(1247,1246)
        self._addCaseMapping(1249,1248)
        self._addCaseMapping(1251,1250)
        self._addCaseMapping(1253,1252)
        self._addCaseMapping(1255,1254)
        self._addCaseMapping(1257,1256)
        self._addCaseMapping(1259,1258)
        self._addCaseMapping(1263,1262)
        self._addCaseMapping(1265,1264)
        self._addCaseMapping(1267,1266)
        self._addCaseMapping(1269,1268)
        self._addCaseMapping(1273,1272)
        self._addCaseMapping(1377,1329)
        self._addCaseMapping(1378,1330)
        self._addCaseMapping(1379,1331)
        self._addCaseMapping(1380,1332)
        self._addCaseMapping(1381,1333)
        self._addCaseMapping(1382,1334)
        self._addCaseMapping(1383,1335)
        self._addCaseMapping(1384,1336)
        self._addCaseMapping(1385,1337)
        self._addCaseMapping(1386,1338)
        self._addCaseMapping(1387,1339)
        self._addCaseMapping(1388,1340)
        self._addCaseMapping(1389,1341)
        self._addCaseMapping(1390,1342)
        self._addCaseMapping(1391,1343)
        self._addCaseMapping(1392,1344)
        self._addCaseMapping(1393,1345)
        self._addCaseMapping(1394,1346)
        self._addCaseMapping(1395,1347)
        self._addCaseMapping(1396,1348)
        self._addCaseMapping(1397,1349)
        self._addCaseMapping(1398,1350)
        self._addCaseMapping(1399,1351)
        self._addCaseMapping(1400,1352)
        self._addCaseMapping(1401,1353)
        self._addCaseMapping(1402,1354)
        self._addCaseMapping(1403,1355)
        self._addCaseMapping(1404,1356)
        self._addCaseMapping(1405,1357)
        self._addCaseMapping(1406,1358)
        self._addCaseMapping(1407,1359)
        self._addCaseMapping(1408,1360)
        self._addCaseMapping(1409,1361)
        self._addCaseMapping(1410,1362)
        self._addCaseMapping(1411,1363)
        self._addCaseMapping(1412,1364)
        self._addCaseMapping(1413,1365)
        self._addCaseMapping(1414,1366)
        self._addCaseMapping(4304,4256)
        self._addCaseMapping(4305,4257)
        self._addCaseMapping(4306,4258)
        self._addCaseMapping(4307,4259)
        self._addCaseMapping(4308,4260)
        self._addCaseMapping(4309,4261)
        self._addCaseMapping(4310,4262)
        self._addCaseMapping(4311,4263)
        self._addCaseMapping(4312,4264)
        self._addCaseMapping(4313,4265)
        self._addCaseMapping(4314,4266)
        self._addCaseMapping(4315,4267)
        self._addCaseMapping(4316,4268)
        self._addCaseMapping(4317,4269)
        self._addCaseMapping(4318,4270)
        self._addCaseMapping(4319,4271)
        self._addCaseMapping(4320,4272)
        self._addCaseMapping(4321,4273)
        self._addCaseMapping(4322,4274)
        self._addCaseMapping(4323,4275)
        self._addCaseMapping(4324,4276)
        self._addCaseMapping(4325,4277)
        self._addCaseMapping(4326,4278)
        self._addCaseMapping(4327,4279)
        self._addCaseMapping(4328,4280)
        self._addCaseMapping(4329,4281)
        self._addCaseMapping(4330,4282)
        self._addCaseMapping(4331,4283)
        self._addCaseMapping(4332,4284)
        self._addCaseMapping(4333,4285)
        self._addCaseMapping(4334,4286)
        self._addCaseMapping(4335,4287)
        self._addCaseMapping(4336,4288)
        self._addCaseMapping(4337,4289)
        self._addCaseMapping(4338,4290)
        self._addCaseMapping(4339,4291)
        self._addCaseMapping(4340,4292)
        self._addCaseMapping(4341,4293)
        self._addCaseMapping(7681,7680)
        self._addCaseMapping(7683,7682)
        self._addCaseMapping(7685,7684)
        self._addCaseMapping(7687,7686)
        self._addCaseMapping(7689,7688)
        self._addCaseMapping(7691,7690)
        self._addCaseMapping(7693,7692)
        self._addCaseMapping(7695,7694)
        self._addCaseMapping(7697,7696)
        self._addCaseMapping(7699,7698)
        self._addCaseMapping(7701,7700)
        self._addCaseMapping(7703,7702)
        self._addCaseMapping(7705,7704)
        self._addCaseMapping(7707,7706)
        self._addCaseMapping(7709,7708)
        self._addCaseMapping(7711,7710)
        self._addCaseMapping(7713,7712)
        self._addCaseMapping(7715,7714)
        self._addCaseMapping(7717,7716)
        self._addCaseMapping(7719,7718)
        self._addCaseMapping(7721,7720)
        self._addCaseMapping(7723,7722)
        self._addCaseMapping(7725,7724)
        self._addCaseMapping(7727,7726)
        self._addCaseMapping(7729,7728)
        self._addCaseMapping(7731,7730)
        self._addCaseMapping(7733,7732)
        self._addCaseMapping(7735,7734)
        self._addCaseMapping(7737,7736)
        self._addCaseMapping(7739,7738)
        self._addCaseMapping(7741,7740)
        self._addCaseMapping(7743,7742)
        self._addCaseMapping(7745,7744)
        self._addCaseMapping(7747,7746)
        self._addCaseMapping(7749,7748)
        self._addCaseMapping(7751,7750)
        self._addCaseMapping(7753,7752)
        self._addCaseMapping(7755,7754)
        self._addCaseMapping(7757,7756)
        self._addCaseMapping(7759,7758)
        self._addCaseMapping(7761,7760)
        self._addCaseMapping(7763,7762)
        self._addCaseMapping(7765,7764)
        self._addCaseMapping(7767,7766)
        self._addCaseMapping(7769,7768)
        self._addCaseMapping(7771,7770)
        self._addCaseMapping(7773,7772)
        self._addCaseMapping(7775,7774)
        self._addCaseMapping(7777,7776)
        self._addCaseMapping(7779,7778)
        self._addCaseMapping(7781,7780)
        self._addCaseMapping(7783,7782)
        self._addCaseMapping(7785,7784)
        self._addCaseMapping(7787,7786)
        self._addCaseMapping(7789,7788)
        self._addCaseMapping(7791,7790)
        self._addCaseMapping(7793,7792)
        self._addCaseMapping(7795,7794)
        self._addCaseMapping(7797,7796)
        self._addCaseMapping(7799,7798)
        self._addCaseMapping(7801,7800)
        self._addCaseMapping(7803,7802)
        self._addCaseMapping(7805,7804)
        self._addCaseMapping(7807,7806)
        self._addCaseMapping(7809,7808)
        self._addCaseMapping(7811,7810)
        self._addCaseMapping(7813,7812)
        self._addCaseMapping(7815,7814)
        self._addCaseMapping(7817,7816)
        self._addCaseMapping(7819,7818)
        self._addCaseMapping(7821,7820)
        self._addCaseMapping(7823,7822)
        self._addCaseMapping(7825,7824)
        self._addCaseMapping(7827,7826)
        self._addCaseMapping(7829,7828)
        self._addCaseMapping(7841,7840)
        self._addCaseMapping(7843,7842)
        self._addCaseMapping(7845,7844)
        self._addCaseMapping(7847,7846)
        self._addCaseMapping(7849,7848)
        self._addCaseMapping(7851,7850)
        self._addCaseMapping(7853,7852)
        self._addCaseMapping(7855,7854)
        self._addCaseMapping(7857,7856)
        self._addCaseMapping(7859,7858)
        self._addCaseMapping(7861,7860)
        self._addCaseMapping(7863,7862)
        self._addCaseMapping(7865,7864)
        self._addCaseMapping(7867,7866)
        self._addCaseMapping(7869,7868)
        self._addCaseMapping(7871,7870)
        self._addCaseMapping(7873,7872)
        self._addCaseMapping(7875,7874)
        self._addCaseMapping(7877,7876)
        self._addCaseMapping(7879,7878)
        self._addCaseMapping(7881,7880)
        self._addCaseMapping(7883,7882)
        self._addCaseMapping(7885,7884)
        self._addCaseMapping(7887,7886)
        self._addCaseMapping(7889,7888)
        self._addCaseMapping(7891,7890)
        self._addCaseMapping(7893,7892)
        self._addCaseMapping(7895,7894)
        self._addCaseMapping(7897,7896)
        self._addCaseMapping(7899,7898)
        self._addCaseMapping(7901,7900)
        self._addCaseMapping(7903,7902)
        self._addCaseMapping(7905,7904)
        self._addCaseMapping(7907,7906)
        self._addCaseMapping(7909,7908)
        self._addCaseMapping(7911,7910)
        self._addCaseMapping(7913,7912)
        self._addCaseMapping(7915,7914)
        self._addCaseMapping(7917,7916)
        self._addCaseMapping(7919,7918)
        self._addCaseMapping(7921,7920)
        self._addCaseMapping(7923,7922)
        self._addCaseMapping(7925,7924)
        self._addCaseMapping(7927,7926)
        self._addCaseMapping(7929,7928)
        self._addCaseMapping(7936,7944)
        self._addCaseMapping(7937,7945)
        self._addCaseMapping(7938,7946)
        self._addCaseMapping(7939,7947)
        self._addCaseMapping(7940,7948)
        self._addCaseMapping(7941,7949)
        self._addCaseMapping(7942,7950)
        self._addCaseMapping(7943,7951)
        self._addCaseMapping(7952,7960)
        self._addCaseMapping(7953,7961)
        self._addCaseMapping(7954,7962)
        self._addCaseMapping(7955,7963)
        self._addCaseMapping(7956,7964)
        self._addCaseMapping(7957,7965)
        self._addCaseMapping(7968,7976)
        self._addCaseMapping(7969,7977)
        self._addCaseMapping(7970,7978)
        self._addCaseMapping(7971,7979)
        self._addCaseMapping(7972,7980)
        self._addCaseMapping(7973,7981)
        self._addCaseMapping(7974,7982)
        self._addCaseMapping(7975,7983)
        self._addCaseMapping(7984,7992)
        self._addCaseMapping(7985,7993)
        self._addCaseMapping(7986,7994)
        self._addCaseMapping(7987,7995)
        self._addCaseMapping(7988,7996)
        self._addCaseMapping(7989,7997)
        self._addCaseMapping(7990,7998)
        self._addCaseMapping(7991,7999)
        self._addCaseMapping(8000,8008)
        self._addCaseMapping(8001,8009)
        self._addCaseMapping(8002,8010)
        self._addCaseMapping(8003,8011)
        self._addCaseMapping(8004,8012)
        self._addCaseMapping(8005,8013)
        self._addCaseMapping(8017,8025)
        self._addCaseMapping(8019,8027)
        self._addCaseMapping(8021,8029)
        self._addCaseMapping(8023,8031)
        self._addCaseMapping(8032,8040)
        self._addCaseMapping(8033,8041)
        self._addCaseMapping(8034,8042)
        self._addCaseMapping(8035,8043)
        self._addCaseMapping(8036,8044)
        self._addCaseMapping(8037,8045)
        self._addCaseMapping(8038,8046)
        self._addCaseMapping(8039,8047)
        self._addCaseMapping(8064,8072)
        self._addCaseMapping(8065,8073)
        self._addCaseMapping(8066,8074)
        self._addCaseMapping(8067,8075)
        self._addCaseMapping(8068,8076)
        self._addCaseMapping(8069,8077)
        self._addCaseMapping(8070,8078)
        self._addCaseMapping(8071,8079)
        self._addCaseMapping(8080,8088)
        self._addCaseMapping(8081,8089)
        self._addCaseMapping(8082,8090)
        self._addCaseMapping(8083,8091)
        self._addCaseMapping(8084,8092)
        self._addCaseMapping(8085,8093)
        self._addCaseMapping(8086,8094)
        self._addCaseMapping(8087,8095)
        self._addCaseMapping(8096,8104)
        self._addCaseMapping(8097,8105)
        self._addCaseMapping(8098,8106)
        self._addCaseMapping(8099,8107)
        self._addCaseMapping(8100,8108)
        self._addCaseMapping(8101,8109)
        self._addCaseMapping(8102,8110)
        self._addCaseMapping(8103,8111)
        self._addCaseMapping(8112,8120)
        self._addCaseMapping(8113,8121)
        self._addCaseMapping(8144,8152)
        self._addCaseMapping(8145,8153)
        self._addCaseMapping(8160,8168)
        self._addCaseMapping(8161,8169)
        self._addCaseMapping(9424,9398)
        self._addCaseMapping(9425,9399)
        self._addCaseMapping(9426,9400)
        self._addCaseMapping(9427,9401)
        self._addCaseMapping(9428,9402)
        self._addCaseMapping(9429,9403)
        self._addCaseMapping(9430,9404)
        self._addCaseMapping(9431,9405)
        self._addCaseMapping(9432,9406)
        self._addCaseMapping(9433,9407)
        self._addCaseMapping(9434,9408)
        self._addCaseMapping(9435,9409)
        self._addCaseMapping(9436,9410)
        self._addCaseMapping(9437,9411)
        self._addCaseMapping(9438,9412)
        self._addCaseMapping(9439,9413)
        self._addCaseMapping(9440,9414)
        self._addCaseMapping(9441,9415)
        self._addCaseMapping(9442,9416)
        self._addCaseMapping(9443,9417)
        self._addCaseMapping(9444,9418)
        self._addCaseMapping(9445,9419)
        self._addCaseMapping(9446,9420)
        self._addCaseMapping(9447,9421)
        self._addCaseMapping(9448,9422)
        self._addCaseMapping(9449,9423)
        self._addCaseMapping(65345,65313)
        self._addCaseMapping(65346,65314)
        self._addCaseMapping(65347,65315)
        self._addCaseMapping(65348,65316)
        self._addCaseMapping(65349,65317)
        self._addCaseMapping(65350,65318)
        self._addCaseMapping(65351,65319)
        self._addCaseMapping(65352,65320)
        self._addCaseMapping(65353,65321)
        self._addCaseMapping(65354,65322)
        self._addCaseMapping(65355,65323)
        self._addCaseMapping(65356,65324)
        self._addCaseMapping(65357,65325)
        self._addCaseMapping(65358,65326)
        self._addCaseMapping(65359,65327)
        self._addCaseMapping(65360,65328)
        self._addCaseMapping(65361,65329)
        self._addCaseMapping(65362,65330)
        self._addCaseMapping(65363,65331)
        self._addCaseMapping(65364,65332)
        self._addCaseMapping(65365,65333)
        self._addCaseMapping(65366,65334)
        self._addCaseMapping(65367,65335)
        self._addCaseMapping(65368,65336)
        self._addCaseMapping(65369,65337)
        self._addCaseMapping(65370,65338)

    def _addCaseMapping(self,lowerChar,upperChar):
        if (not (upperChar in self.mapU2L.h)):
            self.mapU2L.set(upperChar,lowerChar)
        if (not (lowerChar in self.mapL2U.h)):
            self.mapL2U.set(lowerChar,upperChar)

    def isLowerCase(self,ch):
        return (ch in self.mapL2U.h)

    def isUpperCase(self,ch):
        return (ch in self.mapU2L.h)

    def toLowerCase(self,ch):
        lowerChar = self.mapU2L.h.get(ch,None)
        if (lowerChar is None):
            return ch
        else:
            return lowerChar

    def toUpperCase(self,ch):
        upperChar = self.mapL2U.h.get(ch,None)
        if (upperChar is None):
            return ch
        else:
            return upperChar

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.mapU2L = None
        _hx_o.mapL2U = None
hx_strings__Char_CharCaseMapper._hx_class = hx_strings__Char_CharCaseMapper
_hx_classes["hx.strings._Char.CharCaseMapper"] = hx_strings__Char_CharCaseMapper


class hx_strings__Char_Char_Impl_:
    _hx_class_name = "hx.strings._Char.Char_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["CHAR_CASE_MAPPER", "BACKSPACE", "TAB", "LF", "CR", "ESC", "SPACE", "EXCLAMATION_MARK", "DOUBLE_QUOTE", "HASH", "DOLLAR", "AMPERSAND", "SINGLE_QUOTE", "BRACKET_ROUND_LEFT", "BRACKET_ROUND_RIGHT", "ASTERISK", "PLUS", "COMMA", "MINUS", "DOT", "SLASH", "ZERO", "ONE", "TWO", "TRHEE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "COLON", "SEMICOLON", "LOWER_THAN", "EQUALS", "GREATER_THAN", "QUESTION_MARK", "BRACKET_SQUARE_LEFT", "BACKSLASH", "BRACKET_SQUARE_RIGHT", "CARET", "UNDERSCORE", "BRACKET_CURLY_LEFT", "PIPE", "BRACKET_CURLY_RIGHT", "fromString", "of", "op_plus_string", "op_plus_string2", "op_plus", "isAscii", "isAsciiAlpha", "isAsciiAlphanumeric", "isAsciiControl", "isAsciiPrintable", "isDigit", "isEOF", "isSpace", "isUTF8", "isWhitespace", "isLowerCase", "isUpperCase", "toLowerCase", "toUpperCase", "toInt", "toString"]

    @staticmethod
    def fromString(_hx_str):
        return hx_strings_Strings.charCodeAt8(_hx_str,0)

    @staticmethod
    def of(ch):
        return ch

    @staticmethod
    def op_plus_string(ch,other):
        return (HxOverrides.stringOrNull("".join(map(chr,[ch]))) + ("null" if other is None else other))

    @staticmethod
    def op_plus_string2(_hx_str,ch):
        return (("null" if _hx_str is None else _hx_str) + HxOverrides.stringOrNull("".join(map(chr,[ch]))))

    @staticmethod
    def op_plus(ch,other):
        return (ch + other)

    @staticmethod
    def isAscii(this1):
        if (this1 > -1):
            return (this1 < 128)
        else:
            return False

    @staticmethod
    def isAsciiAlpha(this1):
        if (not (((this1 > 64) and ((this1 < 91))))):
            if (this1 > 96):
                return (this1 < 123)
            else:
                return False
        else:
            return True

    @staticmethod
    def isAsciiAlphanumeric(this1):
        if (not ((((this1 > 64) and ((this1 < 91))) or (((this1 > 96) and ((this1 < 123))))))):
            if (this1 > 47):
                return (this1 < 58)
            else:
                return False
        else:
            return True

    @staticmethod
    def isAsciiControl(this1):
        if (not (((this1 > -1) and ((this1 < 32))))):
            return (this1 == 127)
        else:
            return True

    @staticmethod
    def isAsciiPrintable(this1):
        if (this1 > 31):
            return (this1 < 127)
        else:
            return False

    @staticmethod
    def isDigit(this1):
        if (this1 > 47):
            return (this1 < 58)
        else:
            return False

    @staticmethod
    def isEOF(this1):
        return (this1 == -1)

    @staticmethod
    def isSpace(this1):
        return (this1 == 32)

    @staticmethod
    def isUTF8(this1):
        if (this1 > -1):
            return (this1 < 1114112)
        else:
            return False

    @staticmethod
    def isWhitespace(this1):
        if (not (((this1 > 8) and ((this1 < 14))))):
            return (this1 == 32)
        else:
            return True

    @staticmethod
    def isLowerCase(this1):
        return (this1 in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapL2U.h)

    @staticmethod
    def isUpperCase(this1):
        return (this1 in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h)

    @staticmethod
    def toLowerCase(this1):
        lowerChar = hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h.get(this1,None)
        if (lowerChar is None):
            return this1
        else:
            return lowerChar

    @staticmethod
    def toUpperCase(this1):
        upperChar = hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapL2U.h.get(this1,None)
        if (upperChar is None):
            return this1
        else:
            return upperChar

    @staticmethod
    def toInt(this1):
        return this1

    @staticmethod
    def toString(this1):
        return "".join(map(chr,[this1]))
hx_strings__Char_Char_Impl_._hx_class = hx_strings__Char_Char_Impl_
_hx_classes["hx.strings._Char.Char_Impl_"] = hx_strings__Char_Char_Impl_


class hx_strings_CharIterator:
    _hx_class_name = "hx.strings.CharIterator"
    _hx_is_interface = "False"
    __slots__ = ("index", "line", "col", "currChar", "prevBuffer", "prevBufferPrevIdx", "prevBufferNextIdx")
    _hx_fields = ["index", "line", "col", "currChar", "prevBuffer", "prevBufferPrevIdx", "prevBufferNextIdx"]
    _hx_methods = ["get_current", "get_pos", "hasPrev", "prev", "hasNext", "next", "getChar", "isEOF"]
    _hx_statics = ["fromString", "fromArray", "fromInput", "fromIterator"]

    def __init__(self,prevBufferSize):
        self.prevBufferNextIdx = -1
        self.prevBufferPrevIdx = -1
        self.currChar = -1
        self.col = 0
        self.line = 0
        self.index = -1
        self.prevBuffer = (hx_strings_internal__RingBuffer_RingBufferImpl((prevBufferSize + 1)) if ((prevBufferSize > 0)) else None)

    def get_current(self):
        if (self.index > -1):
            return self.currChar
        else:
            return None

    def get_pos(self):
        return hx_strings_CharPos(self.index,self.line,self.col)

    def hasPrev(self):
        return (self.prevBufferPrevIdx > -1)

    def prev(self):
        if (self.prevBufferPrevIdx <= -1):
            raise haxe_Exception.thrown(haxe_io_Eof())
        prevChar = self.prevBuffer.get(self.prevBufferPrevIdx)
        self.currChar = prevChar.char
        self.index = prevChar.index
        self.line = prevChar.line
        self.col = prevChar.col
        self.prevBufferNextIdx = ((self.prevBufferPrevIdx + 1) if (((self.prevBufferPrevIdx + 1) < self.prevBuffer.length)) else -1)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.prevBufferPrevIdx
        _hx_local_0.prevBufferPrevIdx = (_hx_local_1 - 1)
        _hx_local_1
        return self.currChar

    def hasNext(self):
        if (self.prevBufferNextIdx > -1):
            return True
        else:
            return (not self.isEOF())

    def next(self):
        if (self.prevBufferNextIdx > -1):
            prevChar = self.prevBuffer.get(self.prevBufferNextIdx)
            self.currChar = prevChar.char
            self.index = prevChar.index
            self.line = prevChar.line
            self.col = prevChar.col
            self.prevBufferPrevIdx = (self.prevBufferNextIdx - 1)
            self.prevBufferNextIdx = ((self.prevBufferNextIdx + 1) if (((self.prevBufferNextIdx + 1) < self.prevBuffer.length)) else -1)
            return self.currChar
        if self.isEOF():
            raise haxe_Exception.thrown(haxe_io_Eof())
        if ((self.currChar == 10) or ((self.currChar < 0))):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.line
            _hx_local_0.line = (_hx_local_1 + 1)
            _hx_local_1
            self.col = 0
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.index
        _hx_local_2.index = (_hx_local_3 + 1)
        _hx_local_3
        _hx_local_4 = self
        _hx_local_5 = _hx_local_4.col
        _hx_local_4.col = (_hx_local_5 + 1)
        _hx_local_5
        self.currChar = self.getChar()
        if (self.prevBuffer is not None):
            self.prevBuffer.add(hx_strings__CharIterator_CharWithPos(self.currChar,self.index,self.col,self.line))
            self.prevBufferPrevIdx = (self.prevBuffer.length - 2)
            self.prevBufferNextIdx = -1
        return self.currChar

    def getChar(self):
        raise haxe_Exception.thrown("Not implemented")

    def isEOF(self):
        raise haxe_Exception.thrown("Not implemented")

    @staticmethod
    def fromString(chars,prevBufferSize = None):
        if (prevBufferSize is None):
            prevBufferSize = 0
        if (chars is None):
            return hx_strings__CharIterator_NullCharIterator.INSTANCE
        return hx_strings__CharIterator_StringCharIterator(chars,prevBufferSize)

    @staticmethod
    def fromArray(chars,prevBufferSize = None):
        if (prevBufferSize is None):
            prevBufferSize = 0
        if (chars is None):
            return hx_strings__CharIterator_NullCharIterator.INSTANCE
        return hx_strings__CharIterator_ArrayCharIterator(chars,prevBufferSize)

    @staticmethod
    def fromInput(chars,prevBufferSize = None):
        if (prevBufferSize is None):
            prevBufferSize = 0
        if (chars is None):
            return hx_strings__CharIterator_NullCharIterator.INSTANCE
        return hx_strings__CharIterator_InputCharIterator(chars,prevBufferSize)

    @staticmethod
    def fromIterator(chars,prevBufferSize = None):
        if (prevBufferSize is None):
            prevBufferSize = 0
        if (chars is None):
            return hx_strings__CharIterator_NullCharIterator.INSTANCE
        return hx_strings__CharIterator_IteratorCharIterator(chars,prevBufferSize)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.index = None
        _hx_o.line = None
        _hx_o.col = None
        _hx_o.currChar = None
        _hx_o.prevBuffer = None
        _hx_o.prevBufferPrevIdx = None
        _hx_o.prevBufferNextIdx = None
hx_strings_CharIterator._hx_class = hx_strings_CharIterator
_hx_classes["hx.strings.CharIterator"] = hx_strings_CharIterator


class hx_strings_CharPos:
    _hx_class_name = "hx.strings.CharPos"
    _hx_is_interface = "False"
    __slots__ = ("index", "line", "col")
    _hx_fields = ["index", "line", "col"]
    _hx_methods = ["toString"]

    def __init__(self,index,line,col):
        self.index = index
        self.line = line
        self.col = col

    def toString(self):
        return (((((("CharPos[index=" + Std.string(self.index)) + ", line=") + Std.string(self.line)) + ", col=") + Std.string(self.col)) + "]")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.index = None
        _hx_o.line = None
        _hx_o.col = None
hx_strings_CharPos._hx_class = hx_strings_CharPos
_hx_classes["hx.strings.CharPos"] = hx_strings_CharPos


class hx_strings__CharIterator_CharWithPos(hx_strings_CharPos):
    _hx_class_name = "hx.strings._CharIterator.CharWithPos"
    _hx_is_interface = "False"
    __slots__ = ("char",)
    _hx_fields = ["char"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hx_strings_CharPos


    def __init__(self,char,index,line,col):
        self.char = None
        super().__init__(index,line,col)
        self.char = char

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.char = None
hx_strings__CharIterator_CharWithPos._hx_class = hx_strings__CharIterator_CharWithPos
_hx_classes["hx.strings._CharIterator.CharWithPos"] = hx_strings__CharIterator_CharWithPos


class hx_strings_internal__RingBuffer_RingBufferImpl:
    _hx_class_name = "hx.strings.internal._RingBuffer.RingBufferImpl"
    _hx_is_interface = "False"
    __slots__ = ("buffer", "bufferStartIdx", "bufferEndIdx", "bufferMaxIdx", "length", "size")
    _hx_fields = ["buffer", "bufferStartIdx", "bufferEndIdx", "bufferMaxIdx", "length", "size"]
    _hx_methods = ["add", "get", "iterator", "toArray"]

    def __init__(self,size):
        self.length = 0
        self.bufferEndIdx = -1
        self.bufferStartIdx = 0
        if (size < 1):
            raise haxe_Exception.thrown("[size] must be > 0")
        self.buffer = ([None]*size)
        self.size = size
        self.bufferMaxIdx = (size - 1)

    def add(self,item):
        if (self.length == self.size):
            self.bufferEndIdx = self.bufferStartIdx
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.bufferStartIdx
            _hx_local_0.bufferStartIdx = (_hx_local_1 + 1)
            _hx_local_1
            if (self.bufferStartIdx > self.bufferMaxIdx):
                self.bufferStartIdx = 0
        else:
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.bufferEndIdx
            _hx_local_2.bufferEndIdx = (_hx_local_3 + 1)
            _hx_local_3
            _hx_local_4 = self
            _hx_local_5 = _hx_local_4.length
            _hx_local_4.length = (_hx_local_5 + 1)
            _hx_local_5
        self.buffer[self.bufferEndIdx] = item

    def get(self,index):
        if ((index < 0) or ((index > self.bufferMaxIdx))):
            raise haxe_Exception.thrown((("[index] " + Std.string(index)) + " is out of bound"))
        realIdx = (self.bufferStartIdx + index)
        if (realIdx > self.bufferMaxIdx):
            realIdx = (realIdx - self.length)
        return self.buffer[realIdx]

    def iterator(self):
        return hx_strings_internal__RingBuffer_RingBufferIterator(self)

    def toArray(self):
        arr = list()
        i = self.iterator()
        while i.hasNext():
            i1 = i.next()
            arr.append(i1)
        return arr

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buffer = None
        _hx_o.bufferStartIdx = None
        _hx_o.bufferEndIdx = None
        _hx_o.bufferMaxIdx = None
        _hx_o.length = None
        _hx_o.size = None
hx_strings_internal__RingBuffer_RingBufferImpl._hx_class = hx_strings_internal__RingBuffer_RingBufferImpl
_hx_classes["hx.strings.internal._RingBuffer.RingBufferImpl"] = hx_strings_internal__RingBuffer_RingBufferImpl


class hx_strings__CharIterator_NullCharIterator(hx_strings_CharIterator):
    _hx_class_name = "hx.strings._CharIterator.NullCharIterator"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["isEOF"]
    _hx_statics = ["INSTANCE"]
    _hx_interfaces = []
    _hx_super = hx_strings_CharIterator


    def __init__(self):
        super().__init__(0)

    def isEOF(self):
        return True

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
hx_strings__CharIterator_NullCharIterator._hx_class = hx_strings__CharIterator_NullCharIterator
_hx_classes["hx.strings._CharIterator.NullCharIterator"] = hx_strings__CharIterator_NullCharIterator


class hx_strings__CharIterator_ArrayCharIterator(hx_strings_CharIterator):
    _hx_class_name = "hx.strings._CharIterator.ArrayCharIterator"
    _hx_is_interface = "False"
    __slots__ = ("chars", "charsMaxIndex")
    _hx_fields = ["chars", "charsMaxIndex"]
    _hx_methods = ["isEOF", "getChar"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hx_strings_CharIterator


    def __init__(self,chars,prevBufferSize):
        self.charsMaxIndex = None
        self.chars = None
        super().__init__(prevBufferSize)
        self.chars = chars
        self.charsMaxIndex = (len(chars) - 1)

    def isEOF(self):
        return (self.index >= self.charsMaxIndex)

    def getChar(self):
        return python_internal_ArrayImpl._get(self.chars, self.index)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.chars = None
        _hx_o.charsMaxIndex = None
hx_strings__CharIterator_ArrayCharIterator._hx_class = hx_strings__CharIterator_ArrayCharIterator
_hx_classes["hx.strings._CharIterator.ArrayCharIterator"] = hx_strings__CharIterator_ArrayCharIterator


class hx_strings__CharIterator_IteratorCharIterator(hx_strings_CharIterator):
    _hx_class_name = "hx.strings._CharIterator.IteratorCharIterator"
    _hx_is_interface = "False"
    __slots__ = ("chars",)
    _hx_fields = ["chars"]
    _hx_methods = ["isEOF", "getChar"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hx_strings_CharIterator


    def __init__(self,chars,prevBufferSize):
        self.chars = None
        super().__init__(prevBufferSize)
        self.chars = chars

    def isEOF(self):
        return (not self.chars.hasNext())

    def getChar(self):
        return self.chars.next()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.chars = None
hx_strings__CharIterator_IteratorCharIterator._hx_class = hx_strings__CharIterator_IteratorCharIterator
_hx_classes["hx.strings._CharIterator.IteratorCharIterator"] = hx_strings__CharIterator_IteratorCharIterator


class hx_strings__CharIterator_InputCharIterator(hx_strings_CharIterator):
    _hx_class_name = "hx.strings._CharIterator.InputCharIterator"
    _hx_is_interface = "False"
    __slots__ = ("byteIndex", "input", "currCharIndex", "nextChar", "nextCharAvailable")
    _hx_fields = ["byteIndex", "input", "currCharIndex", "nextChar", "nextCharAvailable"]
    _hx_methods = ["isEOF", "getChar", "readUtf8Char", "readUtf8MultiSequenceByte"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hx_strings_CharIterator


    def __init__(self,chars,prevBufferSize):
        self.input = None
        self.nextCharAvailable = None
        self.nextChar = -1
        self.currCharIndex = -1
        self.byteIndex = 0
        super().__init__(prevBufferSize)
        self.input = chars

    def isEOF(self):
        if (self.nextCharAvailable == None):
            try:
                byte1 = self.input.readByte()
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.byteIndex
                _hx_local_0.byteIndex = (_hx_local_1 + 1)
                _hx_local_1
                tmp = None
                if (byte1 <= 127):
                    tmp = byte1
                else:
                    byte1 = (byte1 & -129)
                    byte1 = (byte1 & -65)
                    totalBytes = 2
                    isBit6Set = (1 == (((byte1 >> 5) & 1)))
                    isBit5Set = False
                    if isBit6Set:
                        byte1 = (byte1 & -33)
                        totalBytes = (totalBytes + 1)
                        isBit5Set = (1 == (((byte1 >> 4) & 1)))
                        if isBit5Set:
                            byte1 = (byte1 & -17)
                            totalBytes = (totalBytes + 1)
                            if (1 == (((byte1 >> 3) & 1))):
                                raise haxe_Exception.thrown((((("Valid UTF-8 byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte1)) + "]!"))
                    result = (byte1 << ((6 * ((totalBytes - 1)))))
                    byte = self.input.readByte()
                    _hx_local_8 = self
                    _hx_local_9 = _hx_local_8.byteIndex
                    _hx_local_8.byteIndex = (_hx_local_9 + 1)
                    _hx_local_9
                    if (1 != (((byte >> 7) & 1))):
                        raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                    if (1 == (((byte >> 6) & 1))):
                        raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                    byte2 = (byte & -129)
                    result = (result + ((byte2 << ((6 * ((totalBytes - 2)))))))
                    if isBit6Set:
                        byte = self.input.readByte()
                        _hx_local_11 = self
                        _hx_local_12 = _hx_local_11.byteIndex
                        _hx_local_11.byteIndex = (_hx_local_12 + 1)
                        _hx_local_12
                        if (1 != (((byte >> 7) & 1))):
                            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                        if (1 == (((byte >> 6) & 1))):
                            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                        byte3 = (byte & -129)
                        result = (result + ((byte3 << ((6 * ((totalBytes - 3)))))))
                        if isBit5Set:
                            byte = self.input.readByte()
                            _hx_local_14 = self
                            _hx_local_15 = _hx_local_14.byteIndex
                            _hx_local_14.byteIndex = (_hx_local_15 + 1)
                            _hx_local_15
                            if (1 != (((byte >> 7) & 1))):
                                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                            if (1 == (((byte >> 6) & 1))):
                                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                            byte4 = (byte & -129)
                            result = (result + ((byte4 << ((6 * ((totalBytes - 4)))))))
                    if ((self.index == 0) and ((result == 65279))):
                        byte1 = self.input.readByte()
                        _hx_local_17 = self
                        _hx_local_18 = _hx_local_17.byteIndex
                        _hx_local_17.byteIndex = (_hx_local_18 + 1)
                        _hx_local_18
                        if (byte1 <= 127):
                            tmp = byte1
                        else:
                            byte1 = (byte1 & -129)
                            byte1 = (byte1 & -65)
                            totalBytes = 2
                            isBit6Set = (1 == (((byte1 >> 5) & 1)))
                            isBit5Set = False
                            if isBit6Set:
                                byte1 = (byte1 & -33)
                                totalBytes = (totalBytes + 1)
                                isBit5Set = (1 == (((byte1 >> 4) & 1)))
                                if isBit5Set:
                                    byte1 = (byte1 & -17)
                                    totalBytes = (totalBytes + 1)
                                    if (1 == (((byte1 >> 3) & 1))):
                                        raise haxe_Exception.thrown((((("Valid UTF-8 byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte1)) + "]!"))
                            result1 = (byte1 << ((6 * ((totalBytes - 1)))))
                            byte = self.input.readByte()
                            _hx_local_25 = self
                            _hx_local_26 = _hx_local_25.byteIndex
                            _hx_local_25.byteIndex = (_hx_local_26 + 1)
                            _hx_local_26
                            if (1 != (((byte >> 7) & 1))):
                                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                            if (1 == (((byte >> 6) & 1))):
                                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                            byte2 = (byte & -129)
                            result1 = (result1 + ((byte2 << ((6 * ((totalBytes - 2)))))))
                            if isBit6Set:
                                byte = self.input.readByte()
                                _hx_local_28 = self
                                _hx_local_29 = _hx_local_28.byteIndex
                                _hx_local_28.byteIndex = (_hx_local_29 + 1)
                                _hx_local_29
                                if (1 != (((byte >> 7) & 1))):
                                    raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                                if (1 == (((byte >> 6) & 1))):
                                    raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                                byte3 = (byte & -129)
                                result1 = (result1 + ((byte3 << ((6 * ((totalBytes - 3)))))))
                                if isBit5Set:
                                    byte = self.input.readByte()
                                    _hx_local_31 = self
                                    _hx_local_32 = _hx_local_31.byteIndex
                                    _hx_local_31.byteIndex = (_hx_local_32 + 1)
                                    _hx_local_32
                                    if (1 != (((byte >> 7) & 1))):
                                        raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                                    if (1 == (((byte >> 6) & 1))):
                                        raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                                    byte4 = (byte & -129)
                                    result1 = (result1 + ((byte4 << ((6 * ((totalBytes - 4)))))))
                            tmp = (self.readUtf8Char() if (((self.index == 0) and ((result1 == 65279)))) else result1)
                    else:
                        tmp = result
                self.nextChar = tmp
                self.nextCharAvailable = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),haxe_io_Eof):
                    self.nextCharAvailable = False
                else:
                    raise _g
        return (self.nextCharAvailable != True)

    def getChar(self):
        if (self.index != self.currCharIndex):
            self.currCharIndex = self.index
            self.nextCharAvailable = None
            return self.nextChar
        return self.currChar

    def readUtf8Char(self):
        byte1 = self.input.readByte()
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.byteIndex
        _hx_local_0.byteIndex = (_hx_local_1 + 1)
        _hx_local_1
        if (byte1 <= 127):
            return byte1
        byte1 = (byte1 & -129)
        byte1 = (byte1 & -65)
        totalBytes = 2
        isBit6Set = (1 == (((byte1 >> 5) & 1)))
        isBit5Set = False
        if isBit6Set:
            byte1 = (byte1 & -33)
            totalBytes = (totalBytes + 1)
            isBit5Set = (1 == (((byte1 >> 4) & 1)))
            if isBit5Set:
                byte1 = (byte1 & -17)
                totalBytes = (totalBytes + 1)
                if (1 == (((byte1 >> 3) & 1))):
                    raise haxe_Exception.thrown((((("Valid UTF-8 byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte1)) + "]!"))
        result = (byte1 << ((6 * ((totalBytes - 1)))))
        byte = self.input.readByte()
        _hx_local_8 = self
        _hx_local_9 = _hx_local_8.byteIndex
        _hx_local_8.byteIndex = (_hx_local_9 + 1)
        _hx_local_9
        if (1 != (((byte >> 7) & 1))):
            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
        if (1 == (((byte >> 6) & 1))):
            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
        byte2 = (byte & -129)
        result = (result + ((byte2 << ((6 * ((totalBytes - 2)))))))
        if isBit6Set:
            byte = self.input.readByte()
            _hx_local_11 = self
            _hx_local_12 = _hx_local_11.byteIndex
            _hx_local_11.byteIndex = (_hx_local_12 + 1)
            _hx_local_12
            if (1 != (((byte >> 7) & 1))):
                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
            if (1 == (((byte >> 6) & 1))):
                raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
            byte3 = (byte & -129)
            result = (result + ((byte3 << ((6 * ((totalBytes - 3)))))))
            if isBit5Set:
                byte = self.input.readByte()
                _hx_local_14 = self
                _hx_local_15 = _hx_local_14.byteIndex
                _hx_local_14.byteIndex = (_hx_local_15 + 1)
                _hx_local_15
                if (1 != (((byte >> 7) & 1))):
                    raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                if (1 == (((byte >> 6) & 1))):
                    raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
                byte4 = (byte & -129)
                result = (result + ((byte4 << ((6 * ((totalBytes - 4)))))))
        if ((self.index == 0) and ((result == 65279))):
            return self.readUtf8Char()
        return result

    def readUtf8MultiSequenceByte(self):
        byte = self.input.readByte()
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.byteIndex
        _hx_local_0.byteIndex = (_hx_local_1 + 1)
        _hx_local_1
        if (1 != (((byte >> 7) & 1))):
            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
        if (1 == (((byte >> 6) & 1))):
            raise haxe_Exception.thrown((((("Valid UTF-8 multi-sequence byte expected at position [" + Std.string(self.byteIndex)) + "] but found byte with value [") + Std.string(byte)) + "]!"))
        return (byte & -129)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.byteIndex = None
        _hx_o.input = None
        _hx_o.currCharIndex = None
        _hx_o.nextChar = None
        _hx_o.nextCharAvailable = None
hx_strings__CharIterator_InputCharIterator._hx_class = hx_strings__CharIterator_InputCharIterator
_hx_classes["hx.strings._CharIterator.InputCharIterator"] = hx_strings__CharIterator_InputCharIterator


class hx_strings__CharIterator_StringCharIterator(hx_strings_CharIterator):
    _hx_class_name = "hx.strings._CharIterator.StringCharIterator"
    _hx_is_interface = "False"
    __slots__ = ("chars", "charsMaxIndex")
    _hx_fields = ["chars", "charsMaxIndex"]
    _hx_methods = ["isEOF", "getChar"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hx_strings_CharIterator


    def __init__(self,chars,prevBufferSize):
        self.charsMaxIndex = None
        self.chars = None
        super().__init__(prevBufferSize)
        self.chars = chars
        self.charsMaxIndex = (((0 if ((chars is None)) else len(chars))) - 1)

    def isEOF(self):
        return (self.index >= self.charsMaxIndex)

    def getChar(self):
        return HxString.charCodeAt(self.chars,self.index)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.chars = None
        _hx_o.charsMaxIndex = None
hx_strings__CharIterator_StringCharIterator._hx_class = hx_strings__CharIterator_StringCharIterator
_hx_classes["hx.strings._CharIterator.StringCharIterator"] = hx_strings__CharIterator_StringCharIterator


class hx_strings_Pattern:
    _hx_class_name = "hx.strings.Pattern"
    _hx_is_interface = "False"
    __slots__ = ("pattern", "options", "ereg")
    _hx_fields = ["pattern", "options", "ereg"]
    _hx_methods = ["matcher", "replace", "remove", "split"]
    _hx_statics = ["__meta__", "compile"]

    def __init__(self,pattern,options):
        self.pattern = pattern
        self.options = options
        self.ereg = EReg(pattern,options)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.options
        _hx_local_0.options = (("null" if _hx_local_1 is None else _hx_local_1) + "u")
        _hx_local_0.options

    def matcher(self,_hx_str):
        return hx_strings__Pattern_MatcherImpl(self.ereg,self.pattern,self.options,_hx_str)

    def replace(self,_hx_str,replaceWith):
        return self.ereg.replace(_hx_str,replaceWith)

    def remove(self,_hx_str):
        return self.ereg.replace(_hx_str,"")

    def split(self,_hx_str):
        return self.ereg.split(_hx_str)

    @staticmethod
    def compile(pattern,options = None):
        if (options is None):
            return hx_strings_Pattern(pattern,"")
        _g = options
        tmp = None
        tmp1 = _g.index
        if (tmp1 == 0):
            _hx_str = _g.params[0]
            str1 = hx_strings_Strings.toLowerCase8(_hx_str)
            if ((str1 is None) or ((len(str1) == 0))):
                tmp = str1
            else:
                def _hx_local_0(ch):
                    return "".join(map(chr,[ch]))
                def _hx_local_1(ch):
                    if (not (((ch == hx_strings_Strings.charCodeAt8("i",0)) or ((ch == hx_strings_Strings.charCodeAt8("m",0)))))):
                        return (ch == hx_strings_Strings.charCodeAt8("g",0))
                    else:
                        return True
                _this = list(map(_hx_local_0,list(filter(_hx_local_1,hx_strings_Strings.toChars(str1)))))
                tmp = "".join([python_Boot.toString1(x1,'') for x1 in _this])
        elif (tmp1 == 1):
            opt = _g.params[0]
            tmp = Std.string(opt)
        elif (tmp1 == 2):
            arr = _g.params[0]
            def _hx_local_2(m):
                return (m is not None)
            _this = list(filter(_hx_local_2,arr))
            tmp = "".join([python_Boot.toString1(x1,'') for x1 in _this])
        else:
            pass
        return hx_strings_Pattern(pattern,tmp)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.pattern = None
        _hx_o.options = None
        _hx_o.ereg = None
hx_strings_Pattern._hx_class = hx_strings_Pattern
_hx_classes["hx.strings.Pattern"] = hx_strings_Pattern


class hx_strings_Matcher:
    _hx_class_name = "hx.strings.Matcher"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["iterate", "map", "matched", "matchedPos", "matches", "matchesInRegion", "reset", "substringAfterMatch", "substringBeforeMatch"]
    _hx_statics = ["__meta__"]
hx_strings_Matcher._hx_class = hx_strings_Matcher
_hx_classes["hx.strings.Matcher"] = hx_strings_Matcher


class hx_strings__Pattern_MatcherImpl:
    _hx_class_name = "hx.strings._Pattern.MatcherImpl"
    _hx_is_interface = "False"
    __slots__ = ("ereg", "isMatch", "str")
    _hx_fields = ["ereg", "isMatch", "str"]
    _hx_methods = ["reset", "iterate", "map", "matched", "matches", "matchesInRegion", "matchedPos", "substringAfterMatch", "substringBeforeMatch", "_cloneEReg"]
    _hx_interfaces = [hx_strings_Matcher]

    def __init__(self,ereg,pattern,options,_hx_str):
        self.isMatch = None
        clone = Type.createEmptyInstance(EReg)
        value = Reflect.field(ereg,"pattern")
        setattr(clone,(("_hx_" + "pattern") if (("pattern" in python_Boot.keywords)) else (("_hx_" + "pattern") if (((((len("pattern") > 2) and ((ord("pattern"[0]) == 95))) and ((ord("pattern"[1]) == 95))) and ((ord("pattern"[(len("pattern") - 1)]) != 95)))) else "pattern")),value)
        value = Reflect.field(ereg,"global")
        setattr(clone,(("_hx_" + "global") if (("global" in python_Boot.keywords)) else (("_hx_" + "global") if (((((len("global") > 2) and ((ord("global"[0]) == 95))) and ((ord("global"[1]) == 95))) and ((ord("global"[(len("global") - 1)]) != 95)))) else "global")),value)
        self.ereg = clone
        self.str = _hx_str

    def reset(self,_hx_str):
        self.str = _hx_str
        self.isMatch = None
        return self

    def iterate(self,onMatch):
        startAt = 0
        while self.ereg.matchSub(self.str,startAt):
            self.isMatch = True
            _this = self.ereg
            matchedPos_pos = _this.matchObj.start()
            matchedPos_len = (_this.matchObj.end() - _this.matchObj.start())
            onMatch(self)
            startAt = (matchedPos_pos + matchedPos_len)
        self.isMatch = False

    def map(self,mapper):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(ereg):
                _gthis.isMatch = True
                return mapper(_gthis)
            return self.ereg.map(self.str,_hx_local_0)
        return _hx_local_1()

    def matched(self,n = None):
        if (n is None):
            n = 0
        if (not self.matches()):
            raise haxe_Exception.thrown("No string matched")
        result = self.ereg.matchObj.group(n)
        return result

    def matches(self):
        if (self.isMatch is None):
            _this = self.ereg
            _this.matchObj = python_lib_Re.search(_this.pattern,self.str)
            self.isMatch = (_this.matchObj is not None)
        return self.isMatch

    def matchesInRegion(self,pos,_hx_len = None):
        if (_hx_len is None):
            _hx_len = -1
        def _hx_local_1():
            def _hx_local_0():
                self.isMatch = self.ereg.matchSub(self.str,pos,_hx_len)
                return self.isMatch
            return _hx_local_0()
        return _hx_local_1()

    def matchedPos(self):
        if (not self.matches()):
            raise haxe_Exception.thrown("No string matched")
        _this = self.ereg
        return _hx_AnonObject({'pos': _this.matchObj.start(), 'len': (_this.matchObj.end() - _this.matchObj.start())})

    def substringAfterMatch(self):
        if (not self.matches()):
            return ""
        _this = self.ereg
        return HxString.substr(_this.matchObj.string,_this.matchObj.end(),None)

    def substringBeforeMatch(self):
        if (not self.matches()):
            return ""
        _this = self.ereg
        return HxString.substr(_this.matchObj.string,0,_this.matchObj.start())

    def _cloneEReg(self,_hx_from,pattern,options):
        clone = Type.createEmptyInstance(EReg)
        value = Reflect.field(_hx_from,"pattern")
        setattr(clone,(("_hx_" + "pattern") if (("pattern" in python_Boot.keywords)) else (("_hx_" + "pattern") if (((((len("pattern") > 2) and ((ord("pattern"[0]) == 95))) and ((ord("pattern"[1]) == 95))) and ((ord("pattern"[(len("pattern") - 1)]) != 95)))) else "pattern")),value)
        value = Reflect.field(_hx_from,"global")
        setattr(clone,(("_hx_" + "global") if (("global" in python_Boot.keywords)) else (("_hx_" + "global") if (((((len("global") > 2) and ((ord("global"[0]) == 95))) and ((ord("global"[1]) == 95))) and ((ord("global"[(len("global") - 1)]) != 95)))) else "global")),value)
        return clone

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.ereg = None
        _hx_o.isMatch = None
        _hx_o.str = None
hx_strings__Pattern_MatcherImpl._hx_class = hx_strings__Pattern_MatcherImpl
_hx_classes["hx.strings._Pattern.MatcherImpl"] = hx_strings__Pattern_MatcherImpl


class hx_strings_StringBuilder:
    _hx_class_name = "hx.strings.StringBuilder"
    _hx_is_interface = "False"
    __slots__ = ("sb", "pre", "len")
    _hx_fields = ["sb", "pre", "len"]
    _hx_methods = ["get_length", "add", "addChar", "addAll", "clear", "isEmpty", "newLine", "insert", "insertChar", "insertAll", "asOutput", "toString"]
    _hx_statics = ["__meta__"]

    def __init__(self,initialContent = None):
        self.len = 0
        self.pre = None
        self.sb = StringBuf()
        if (initialContent is not None):
            self.add(initialContent)

    def get_length(self):
        return self.len

    def add(self,item):
        _this = self.sb
        s = Std.string(("null" if ((item is None)) else item))
        _this.b.write(s)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.len
        _hx_local_0.len = (_hx_local_1 + (0 if ((item is None)) else len(item)))
        _hx_local_0.len
        return self

    def addChar(self,ch):
        _this = self.sb
        s = "".join(map(chr,[ch]))
        _this.b.write(s)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.len
        _hx_local_0.len = (_hx_local_1 + 1)
        _hx_local_1
        return self

    def addAll(self,items):
        _g = 0
        while (_g < len(items)):
            item = (items[_g] if _g >= 0 and _g < len(items) else None)
            _g = (_g + 1)
            _this = self.sb
            s = Std.string(item)
            _this.b.write(s)
            _hx_local_1 = self
            _hx_local_2 = _hx_local_1.len
            _hx_local_1.len = (_hx_local_2 + (0 if ((item is None)) else len(item)))
            _hx_local_1.len
        return self

    def clear(self):
        self.pre = None
        self.sb = StringBuf()
        self.len = 0
        return self

    def isEmpty(self):
        return (self.len == 0)

    def newLine(self):
        self.sb.b.write("\n")
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.len
        _hx_local_0.len = (_hx_local_1 + 1)
        _hx_local_1
        return self

    def insert(self,pos,item):
        if (pos < 0):
            raise haxe_Exception.thrown("[pos] must not be negative")
        if (pos > self.len):
            raise haxe_Exception.thrown("[pos] must not be greater than this.length")
        if (pos == self.len):
            self.add(item)
            return self
        if (pos == 0):
            if (self.pre is None):
                self.pre = []
            self.pre.insert(0, item)
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.len
            _hx_local_0.len = (_hx_local_1 + (0 if ((item is None)) else len(item)))
            _hx_local_0.len
            return self
        pre_len = 0
        if (self.pre is not None):
            pre = self.pre
            i = len(pre)
            _g = 0
            _g1 = len(pre)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                _hx_str = (pre[i] if i >= 0 and i < len(pre) else None)
                next_pre_len = (pre_len + ((0 if ((_hx_str is None)) else len(_hx_str))))
                if (next_pre_len == pos):
                    pre.insert((i + 1), item)
                    _hx_local_2 = self
                    _hx_local_3 = _hx_local_2.len
                    _hx_local_2.len = (_hx_local_3 + (0 if ((item is None)) else len(item)))
                    _hx_local_2.len
                    return self
                if (next_pre_len > pos):
                    preSplitted = hx_strings_Strings.splitAt((pre[i] if i >= 0 and i < len(pre) else None),[(pos - pre_len)])
                    python_internal_ArrayImpl._set(pre, i, (preSplitted[0] if 0 < len(preSplitted) else None))
                    pre.insert((i + 1), item)
                    pre.insert((i + 2), (preSplitted[1] if 1 < len(preSplitted) else None))
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.len
                    _hx_local_4.len = (_hx_local_5 + (0 if ((item is None)) else len(item)))
                    _hx_local_4.len
                    return self
                pre_len = next_pre_len
        if (self.sb.get_length() == 0):
            self.add(item)
            return self
        sbSplitted = hx_strings_Strings.splitAt(self.sb.b.getvalue(),[(pos - pre_len)])
        self.sb = StringBuf()
        _this = self.sb
        s = Std.string((sbSplitted[0] if 0 < len(sbSplitted) else None))
        _this.b.write(s)
        _this = self.sb
        s = Std.string(item)
        _this.b.write(s)
        _hx_local_6 = self
        _hx_local_7 = _hx_local_6.len
        _hx_local_6.len = (_hx_local_7 + (0 if ((item is None)) else len(item)))
        _hx_local_6.len
        _this = self.sb
        s = Std.string((sbSplitted[1] if 1 < len(sbSplitted) else None))
        _this.b.write(s)
        return self

    def insertChar(self,pos,ch):
        if (pos < 0):
            raise haxe_Exception.thrown("[pos] must not be negative")
        if (pos > self.len):
            raise haxe_Exception.thrown("[pos] must not be greater than this.length")
        if (pos == self.len):
            self.addChar(ch)
            return self
        if (pos == 0):
            if (self.pre is None):
                self.pre = []
            _this = self.pre
            x = "".join(map(chr,[ch]))
            _this.insert(0, x)
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.len
            _hx_local_0.len = (_hx_local_1 + 1)
            _hx_local_1
            return self
        pre_len = 0
        if (self.pre is not None):
            pre = self.pre
            i = len(pre)
            _g = 0
            _g1 = len(pre)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                _hx_str = (pre[i] if i >= 0 and i < len(pre) else None)
                next_pre_len = (pre_len + ((0 if ((_hx_str is None)) else len(_hx_str))))
                if (next_pre_len == pos):
                    x = "".join(map(chr,[ch]))
                    pre.insert((i + 1), x)
                    _hx_local_2 = self
                    _hx_local_3 = _hx_local_2.len
                    _hx_local_2.len = (_hx_local_3 + 1)
                    _hx_local_3
                    return self
                if (next_pre_len > pos):
                    preSplitted = hx_strings_Strings.splitAt((pre[i] if i >= 0 and i < len(pre) else None),[(pos - pre_len)])
                    python_internal_ArrayImpl._set(pre, i, (preSplitted[0] if 0 < len(preSplitted) else None))
                    x1 = "".join(map(chr,[ch]))
                    pre.insert((i + 1), x1)
                    pre.insert((i + 2), (preSplitted[1] if 1 < len(preSplitted) else None))
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.len
                    _hx_local_4.len = (_hx_local_5 + 1)
                    _hx_local_5
                    return self
                pre_len = next_pre_len
        if (self.sb.get_length() == 0):
            self.addChar(ch)
            return self
        sbSplitted = hx_strings_Strings.splitAt(self.sb.b.getvalue(),[(pos - pre_len)])
        self.sb = StringBuf()
        _this = self.sb
        s = Std.string((sbSplitted[0] if 0 < len(sbSplitted) else None))
        _this.b.write(s)
        self.addChar(ch)
        _this = self.sb
        s = Std.string((sbSplitted[1] if 1 < len(sbSplitted) else None))
        _this.b.write(s)
        return self

    def insertAll(self,pos,items):
        if (pos < 0):
            raise haxe_Exception.thrown("[pos] must not be negative")
        if (pos > self.len):
            raise haxe_Exception.thrown("[pos] must not be greater than this.length")
        if (pos == self.len):
            self.addAll(items)
            return self
        if (pos == 0):
            if (self.pre is None):
                self.pre = []
            pre = self.pre
            i = len(items)
            while True:
                tmp = i
                i = (i - 1)
                if (not ((tmp > 0))):
                    break
                item = (items[i] if i >= 0 and i < len(items) else None)
                pre.insert(0, item)
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.len
                _hx_local_0.len = (_hx_local_1 + (0 if ((item is None)) else len(item)))
                _hx_local_0.len
            return self
        pre_len = 0
        if (self.pre is not None):
            pre = self.pre
            i = len(pre)
            _g = 0
            _g1 = len(pre)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                _hx_str = (pre[i] if i >= 0 and i < len(pre) else None)
                next_pre_len = (pre_len + ((0 if ((_hx_str is None)) else len(_hx_str))))
                if (next_pre_len == pos):
                    j = len(items)
                    while True:
                        tmp = j
                        j = (j - 1)
                        if (not ((tmp > 0))):
                            break
                        item = (items[j] if j >= 0 and j < len(items) else None)
                        pre.insert((i + 1), item)
                        _hx_local_2 = self
                        _hx_local_3 = _hx_local_2.len
                        _hx_local_2.len = (_hx_local_3 + (0 if ((item is None)) else len(item)))
                        _hx_local_2.len
                    return self
                if (next_pre_len > pos):
                    preSplitted = hx_strings_Strings.splitAt((pre[i] if i >= 0 and i < len(pre) else None),[(pos - pre_len)])
                    python_internal_ArrayImpl._set(pre, i, (preSplitted[0] if 0 < len(preSplitted) else None))
                    pre.insert((i + 1), (preSplitted[1] if 1 < len(preSplitted) else None))
                    j1 = len(items)
                    while True:
                        tmp1 = j1
                        j1 = (j1 - 1)
                        if (not ((tmp1 > 0))):
                            break
                        item1 = (items[j1] if j1 >= 0 and j1 < len(items) else None)
                        pre.insert((i + 1), item1)
                        _hx_local_4 = self
                        _hx_local_5 = _hx_local_4.len
                        _hx_local_4.len = (_hx_local_5 + (0 if ((item1 is None)) else len(item1)))
                        _hx_local_4.len
                    return self
                pre_len = next_pre_len
        if (self.sb.get_length() == 0):
            _g = 0
            while (_g < len(items)):
                item = (items[_g] if _g >= 0 and _g < len(items) else None)
                _g = (_g + 1)
                self.add(item)
            return self
        sbSplitted = hx_strings_Strings.splitAt(self.sb.b.getvalue(),[(pos - pre_len)])
        self.sb = StringBuf()
        _this = self.sb
        s = Std.string((sbSplitted[0] if 0 < len(sbSplitted) else None))
        _this.b.write(s)
        _g = 0
        while (_g < len(items)):
            item = (items[_g] if _g >= 0 and _g < len(items) else None)
            _g = (_g + 1)
            _this = self.sb
            s = Std.string(item)
            _this.b.write(s)
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.len
            _hx_local_8.len = (_hx_local_9 + (0 if ((item is None)) else len(item)))
            _hx_local_8.len
        _this = self.sb
        s = Std.string((sbSplitted[1] if 1 < len(sbSplitted) else None))
        _this.b.write(s)
        return self

    def asOutput(self):
        return hx_strings__StringBuilder_OutputWrapper(self)

    def toString(self):
        if (self.pre is None):
            return self.sb.b.getvalue()
        _this = self.pre
        _hx_str = (HxOverrides.stringOrNull("".join([python_Boot.toString1(x1,'') for x1 in _this])) + HxOverrides.stringOrNull(self.sb.b.getvalue()))
        self.clear()
        self.add(_hx_str)
        return _hx_str

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.sb = None
        _hx_o.pre = None
        _hx_o.len = None
hx_strings_StringBuilder._hx_class = hx_strings_StringBuilder
_hx_classes["hx.strings.StringBuilder"] = hx_strings_StringBuilder


class hx_strings__StringBuilder_OutputWrapper(haxe_io_Output):
    _hx_class_name = "hx.strings._StringBuilder.OutputWrapper"
    _hx_is_interface = "False"
    __slots__ = ("sb", "bo")
    _hx_fields = ["sb", "bo"]
    _hx_methods = ["flush", "writeByte", "writeString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,sb):
        self.bo = None
        self.sb = sb

    def flush(self):
        if ((self.bo is not None) and ((len(self.bo.b.b) > 0))):
            self.sb.add(self.bo.getBytes().toString())

    def writeByte(self,c):
        if (self.bo is None):
            self.bo = haxe_io_BytesOutput()
        self.bo.writeByte(c)

    def writeString(self,_hx_str,encoding = None):
        self.flush()
        self.sb.add(_hx_str)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.sb = None
        _hx_o.bo = None
hx_strings__StringBuilder_OutputWrapper._hx_class = hx_strings__StringBuilder_OutputWrapper
_hx_classes["hx.strings._StringBuilder.OutputWrapper"] = hx_strings__StringBuilder_OutputWrapper


class hx_strings_internal_OS:
    _hx_class_name = "hx.strings.internal.OS"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["isWindows"]
hx_strings_internal_OS._hx_class = hx_strings_internal_OS
_hx_classes["hx.strings.internal.OS"] = hx_strings_internal_OS


class HxString:
    _hx_class_name = "HxString"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "indexOfImpl", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        elif (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return HxString.indexOfImpl(s,_hx_str,startIndex)

    @staticmethod
    def indexOfImpl(s,_hx_str,startIndex):
        if (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString
_hx_classes["HxString"] = HxString


class python_Boot:
    _hx_class_name = "python.Boot"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["keywords", "_add_dynamic", "toString1", "fields", "simpleField", "hasField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def _add_dynamic(a,b):
        if (isinstance(a,str) and isinstance(b,str)):
            return (a + b)
        if (isinstance(a,str) or isinstance(b,str)):
            return (python_Boot.toString1(a,"") + python_Boot.toString1(b,""))
        return (a + b)

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if ((type(o) == type) and (o == str)):
                return "#String"
            if ((type(o) == type) and (o == list)):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def hasField(o,field):
        if isinstance(o,_hx_AnonObject):
            return o._hx_hasattr(field)
        return hasattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)))

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        elif isinstance(o,list):
            field1 = field
            _hx_local_1 = len(field1)
            if (_hx_local_1 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 4):
                if (field1 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field1 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field1 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field1 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 5):
                if (field1 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field1 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field1 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field1 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 3):
                if (field1 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field1 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 8):
                if (field1 == "contains"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.contains)
                elif (field1 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field1 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 16):
                if (field1 == "keyValueIterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.keyValueIterator)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 6):
                if (field1 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field1 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field1 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field1 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        else:
            field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field1) if (hasattr(o,field1)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name
python_Boot._hx_class = python_Boot
_hx_classes["python.Boot"] = python_Boot

class hx_strings_internal__Either3__Either3(Enum):
    __slots__ = ()
    _hx_class_name = "hx.strings.internal._Either3._Either3"
    _hx_constructs = ["a", "b", "c"]

    @staticmethod
    def a(v):
        return hx_strings_internal__Either3__Either3("a", 0, (v,))

    @staticmethod
    def b(v):
        return hx_strings_internal__Either3__Either3("b", 1, (v,))

    @staticmethod
    def c(v):
        return hx_strings_internal__Either3__Either3("c", 2, (v,))
hx_strings_internal__Either3__Either3._hx_class = hx_strings_internal__Either3__Either3
_hx_classes["hx.strings.internal._Either3._Either3"] = hx_strings_internal__Either3__Either3


class hx_strings_Strings:
    _hx_class_name = "hx.strings.Strings"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["REGEX_ANSI_ESC", "REGEX_HTML_UNESCAPE", "REGEX_SPLIT_LINES", "REGEX_REMOVE_XML_TAGS", "POS_NOT_FOUND", "NEW_LINE_NIX", "NEW_LINE_WIN", "NEW_LINE", "_length", "_getNotFoundDefault", "_charCodeAt8Unsafe", "_splitAsciiWordsUnsafe", "ansiToHtml", "appendIfMissing", "base64Encode", "base64Decode", "charAt8", "charCodeAt8", "compact", "contains", "containsOnly", "containsAll", "containsAllIgnoreCase", "containsAny", "containsAnyIgnoreCase", "containsNone", "containsNoneIgnoreCase", "containsWhitespaces", "countMatches", "countMatchesIgnoreCase", "compare", "compareIgnoreCase", "diff", "diffAt", "ellipsizeLeft", "ellipsizeMiddle", "ellipsizeRight", "endsWith", "endsWithAny", "endsWithAnyIgnoreCase", "endsWithIgnoreCase", "equals", "equalsIgnoreCase", "filter", "filterChars", "getFuzzyDistance", "getLevenshteinDistance", "getLongestCommonSubstring", "hashCode", "htmlDecode", "htmlEncode", "insertAt", "ifBlank", "ifEmpty", "ifNull", "indentLines", "indexOf8", "isBlank", "isDigits", "isEmpty", "isNotBlank", "isNotEmpty", "isLowerCase", "isUpperCase", "iterate", "iterateChars", "lastIndexOf8", "length8", "left", "lpad", "map", "prependIfMissing", "quoteDouble", "quoteSingle", "removeAfter", "removeAfterLast", "removeAfterIgnoreCase", "removeAfterLastIgnoreCase", "removeAt", "removeBefore", "removeBeforeLast", "removeBeforeIgnoreCase", "removeBeforeLastIgnoreCase", "removeAll", "removeFirst", "removeFirstIgnoreCase", "removeAnsi", "removeLeading", "removeTags", "removeTrailing", "repeat", "replaceAll", "replaceFirst", "replaceFirstIgnoreCase", "reverse", "right", "rpad", "split8", "splitAt", "splitEvery", "splitLines", "startsWith", "startsWithAny", "startsWithAnyIgnoreCase", "startsWithIgnoreCase", "substr8", "substring8", "substringAfter", "substringAfterIgnoreCase", "substringBetween", "substringBetweenIgnoreCase", "substringAfterLast", "substringAfterLastIgnoreCase", "substringBefore", "substringBeforeIgnoreCase", "substringBeforeLast", "substringBeforeLastIgnoreCase", "toBool", "toBytes", "toChar", "toCharIterator", "toChars", "toPattern", "toEReg", "toFloat", "toFloatOrNull", "toHex", "toInt", "toIntOrNull", "toLowerCase8", "toLowerCaseFirstChar", "toLowerCamel", "toLowerHyphen", "toLowerUnderscore", "toTitle", "toUpperCamel", "toUpperUnderscore", "toString", "toUpperCase8", "toUpperCaseFirstChar", "trim", "trimRight", "trimLeft", "trimLines", "trimToNull", "trimToEmpty", "truncate", "urlDecode", "urlEncode", "wrap"]

    @staticmethod
    def _length(_hx_str):
        return len(_hx_str)

    @staticmethod
    def _getNotFoundDefault(_hx_str,notFoundDefault):
        notFoundDefault1 = notFoundDefault
        if (notFoundDefault1 == 1):
            return None
        elif (notFoundDefault1 == 2):
            return ""
        elif (notFoundDefault1 == 3):
            return _hx_str
        else:
            pass

    @staticmethod
    def _charCodeAt8Unsafe(_hx_str,pos):
        return HxString.charCodeAt(_hx_str,pos)

    @staticmethod
    def _splitAsciiWordsUnsafe(_hx_str):
        words = list()
        currentWord = hx_strings_StringBuilder()
        chars = hx_strings_Strings.toChars(_hx_str)
        _hx_len = len(chars)
        lastIndex = (_hx_len - 1)
        _g = 0
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            ch = (chars[i] if i >= 0 and i < len(chars) else None)
            if (((ch > 64) and ((ch < 91))) or (((ch > 96) and ((ch < 123))))):
                chNext = (python_internal_ArrayImpl._get(chars, (i + 1)) if ((i < lastIndex)) else -1)
                currentWord.addChar(ch)
                if ((chNext > 47) and ((chNext < 58))):
                    x = currentWord.toString()
                    words.append(x)
                    currentWord.clear()
                elif (ch in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h):
                    if ((chNext in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h) and ((len(chars) > ((i + 2))))):
                        if (not (python_internal_ArrayImpl._get(chars, (i + 2)) in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h)):
                            x1 = currentWord.toString()
                            words.append(x1)
                            currentWord.clear()
                elif (chNext in hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h):
                    x2 = currentWord.toString()
                    words.append(x2)
                    currentWord.clear()
            elif ((ch > 47) and ((ch < 58))):
                currentWord.addChar(ch)
                chNext1 = (python_internal_ArrayImpl._get(chars, (i + 1)) if ((i < lastIndex)) else -1)
                if (not (((chNext1 > 47) and ((chNext1 < 58))))):
                    x3 = currentWord.toString()
                    words.append(x3)
                    currentWord.clear()
            elif (currentWord.len > 0):
                x4 = currentWord.toString()
                words.append(x4)
                currentWord.clear()
        if (currentWord.len > 0):
            x = currentWord.toString()
            words.append(x)
        return words

    @staticmethod
    def ansiToHtml(_hx_str,renderMethod = None,initialState = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if (renderMethod is None):
            renderMethod = hx_strings_AnsiToHtmlRenderMethod.StyleAttributes
        styleOrClassAttribute = None
        styleOrClassAttribute1 = renderMethod.index
        if (styleOrClassAttribute1 == 0):
            styleOrClassAttribute = "style"
        elif (styleOrClassAttribute1 == 1):
            styleOrClassAttribute = "class"
        elif (styleOrClassAttribute1 == 2):
            cb = renderMethod.params[0]
            styleOrClassAttribute = "class"
        else:
            pass
        sb = hx_strings_StringBuilder()
        if ((initialState is not None) and ((((((initialState.fgcolor is not None) or ((initialState.bgcolor is not None))) or initialState.bold) or initialState.underline) or initialState.blink))):
            sb.add((("<span " + ("null" if styleOrClassAttribute is None else styleOrClassAttribute)) + "=\"")).add(initialState.toCSS(renderMethod)).add("\">")
        effectiveState = hx_strings_AnsiState(initialState)
        strLenMinus1 = (((0 if ((_hx_str is None)) else len(_hx_str))) - 1)
        i = -1
        lookAhead = hx_strings_StringBuilder()
        while (i < strLenMinus1):
            i = (i + 1)
            ch = HxString.charCodeAt(_hx_str,i)
            if (((ch == 27) and ((i < strLenMinus1))) and ((HxString.charCodeAt(_hx_str,(i + 1)) == 91))):
                lookAhead.clear()
                currentState = hx_strings_AnsiState(effectiveState)
                currentGraphicModeParam = 0
                isValidEscapeSequence = False
                i = (i + 1)
                while (i < strLenMinus1):
                    i = (i + 1)
                    ch2 = HxString.charCodeAt(_hx_str,i)
                    lookAhead.addChar(ch2)
                    ch21 = ch2
                    if (ch21 == 48):
                        currentGraphicModeParam = (currentGraphicModeParam * 10)
                    elif (ch21 == 49):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 1)
                    elif (ch21 == 50):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 2)
                    elif (ch21 == 51):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 3)
                    elif (ch21 == 52):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 4)
                    elif (ch21 == 53):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 5)
                    elif (ch21 == 54):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 6)
                    elif (ch21 == 55):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 7)
                    elif (ch21 == 56):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 8)
                    elif (ch21 == 57):
                        currentGraphicModeParam = ((currentGraphicModeParam * 10) + 9)
                    elif (ch21 == 59):
                        currentState.setGraphicModeParameter(currentGraphicModeParam)
                        currentGraphicModeParam = 0
                    elif (ch21 == 109):
                        currentState.setGraphicModeParameter(currentGraphicModeParam)
                        if (((((effectiveState.fgcolor is not None) or ((effectiveState.bgcolor is not None))) or effectiveState.bold) or effectiveState.underline) or effectiveState.blink):
                            sb.add("</span>")
                        if (((((currentState.fgcolor is not None) or ((currentState.bgcolor is not None))) or currentState.bold) or currentState.underline) or currentState.blink):
                            sb.add((("<span " + ("null" if styleOrClassAttribute is None else styleOrClassAttribute)) + "=\"")).add(currentState.toCSS(renderMethod)).add("\">")
                        effectiveState = currentState
                        isValidEscapeSequence = True
                        break
                    else:
                        break
                if (not isValidEscapeSequence):
                    sb.addChar(27).add("[").add(Std.string(lookAhead))
            else:
                sb.addChar(ch)
        if (((((effectiveState.fgcolor is not None) or ((effectiveState.bgcolor is not None))) or effectiveState.bold) or effectiveState.underline) or effectiveState.blink):
            sb.add("</span>")
        return sb.toString()

    @staticmethod
    def appendIfMissing(_hx_str,suffix):
        if (_hx_str is None):
            return None
        if (len(_hx_str) == 0):
            return (Std.string(_hx_str) + Std.string(suffix))
        if hx_strings_Strings.endsWith(_hx_str,suffix):
            return _hx_str
        return (Std.string(_hx_str) + Std.string(suffix))

    @staticmethod
    def base64Encode(plain):
        if (plain is None):
            return None
        return haxe_crypto_Base64.encode((None if ((plain is None)) else haxe_io_Bytes.ofString(plain)))

    @staticmethod
    def base64Decode(encoded):
        if (encoded is None):
            return None
        return haxe_crypto_Base64.decode(encoded).toString()

    @staticmethod
    def charAt8(_hx_str,pos,resultIfOutOfBound = None):
        if (resultIfOutOfBound is None):
            resultIfOutOfBound = ""
        if ((((_hx_str is None) or ((len(_hx_str) == 0))) or ((pos < 0))) or ((pos >= ((0 if ((_hx_str is None)) else len(_hx_str)))))):
            return resultIfOutOfBound
        return ("" if (((pos < 0) or ((pos >= len(_hx_str))))) else _hx_str[pos])

    @staticmethod
    def charCodeAt8(_hx_str,pos,resultIfOutOfBound = None):
        if (resultIfOutOfBound is None):
            resultIfOutOfBound = -1
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (((strLen == 0) or ((pos < 0))) or ((pos >= strLen))):
            return resultIfOutOfBound
        return HxString.charCodeAt(_hx_str,pos)

    @staticmethod
    def compact(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        sb = hx_strings_StringBuilder()
        needWhiteSpace = False
        _g = 0
        _g1 = hx_strings_Strings.toChars(_hx_str)
        while (_g < len(_g1)):
            char = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (((char > 8) and ((char < 14))) or ((char == 32))):
                if (sb.len != 0):
                    needWhiteSpace = True
                continue
            elif needWhiteSpace:
                sb.addChar(32)
                needWhiteSpace = False
            sb.addChar(char)
        return sb.toString()

    @staticmethod
    def contains(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        if (searchFor == ""):
            return True
        startIndex = None
        return (((searchIn.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,searchFor,startIndex))) > -1)

    @staticmethod
    def containsOnly(searchIn,allowedChars):
        if ((searchIn is None) or ((len(searchIn) == 0))):
            return True
        if (allowedChars is None):
            return False
        allowedCharsArray = None
        _g = allowedChars
        allowedCharsArray1 = _g.index
        if (allowedCharsArray1 == 0):
            _hx_str = _g.params[0]
            allowedCharsArray = hx_strings_Strings.toChars(_hx_str)
        elif (allowedCharsArray1 == 1):
            chars = _g.params[0]
            allowedCharsArray = chars
        else:
            pass
        _g = 0
        _g1 = hx_strings_Strings.toChars(searchIn)
        while (_g < len(_g1)):
            ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (python_internal_ArrayImpl.indexOf(allowedCharsArray,ch,None) < 0):
                return False
        return True

    @staticmethod
    def containsAll(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            tmp = None
            if ((searchIn is None) or ((candidate is None))):
                tmp = False
            elif (candidate == ""):
                tmp = True
            else:
                startIndex = None
                tmp = (((searchIn.find(candidate) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,candidate,startIndex))) > -1)
            if (not tmp):
                return False
        return True

    @staticmethod
    def containsAllIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        searchIn = searchIn.lower()
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            searchFor1 = candidate.lower()
            tmp = None
            if ((searchIn is None) or ((searchFor1 is None))):
                tmp = False
            elif (searchFor1 == ""):
                tmp = True
            else:
                startIndex = None
                tmp = (((searchIn.find(searchFor1) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,searchFor1,startIndex))) > -1)
            if (not tmp):
                return False
        return True

    @staticmethod
    def containsAny(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            tmp = None
            if ((searchIn is None) or ((candidate is None))):
                tmp = False
            elif (candidate == ""):
                tmp = True
            else:
                startIndex = None
                tmp = (((searchIn.find(candidate) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,candidate,startIndex))) > -1)
            if tmp:
                return True
        return False

    @staticmethod
    def containsAnyIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        searchIn = searchIn.lower()
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            searchFor1 = candidate.lower()
            tmp = None
            if ((searchIn is None) or ((searchFor1 is None))):
                tmp = False
            elif (searchFor1 == ""):
                tmp = True
            else:
                startIndex = None
                tmp = (((searchIn.find(searchFor1) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,searchFor1,startIndex))) > -1)
            if tmp:
                return True
        return False

    @staticmethod
    def containsNone(searchIn,searchFor):
        return (not hx_strings_Strings.containsAny(searchIn,searchFor))

    @staticmethod
    def containsNoneIgnoreCase(searchIn,searchFor):
        return (not hx_strings_Strings.containsAnyIgnoreCase(searchIn,searchFor))

    @staticmethod
    def containsWhitespaces(searchIn):
        if (searchIn is None):
            return False
        _g = 0
        _g1 = hx_strings_Strings.toChars(searchIn)
        while (_g < len(_g1)):
            ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (((ch > 8) and ((ch < 14))) or ((ch == 32))):
                return True
        return False

    @staticmethod
    def countMatches(searchIn,searchFor,startAt = None):
        if (startAt is None):
            startAt = 0
        if ((((searchIn is None) or ((len(searchIn) == 0))) or (((searchFor is None) or ((len(searchFor) == 0))))) or ((startAt >= len(searchIn)))):
            return 0
        if (startAt < 0):
            startAt = 0
        count = 0
        foundAt = ((startAt - 1) if ((startAt > -1)) else 0)
        while True:
            startIndex = (foundAt + 1)
            foundAt = (searchIn.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,searchFor,startIndex))
            if (not ((foundAt > -1))):
                break
            count = (count + 1)
        return count

    @staticmethod
    def countMatchesIgnoreCase(searchIn,searchFor,startAt = None):
        if (startAt is None):
            startAt = 0
        if ((((searchIn is None) or ((len(searchIn) == 0))) or (((searchFor is None) or ((len(searchFor) == 0))))) or ((startAt >= len(searchIn)))):
            return 0
        if (startAt < 0):
            startAt = 0
        searchIn = searchIn.lower()
        searchFor = searchFor.lower()
        count = 0
        foundAt = ((startAt - 1) if ((startAt > -1)) else 0)
        while True:
            startIndex = (foundAt + 1)
            foundAt = (searchIn.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(searchIn,searchFor,startIndex))
            if (not ((foundAt > -1))):
                break
            count = (count + 1)
        return count

    @staticmethod
    def compare(_hx_str,other):
        if (_hx_str is None):
            if (other is None):
                return 0
            else:
                return -1
        if (other is None):
            if (_hx_str is None):
                return 0
            else:
                return 1
        if (_hx_str > other):
            return 1
        elif (_hx_str == other):
            return 0
        else:
            return -1

    @staticmethod
    def compareIgnoreCase(_hx_str,other):
        if (_hx_str is None):
            if (other is None):
                return 0
            else:
                return -1
        if (other is None):
            if (_hx_str is None):
                return 0
            else:
                return 1
        str1 = hx_strings_Strings.toLowerCase8(_hx_str)
        other1 = hx_strings_Strings.toLowerCase8(other)
        if (str1 > other1):
            return 1
        elif (str1 == other1):
            return 0
        else:
            return -1

    @staticmethod
    def diff(left,right):
        diff = hx_strings_StringDiff()
        diff.at = hx_strings_Strings.diffAt(left,right)
        diff.left = hx_strings_Strings.substr8(left,diff.at)
        diff.right = hx_strings_Strings.substr8(right,diff.at)
        return diff

    @staticmethod
    def diffAt(_hx_str,other):
        if (_hx_str == other):
            return -1
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        otherLen = (0 if ((other is None)) else len(other))
        if ((strLen == 0) or ((otherLen == 0))):
            return 0
        checkLen = (otherLen if ((strLen > otherLen)) else strLen)
        _g = 0
        _g1 = checkLen
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if (HxString.charCodeAt(_hx_str,i) != HxString.charCodeAt(other,i)):
                return i
        return checkLen

    @staticmethod
    def ellipsizeLeft(_hx_str,maxLength,ellipsis = None):
        if (ellipsis is None):
            ellipsis = "..."
        if (((0 if ((_hx_str is None)) else len(_hx_str))) <= maxLength):
            return _hx_str
        ellipsisLen = (0 if ((ellipsis is None)) else len(ellipsis))
        if (maxLength < ellipsisLen):
            raise haxe_Exception.thrown(("[maxLength] must not be smaller than " + Std.string(ellipsisLen)))
        return (("null" if ellipsis is None else ellipsis) + Std.string(hx_strings_Strings.right(_hx_str,(maxLength - ellipsisLen))))

    @staticmethod
    def ellipsizeMiddle(_hx_str,maxLength,ellipsis = None):
        if (ellipsis is None):
            ellipsis = "..."
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (strLen <= maxLength):
            return _hx_str
        ellipsisLen = (0 if ((ellipsis is None)) else len(ellipsis))
        if (maxLength < ellipsisLen):
            raise haxe_Exception.thrown(("[maxLength] must not be smaller than " + Std.string(ellipsisLen)))
        maxStrLen = (maxLength - ellipsisLen)
        leftLen = Math.floor(((maxStrLen / 2) + 0.5))
        rightLen = (maxStrLen - leftLen)
        return ((Std.string((_hx_str if ((((0 if ((_hx_str is None)) else len(_hx_str))) <= leftLen)) else hx_strings_Strings.substring8(_hx_str,0,leftLen))) + ("null" if ellipsis is None else ellipsis)) + Std.string(hx_strings_Strings.right(_hx_str,rightLen)))

    @staticmethod
    def ellipsizeRight(_hx_str,maxLength,ellipsis = None):
        if (ellipsis is None):
            ellipsis = "..."
        if (((0 if ((_hx_str is None)) else len(_hx_str))) <= maxLength):
            return _hx_str
        ellipsisLen = (0 if ((ellipsis is None)) else len(ellipsis))
        if (maxLength < ellipsisLen):
            raise haxe_Exception.thrown(("[maxLength] must not be smaller than " + Std.string(ellipsisLen)))
        _hx_len = (maxLength - ellipsisLen)
        return (Std.string((_hx_str if ((((0 if ((_hx_str is None)) else len(_hx_str))) <= _hx_len)) else hx_strings_Strings.substring8(_hx_str,0,_hx_len))) + ("null" if ellipsis is None else ellipsis))

    @staticmethod
    def endsWith(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        return searchIn.endswith(searchFor)

    @staticmethod
    def endsWithAny(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            if ((candidate is not None) and hx_strings_Strings.endsWith(searchIn,candidate)):
                return True
        return False

    @staticmethod
    def endsWithAnyIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        searchIn = hx_strings_Strings.toLowerCase8(searchIn)
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            if ((candidate is not None) and hx_strings_Strings.endsWith(searchIn,hx_strings_Strings.toLowerCase8(candidate))):
                return True
        return False

    @staticmethod
    def endsWithIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        return hx_strings_Strings.endsWith(searchIn.lower(),searchFor.lower())

    @staticmethod
    def equals(_hx_str,other):
        return (_hx_str == other)

    @staticmethod
    def equalsIgnoreCase(_hx_str,other):
        return (hx_strings_Strings.toLowerCase8(_hx_str) == hx_strings_Strings.toLowerCase8(other))

    @staticmethod
    def filter(_hx_str,_hx_filter,separator = None):
        if (separator is None):
            separator = ""
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        _this = list(filter(_hx_filter,hx_strings_Strings.split8(_hx_str,[separator])))
        return separator.join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def filterChars(_hx_str,_hx_filter):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        def _hx_local_0(ch):
            return "".join(map(chr,[ch]))
        _this = list(map(_hx_local_0,list(filter(_hx_filter,hx_strings_Strings.toChars(_hx_str)))))
        return "".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def getFuzzyDistance(left,right):
        if (((left is None) or ((len(left) == 0))) or (((right is None) or ((len(right) == 0))))):
            return 0
        left = hx_strings_Strings.toLowerCase8(left)
        right = hx_strings_Strings.toLowerCase8(right)
        leftChars = hx_strings_Strings.toChars(left)
        rightChars = hx_strings_Strings.toChars(right)
        leftLastMatchAt = -100
        rightLastMatchAt = -100
        score = 0
        _g = 0
        _g1 = len(leftChars)
        while (_g < _g1):
            leftIdx = _g
            _g = (_g + 1)
            leftChar = (leftChars[leftIdx] if leftIdx >= 0 and leftIdx < len(leftChars) else None)
            _g2 = ((rightLastMatchAt + 1) if ((rightLastMatchAt > -1)) else 0)
            _g3 = len(rightChars)
            while (_g2 < _g3):
                rightIdx = _g2
                _g2 = (_g2 + 1)
                rightChar = (rightChars[rightIdx] if rightIdx >= 0 and rightIdx < len(rightChars) else None)
                if (leftChar == rightChar):
                    score = (score + 1)
                    if ((leftLastMatchAt == ((leftIdx - 1))) and ((rightLastMatchAt == ((rightIdx - 1))))):
                        score = (score + 2)
                    leftLastMatchAt = leftIdx
                    rightLastMatchAt = rightIdx
                    break
        return score

    @staticmethod
    def getLevenshteinDistance(left,right):
        leftLen = (0 if ((left is None)) else len(left))
        rightLen = (0 if ((right is None)) else len(right))
        if (leftLen == 0):
            return rightLen
        if (rightLen == 0):
            return leftLen
        if (leftLen > rightLen):
            tmp = left
            left = right
            right = tmp
            tmpLen = leftLen
            leftLen = rightLen
            rightLen = tmpLen
        prevCosts = list()
        costs = list()
        _g = 0
        _g1 = (leftLen + 1)
        while (_g < _g1):
            leftIdx = _g
            _g = (_g + 1)
            prevCosts.append(leftIdx)
            costs.append(0)
        leftChars = hx_strings_Strings.toChars(left)
        rightChars = hx_strings_Strings.toChars(right)
        def _hx_local_0(a,b):
            if (a > b):
                return b
            else:
                return a
        _hx_min = _hx_local_0
        _g = 1
        _g1 = (rightLen + 1)
        while (_g < _g1):
            rightIdx = _g
            _g = (_g + 1)
            rightChar = python_internal_ArrayImpl._get(rightChars, (rightIdx - 1))
            python_internal_ArrayImpl._set(costs, 0, rightIdx)
            _g2 = 1
            _g3 = (leftLen + 1)
            while (_g2 < _g3):
                leftIdx = _g2
                _g2 = (_g2 + 1)
                leftIdxMinus1 = (leftIdx - 1)
                cost = (0 if (((leftChars[leftIdxMinus1] if leftIdxMinus1 >= 0 and leftIdxMinus1 < len(leftChars) else None) == rightChar)) else 1)
                python_internal_ArrayImpl._set(costs, leftIdx, _hx_min(_hx_min(((costs[leftIdxMinus1] if leftIdxMinus1 >= 0 and leftIdxMinus1 < len(costs) else None) + 1),((prevCosts[leftIdx] if leftIdx >= 0 and leftIdx < len(prevCosts) else None) + 1)),((prevCosts[leftIdxMinus1] if leftIdxMinus1 >= 0 and leftIdxMinus1 < len(prevCosts) else None) + cost)))
            tmp = prevCosts
            prevCosts = costs
            costs = tmp
        return (prevCosts[leftLen] if leftLen >= 0 and leftLen < len(prevCosts) else None)

    @staticmethod
    def getLongestCommonSubstring(left,right):
        if ((left is None) or ((right is None))):
            return None
        leftLen = (0 if ((left is None)) else len(left))
        rightLen = (0 if ((right is None)) else len(right))
        if ((leftLen == 0) or ((rightLen == 0))):
            return ""
        leftChars = hx_strings_Strings.toChars(left)
        rightChars = hx_strings_Strings.toChars(right)
        leftSubStartAt = 0
        leftSubLen = 0
        _g = 0
        _g1 = leftLen
        while (_g < _g1):
            leftIdx = _g
            _g = (_g + 1)
            _g2 = 0
            _g3 = rightLen
            while (_g2 < _g3):
                rightIdx = _g2
                _g2 = (_g2 + 1)
                currLen = 0
                while (python_internal_ArrayImpl._get(leftChars, (leftIdx + currLen)) == python_internal_ArrayImpl._get(rightChars, (rightIdx + currLen))):
                    currLen = (currLen + 1)
                    if (((leftIdx + currLen) >= leftLen) or (((rightIdx + currLen) >= rightLen))):
                        break
                if (currLen > leftSubLen):
                    leftSubLen = currLen
                    leftSubStartAt = leftIdx
        return hx_strings_Strings.substr8(left,leftSubStartAt,leftSubLen)

    @staticmethod
    def hashCode(_hx_str,algo = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return 0
        if (algo is None):
            algo = hx_strings_HashCodeAlgorithm.PLATFORM_SPECIFIC
        if (algo is None):
            return hash(_hx_str)
        else:
            tmp = algo.index
            if (tmp == 1):
                return haxe_crypto_Adler32.make((None if ((_hx_str is None)) else haxe_io_Bytes.ofString(_hx_str)))
            elif (tmp == 2):
                return haxe_crypto_Crc32.make((None if ((_hx_str is None)) else haxe_io_Bytes.ofString(_hx_str)))
            elif (tmp == 3):
                hc = 5381
                _g = 0
                _g1 = hx_strings_Strings.toChars(_hx_str)
                while (_g < len(_g1)):
                    ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    hc = (((((((((((hc << 5)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + hc) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) ^ ch)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                return hc
            elif (tmp == 4):
                hc = 0
                _g = 0
                _g1 = hx_strings_Strings.toChars(_hx_str)
                while (_g < len(_g1)):
                    ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    hc = ((((((((((hc << 5)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) - hc) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + ch) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                return hc
            elif (tmp == 5):
                hc = 0
                _g = 0
                _g1 = hx_strings_Strings.toChars(_hx_str)
                while (_g < len(_g1)):
                    ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    hc = (((((((((((((hc << 6)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + (((((hc << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) - hc) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + ch) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
                return hc
            else:
                return hash(_hx_str)

    @staticmethod
    def htmlDecode(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        _this = hx_strings_Strings.REGEX_HTML_UNESCAPE
        def _hx_local_2():
            def _hx_local_1(m):
                match = m.matched()
                match1 = match
                _hx_local_0 = len(match1)
                if (_hx_local_0 == 5):
                    if (match1 == "&amp;"):
                        return "&"
                    else:
                        number = Std.parseInt(hx_strings_Strings.substr8(match,2,(((0 if ((match is None)) else len(match))) - 3)))
                        if (number is None):
                            raise haxe_Exception.thrown(("Invalid HTML value " + ("null" if match is None else match)))
                        return "".join(map(chr,[number]))
                elif (_hx_local_0 == 4):
                    if (match1 == "&gt;"):
                        return ">"
                    elif (match1 == "&lt;"):
                        return "<"
                    else:
                        number = Std.parseInt(hx_strings_Strings.substr8(match,2,(((0 if ((match is None)) else len(match))) - 3)))
                        if (number is None):
                            raise haxe_Exception.thrown(("Invalid HTML value " + ("null" if match is None else match)))
                        return "".join(map(chr,[number]))
                elif (_hx_local_0 == 6):
                    if (match1 == "&apos;"):
                        return "'"
                    elif (match1 == "&nbsp;"):
                        return " "
                    elif (match1 == "&quot;"):
                        return "\""
                    else:
                        number = Std.parseInt(hx_strings_Strings.substr8(match,2,(((0 if ((match is None)) else len(match))) - 3)))
                        if (number is None):
                            raise haxe_Exception.thrown(("Invalid HTML value " + ("null" if match is None else match)))
                        return "".join(map(chr,[number]))
                else:
                    number = Std.parseInt(hx_strings_Strings.substr8(match,2,(((0 if ((match is None)) else len(match))) - 3)))
                    if (number is None):
                        raise haxe_Exception.thrown(("Invalid HTML value " + ("null" if match is None else match)))
                    return "".join(map(chr,[number]))
            return hx_strings__Pattern_MatcherImpl(_this.ereg,_this.pattern,_this.options,_hx_str).map(_hx_local_1)
        return _hx_local_2()

    @staticmethod
    def htmlEncode(_hx_str,escapeQuotes = None):
        if (escapeQuotes is None):
            escapeQuotes = False
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        sb = hx_strings_StringBuilder()
        isFirstSpace = True
        _g = 0
        _g1 = (0 if ((_hx_str is None)) else len(_hx_str))
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            ch = HxString.charCodeAt(_hx_str,i)
            ch1 = ch
            if (ch1 == 32):
                if isFirstSpace:
                    sb.add(" ")
                    isFirstSpace = False
                else:
                    sb.add("&nbsp;")
            elif (ch1 == 34):
                sb.add(("&quot;" if escapeQuotes else "\""))
            elif (ch1 == 38):
                sb.add("&amp;")
            elif (ch1 == 39):
                sb.add(("&#039;" if escapeQuotes else "'"))
            elif (ch1 == 60):
                sb.add("&lt;")
            elif (ch1 == 62):
                sb.add("&gt;")
            elif (ch > 127):
                sb.add("&#").add(Std.string(ch)).add(";")
            else:
                sb.addChar(ch)
            if (ch != 32):
                isFirstSpace = True
        return sb.toString()

    @staticmethod
    def insertAt(_hx_str,pos,insertion):
        if (_hx_str is None):
            return None
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (pos < 0):
            pos = (strLen + pos)
        if ((pos < 0) or ((pos > strLen))):
            raise haxe_Exception.thrown("Absolute value of [pos] must be <= str.length")
        if ((insertion is None) or ((len(insertion) == 0))):
            return _hx_str
        return ((Std.string(hx_strings_Strings.substring8(_hx_str,0,pos)) + Std.string(insertion)) + Std.string(hx_strings_Strings.substring8(_hx_str,pos)))

    @staticmethod
    def ifBlank(_hx_str,fallback):
        if (True if ((_hx_str is None)) else (len(StringTools.trim(_hx_str)) == 0)):
            return fallback
        else:
            return _hx_str

    @staticmethod
    def ifEmpty(_hx_str,fallback):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return fallback
        else:
            return _hx_str

    @staticmethod
    def ifNull(_hx_str,fallback):
        if (_hx_str is None):
            return fallback
        else:
            return _hx_str

    @staticmethod
    def indentLines(_hx_str,indentWith):
        if (_hx_str is None):
            return None
        if ((len(_hx_str) == 0) or (((indentWith is None) or ((len(indentWith) == 0))))):
            return _hx_str
        isFirstLine = True
        sb = hx_strings_StringBuilder()
        _g = 0
        _g1 = hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(_hx_str)
        while (_g < len(_g1)):
            line = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if isFirstLine:
                isFirstLine = False
            else:
                sb.newLine()
            sb.add(indentWith)
            sb.add(line)
        return sb.toString()

    @staticmethod
    def indexOf8(_hx_str,searchFor,startAt = None):
        if (startAt is None):
            startAt = 0
        if ((_hx_str is None) or ((searchFor is None))):
            return -1
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        searchForLen = (0 if ((searchFor is None)) else len(searchFor))
        if (startAt < 0):
            startAt = 0
        if (searchForLen == 0):
            if (startAt == 0):
                return 0
            if ((startAt > 0) and ((startAt < strLen))):
                return startAt
            return strLen
        if (startAt >= strLen):
            return -1
        if (startAt is None):
            return _hx_str.find(searchFor)
        else:
            return HxString.indexOfImpl(_hx_str,searchFor,startAt)

    @staticmethod
    def isBlank(_hx_str):
        if (_hx_str is None):
            return True
        else:
            return (len(StringTools.trim(_hx_str)) == 0)

    @staticmethod
    def isDigits(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return False
        _g = 0
        _g1 = (0 if ((_hx_str is None)) else len(_hx_str))
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            this1 = HxString.charCodeAt(_hx_str,i)
            if (not (((this1 > 47) and ((this1 < 58))))):
                return False
        return True

    @staticmethod
    def isEmpty(_hx_str):
        if (_hx_str is not None):
            return (len(_hx_str) == 0)
        else:
            return True

    @staticmethod
    def isNotBlank(_hx_str):
        if (_hx_str is not None):
            return (len(StringTools.trim(_hx_str)) > 0)
        else:
            return False

    @staticmethod
    def isNotEmpty(_hx_str):
        if (_hx_str is not None):
            return (len(_hx_str) > 0)
        else:
            return False

    @staticmethod
    def isLowerCase(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return False
        return (_hx_str == hx_strings_Strings.toLowerCase8(_hx_str))

    @staticmethod
    def isUpperCase(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return False
        return (_hx_str == hx_strings_Strings.toUpperCase8(_hx_str))

    @staticmethod
    def iterate(_hx_str,callback,separator = None):
        if (separator is None):
            separator = ""
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return
        _g = 0
        _g1 = hx_strings_Strings.split8(_hx_str,[separator])
        while (_g < len(_g1)):
            sub = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            callback(sub)

    @staticmethod
    def iterateChars(_hx_str,callback):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return
        _g = 0
        _g1 = (0 if ((_hx_str is None)) else len(_hx_str))
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            callback(HxString.charCodeAt(_hx_str,i))

    @staticmethod
    def lastIndexOf8(_hx_str,searchFor,startAt = None):
        if ((_hx_str is None) or ((searchFor is None))):
            return -1
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        searchForLen = (0 if ((searchFor is None)) else len(searchFor))
        if (startAt is None):
            startAt = strLen
        if (searchForLen == 0):
            if (startAt < 0):
                return 0
            if (startAt > strLen):
                return strLen
            return startAt
        if (startAt < 0):
            return -1
        elif (startAt >= strLen):
            startAt = (strLen - 1)
        strNeedsUTF8Workaround = (len(_hx_str) != strLen)
        searchForNeedsUTF8Workaround = (len(searchFor) != searchForLen)
        if (searchForNeedsUTF8Workaround and (not strNeedsUTF8Workaround)):
            return -1
        searchForChars = hx_strings_Strings.toChars(searchFor)
        startAt = (startAt + ((searchForLen - 1)))
        searchForPosToCheck = (searchForLen - 1)
        strPos = strLen
        while True:
            tmp = strPos
            strPos = (strPos - 1)
            if (not ((tmp > 0))):
                break
            if (strPos > startAt):
                continue
            strCh = HxString.charCodeAt(_hx_str,strPos)
            if (strCh == (searchForChars[searchForPosToCheck] if searchForPosToCheck >= 0 and searchForPosToCheck < len(searchForChars) else None)):
                if (searchForPosToCheck == 0):
                    return strPos
                searchForPosToCheck = (searchForPosToCheck - 1)
            else:
                searchForPosToCheck = (searchForLen - 1)
        return -1

    @staticmethod
    def length8(_hx_str):
        if (_hx_str is None):
            return 0
        return len(_hx_str)

    @staticmethod
    def left(_hx_str,_hx_len):
        if (((0 if ((_hx_str is None)) else len(_hx_str))) <= _hx_len):
            return _hx_str
        return hx_strings_Strings.substring8(_hx_str,0,_hx_len)

    @staticmethod
    def lpad(_hx_str,targetLength,padStr = None,canOverflow = None):
        if (padStr is None):
            padStr = " "
        if (canOverflow is None):
            canOverflow = True
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if ((_hx_str is None) or ((strLen > targetLength))):
            return _hx_str
        if ((padStr is None) or ((len(padStr) == 0))):
            padStr = " "
        sb = [_hx_str]
        padLen = (0 if ((padStr is None)) else len(padStr))
        while (strLen < targetLength):
            sb.insert(0, padStr)
            strLen = (strLen + padLen)
        if canOverflow:
            return "".join([python_Boot.toString1(x1,'') for x1 in sb])
        return hx_strings_Strings.right("".join([python_Boot.toString1(x1,'') for x1 in sb]),targetLength)

    @staticmethod
    def map(_hx_str,mapper,separator = None):
        if (separator is None):
            separator = ""
        if (_hx_str is None):
            return None
        if (separator is None):
            raise haxe_Exception.thrown("[separator] must not be null")
        return list(map(mapper,hx_strings_Strings.split8(_hx_str,[separator])))

    @staticmethod
    def prependIfMissing(_hx_str,suffix):
        if (_hx_str is None):
            return None
        if (len(_hx_str) == 0):
            return (("null" if suffix is None else suffix) + Std.string(_hx_str))
        if hx_strings_Strings.startsWith(_hx_str,suffix):
            return _hx_str
        return (("null" if suffix is None else suffix) + Std.string(_hx_str))

    @staticmethod
    def quoteDouble(_hx_str):
        if (_hx_str is None):
            return None
        if (len(_hx_str) == 0):
            return "\"\""
        tmp = None
        if (_hx_str is None):
            tmp = False
        else:
            startIndex = None
            tmp = (((_hx_str.find("\"") if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,"\"",startIndex))) > -1)
        if (not tmp):
            return (("\"" + Std.string(_hx_str)) + "\"")
        return (("\"" + Std.string(hx_strings_Strings.replaceAll(_hx_str,"\"","\\\""))) + "\"")

    @staticmethod
    def quoteSingle(_hx_str):
        if (_hx_str is None):
            return None
        if (len(_hx_str) == 0):
            return "''"
        tmp = None
        if (_hx_str is None):
            tmp = False
        else:
            startIndex = None
            tmp = (((_hx_str.find("'") if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,"'",startIndex))) > -1)
        if (not tmp):
            return (("'" + Std.string(_hx_str)) + "'")
        return (("'" + Std.string(hx_strings_Strings.replaceAll(_hx_str,"'","\\'"))) + "'")

    @staticmethod
    def removeAfter(_hx_str,searchFor):
        return hx_strings_Strings.substringBefore(_hx_str,searchFor)

    @staticmethod
    def removeAfterLast(_hx_str,searchFor):
        return hx_strings_Strings.substringBeforeLast(_hx_str,searchFor)

    @staticmethod
    def removeAfterIgnoreCase(_hx_str,searchFor):
        return hx_strings_Strings.substringBeforeIgnoreCase(_hx_str,searchFor)

    @staticmethod
    def removeAfterLastIgnoreCase(_hx_str,searchFor):
        return hx_strings_Strings.substringBeforeLastIgnoreCase(_hx_str,searchFor)

    @staticmethod
    def removeAt(_hx_str,pos,length):
        if (((_hx_str is None) or ((len(_hx_str) == 0))) or ((length < 1))):
            return _hx_str
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (pos < 0):
            pos = (strLen + pos)
        if (pos < 0):
            raise haxe_Exception.thrown("[pos] must be smaller than -1 * str.length")
        if ((pos + length) >= strLen):
            return hx_strings_Strings.substring8(_hx_str,0,pos)
        return (Std.string(hx_strings_Strings.substring8(_hx_str,0,pos)) + Std.string(hx_strings_Strings.substring8(_hx_str,(pos + length))))

    @staticmethod
    def removeBefore(_hx_str,searchFor):
        return hx_strings_Strings.substringAfter(_hx_str,searchFor)

    @staticmethod
    def removeBeforeLast(_hx_str,searchFor):
        return hx_strings_Strings.substringAfterLast(_hx_str,searchFor)

    @staticmethod
    def removeBeforeIgnoreCase(_hx_str,searchFor):
        return hx_strings_Strings.substringAfterIgnoreCase(_hx_str,searchFor)

    @staticmethod
    def removeBeforeLastIgnoreCase(_hx_str,searchFor):
        return hx_strings_Strings.substringAfterLastIgnoreCase(_hx_str,searchFor)

    @staticmethod
    def removeAll(searchIn,searchFor):
        return hx_strings_Strings.replaceAll(searchIn,searchFor,"")

    @staticmethod
    def removeFirst(searchIn,searchFor):
        return hx_strings_Strings.replaceFirst(searchIn,searchFor,"")

    @staticmethod
    def removeFirstIgnoreCase(searchIn,searchFor):
        return hx_strings_Strings.replaceFirstIgnoreCase(searchIn,searchFor,"")

    @staticmethod
    def removeAnsi(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return hx_strings_Strings.REGEX_ANSI_ESC.ereg.replace(_hx_str,"")

    @staticmethod
    def removeLeading(searchIn,searchFor):
        if (((searchIn is None) or ((len(searchIn) == 0))) or (((searchFor is None) or ((len(searchFor) == 0))))):
            return searchIn
        while hx_strings_Strings.startsWith(searchIn,searchFor):
            searchIn = HxString.substring(searchIn,len(searchFor),len(searchIn))
        return searchIn

    @staticmethod
    def removeTags(xml):
        if ((xml is None) or ((len(xml) == 0))):
            return xml
        return hx_strings_Strings.REGEX_REMOVE_XML_TAGS.ereg.replace(xml,"")

    @staticmethod
    def removeTrailing(searchIn,searchFor):
        if (((searchIn is None) or ((len(searchIn) == 0))) or (((searchFor is None) or ((len(searchFor) == 0))))):
            return searchIn
        while hx_strings_Strings.endsWith(searchIn,searchFor):
            searchIn = HxString.substring(searchIn,0,(len(searchIn) - len(searchFor)))
        return searchIn

    @staticmethod
    def repeat(_hx_str,count,separator = None):
        if (separator is None):
            separator = ""
        if (_hx_str is None):
            return None
        if (count < 1):
            return ""
        if (count == 1):
            return _hx_str
        _g = []
        _g1 = 0
        _g2 = count
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(_hx_str)
        return separator.join([python_Boot.toString1(x1,'') for x1 in _g])

    @staticmethod
    def replaceAll(searchIn,searchFor,replaceWith):
        if (((searchIn is None) or (((searchIn is None) or ((len(searchIn) == 0))))) or ((searchFor is None))):
            return searchIn
        if (replaceWith is None):
            replaceWith = "null"
        return StringTools.replace(searchIn,searchFor,replaceWith)

    @staticmethod
    def replaceFirst(searchIn,searchFor,replaceWith):
        if (((searchIn is None) or (((searchIn is None) or ((len(searchIn) == 0))))) or ((searchFor is None))):
            return searchIn
        if (replaceWith is None):
            replaceWith = "null"
        foundAt = None
        if (len(searchFor) == 0):
            if (((0 if ((searchIn is None)) else len(searchIn))) > 1):
                foundAt = 1
            else:
                return searchIn
        else:
            foundAt = hx_strings_Strings.indexOf8(searchIn,searchFor)
        return ((Std.string(hx_strings_Strings.substr8(searchIn,0,foundAt)) + ("null" if replaceWith is None else replaceWith)) + Std.string(hx_strings_Strings.substr8(searchIn,(foundAt + ((0 if ((searchFor is None)) else len(searchFor)))))))

    @staticmethod
    def replaceFirstIgnoreCase(searchIn,searchFor,replaceWith):
        if (((searchIn is None) or (((searchIn is None) or ((len(searchIn) == 0))))) or ((searchFor is None))):
            return searchIn
        if (replaceWith is None):
            replaceWith = "null"
        searchFor = searchFor.lower()
        foundAt = None
        if (len(searchFor) == 0):
            if (((0 if ((searchIn is None)) else len(searchIn))) > 1):
                foundAt = 1
            else:
                return searchIn
        else:
            foundAt = hx_strings_Strings.indexOf8(searchIn.lower(),searchFor)
        return ((Std.string(hx_strings_Strings.substr8(searchIn,0,foundAt)) + ("null" if replaceWith is None else replaceWith)) + Std.string(hx_strings_Strings.substr8(searchIn,(foundAt + ((0 if ((searchFor is None)) else len(searchFor)))))))

    @staticmethod
    def reverse(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        chars = hx_strings_Strings.split8(_hx_str,[""])
        chars.reverse()
        return "".join([python_Boot.toString1(x1,'') for x1 in chars])

    @staticmethod
    def right(_hx_str,_hx_len):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return hx_strings_Strings.substring8(_hx_str,(((0 if ((_hx_str is None)) else len(_hx_str))) - _hx_len))

    @staticmethod
    def rpad(_hx_str,targetLength,padStr = None,canOverflow = None):
        if (padStr is None):
            padStr = " "
        if (canOverflow is None):
            canOverflow = True
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if ((_hx_str is None) or ((strLen > targetLength))):
            return _hx_str
        if ((padStr is None) or ((len(padStr) == 0))):
            padStr = " "
        padLen = (0 if ((padStr is None)) else len(padStr))
        sb = hx_strings_StringBuilder(_hx_str)
        while (strLen < targetLength):
            sb.add(padStr)
            strLen = (strLen + padLen)
        if canOverflow:
            return sb.toString()
        _hx_str = sb.toString()
        return (_hx_str if ((((0 if ((_hx_str is None)) else len(_hx_str))) <= targetLength)) else hx_strings_Strings.substring8(_hx_str,0,targetLength))

    @staticmethod
    def split8(_hx_str,separator,maxParts = None):
        if (maxParts is None):
            maxParts = 0
        if ((_hx_str is None) or ((separator is None))):
            return None
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (strLen == 0):
            return []
        def _hx_local_0(s):
            return (s is not None)
        separators = list(filter(_hx_local_0,separator))
        if (len(separators) == 0):
            return None
        if ((maxParts <= 0) and ((len(separators) == 1))):
            delimiter = (separators[0] if 0 < len(separators) else None)
            if (delimiter == ""):
                return list(_hx_str)
            else:
                return _hx_str.split(delimiter)
        if (python_internal_ArrayImpl.indexOf(separators,"",None) > -1):
            if (maxParts <= 0):
                _g = []
                _g1 = 0
                _g2 = strLen
                while (_g1 < _g2):
                    i = _g1
                    _g1 = (_g1 + 1)
                    x = HxString.substr(_hx_str,i,1)
                    _g.append(x)
                return _g
            if (maxParts > strLen):
                maxParts = strLen
            maxParts = (maxParts - 1)
            _g = []
            _g1 = 0
            _g2 = maxParts
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                x = HxString.substr(_hx_str,i,1)
                _g.append(x)
            result = _g
            x = HxString.substr(_hx_str,maxParts,(strLen - maxParts))
            result.append(x)
            return result
        _g = []
        _g1 = 0
        while (_g1 < len(separators)):
            sep = (separators[_g1] if _g1 >= 0 and _g1 < len(separators) else None)
            _g1 = (_g1 + 1)
            x = (0 if ((sep is None)) else len(sep))
            _g.append(x)
        separatorsLengths = _g
        lastFoundAt = 0
        result = []
        resultCount = 0
        while True:
            separatorLen = 0
            foundAt = -1
            _g = 0
            _g1 = len(separators)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sepFoundAt = hx_strings_Strings.indexOf8(_hx_str,(separators[i] if i >= 0 and i < len(separators) else None),lastFoundAt)
                if (sepFoundAt != -1):
                    if ((foundAt == -1) or ((sepFoundAt < foundAt))):
                        foundAt = sepFoundAt
                        separatorLen = (separatorsLengths[i] if i >= 0 and i < len(separatorsLengths) else None)
            resultCount = (resultCount + 1)
            if ((foundAt == -1) or ((resultCount == maxParts))):
                x = HxString.substr(_hx_str,lastFoundAt,(strLen - lastFoundAt))
                result.append(x)
                break
            x1 = HxString.substr(_hx_str,lastFoundAt,(foundAt - lastFoundAt))
            result.append(x1)
            lastFoundAt = (foundAt + separatorLen)
        return result

    @staticmethod
    def splitAt(_hx_str,splitPos):
        if (_hx_str is None):
            return None
        if ((splitPos is None) or ((len(splitPos) == 0))):
            return [_hx_str]
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (strLen == 0):
            return [_hx_str]
        pos = list()
        _g = 0
        _g1 = splitPos
        while (_g < len(_g1)):
            p = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (p < 0):
                p = (strLen + p)
            if ((p < 0) or ((p >= strLen))):
                continue
            if (python_internal_ArrayImpl.indexOf(pos,p,None) > -1):
                continue
            pos.append(p)
        def _hx_local_1(a,b):
            if (a < b):
                return -1
            elif (a > b):
                return 1
            else:
                return 0
        pos.sort(key= python_lib_Functools.cmp_to_key(_hx_local_1))
        result = list()
        lastPos = 0
        _g = 0
        while (_g < len(pos)):
            p = (pos[_g] if _g >= 0 and _g < len(pos) else None)
            _g = (_g + 1)
            chunk = hx_strings_Strings.substring8(_hx_str,lastPos,p)
            if ((chunk is not None) and ((len(chunk) > 0))):
                result.append(chunk)
            lastPos = p
        chunk = hx_strings_Strings.substring8(_hx_str,lastPos)
        if ((chunk is not None) and ((len(chunk) > 0))):
            result.append(chunk)
        return result

    @staticmethod
    def splitEvery(_hx_str,count):
        if (_hx_str is None):
            return None
        if (count < 1):
            raise haxe_Exception.thrown("[count] must be greater than 0")
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if ((strLen == 0) or ((count >= strLen))):
            return [_hx_str]
        result = list()
        pos = 0
        while True:
            chunk = hx_strings_Strings.substr8(_hx_str,pos,count)
            pos = (pos + count)
            if ((chunk is None) or ((len(chunk) == 0))):
                break
            result.append(chunk)
        return result

    @staticmethod
    def splitLines(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return []
        else:
            return hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(_hx_str)

    @staticmethod
    def startsWith(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        if (((searchFor is None) or ((len(searchFor) == 0))) or ((searchIn == searchFor))):
            return True
        return searchIn.startswith(searchFor)

    @staticmethod
    def startsWithAny(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            if ((candidate is not None) and hx_strings_Strings.startsWith(searchIn,candidate)):
                return True
        return False

    @staticmethod
    def startsWithAnyIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        searchIn = hx_strings_Strings.toLowerCase8(searchIn)
        _g = 0
        while (_g < len(searchFor)):
            candidate = (searchFor[_g] if _g >= 0 and _g < len(searchFor) else None)
            _g = (_g + 1)
            if ((candidate is not None) and hx_strings_Strings.startsWith(searchIn,hx_strings_Strings.toLowerCase8(candidate))):
                return True
        return False

    @staticmethod
    def startsWithIgnoreCase(searchIn,searchFor):
        if ((searchIn is None) or ((searchFor is None))):
            return False
        if ((searchFor is None) or ((len(searchFor) == 0))):
            return True
        return hx_strings_Strings.startsWith(searchIn.lower(),searchFor.lower())

    @staticmethod
    def substr8(_hx_str,startAt,_hx_len = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if (_hx_len is None):
            _hx_len = (0 if ((_hx_str is None)) else len(_hx_str))
        if (_hx_len <= 0):
            return ""
        if (startAt < 0):
            startAt = (startAt + (0 if ((_hx_str is None)) else len(_hx_str)))
            if (startAt < 0):
                startAt = 0
        return HxString.substr(_hx_str,startAt,_hx_len)

    @staticmethod
    def substring8(_hx_str,startAt,endAt = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if (endAt is None):
            endAt = (0 if ((_hx_str is None)) else len(_hx_str))
        return HxString.substring(_hx_str,startAt,endAt)

    @staticmethod
    def substringAfter(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return _hx_str
        if ((HxOverrides.eq(_hx_str,"") or ((searchFor is None))) or ((searchFor == ""))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = None
        foundAt = (_hx_str.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,searchFor,startIndex))
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAt + len(searchFor)),None)

    @staticmethod
    def substringAfterIgnoreCase(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        searchFor = searchFor.lower()
        _this = _hx_str.lower()
        startIndex = None
        foundAt = (_this.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(_this,searchFor,startIndex))
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAt + len(searchFor)),None)

    @staticmethod
    def substringBetween(_hx_str,after,before = None,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (before is None):
            before = after
        if ((HxOverrides.eq(_hx_str,"") or (((after is None) or ((len(after) == 0))))) or (((before is None) or ((len(before) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = None
        foundAfterAt = (_hx_str.find(after) if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,after,startIndex))
        if (foundAfterAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = (foundAfterAt + len(after))
        foundBeforeAt = (_hx_str.find(before) if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,before,startIndex))
        if (foundBeforeAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAfterAt + len(after)),foundBeforeAt)

    @staticmethod
    def substringBetweenIgnoreCase(_hx_str,after,before = None,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (before is None):
            before = after
        if ((HxOverrides.eq(_hx_str,"") or (((after is None) or ((len(after) == 0))))) or (((before is None) or ((len(before) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        strLower = hx_strings_Strings.toLowerCase8(_hx_str)
        after1 = hx_strings_Strings.toLowerCase8(after)
        before1 = hx_strings_Strings.toLowerCase8(before)
        startIndex = None
        foundAfterAt = (strLower.find(after1) if ((startIndex is None)) else HxString.indexOfImpl(strLower,after1,startIndex))
        if (foundAfterAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = (foundAfterAt + len(after1))
        foundBeforeAt = (strLower.find(before1) if ((startIndex is None)) else HxString.indexOfImpl(strLower,before1,startIndex))
        if (foundBeforeAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAfterAt + len(after1)),foundBeforeAt)

    @staticmethod
    def substringAfterLast(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = None
        foundAt = None
        if (startIndex is None):
            foundAt = _hx_str.rfind(searchFor, 0, len(_hx_str))
        elif (searchFor == ""):
            length = len(_hx_str)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            foundAt = (length if ((startIndex > length)) else startIndex)
        else:
            i = _hx_str.rfind(searchFor, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(searchFor))) if ((i == -1)) else (i + 1))
            check = _hx_str.find(searchFor, startLeft, len(_hx_str))
            foundAt = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAt + len(searchFor)),None)

    @staticmethod
    def substringAfterLastIgnoreCase(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        searchFor = searchFor.lower()
        _this = _hx_str.lower()
        startIndex = None
        foundAt = None
        if (startIndex is None):
            foundAt = _this.rfind(searchFor, 0, len(_this))
        elif (searchFor == ""):
            length = len(_this)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            foundAt = (length if ((startIndex > length)) else startIndex)
        else:
            i = _this.rfind(searchFor, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(searchFor))) if ((i == -1)) else (i + 1))
            check = _this.find(searchFor, startLeft, len(_this))
            foundAt = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,(foundAt + len(searchFor)),None)

    @staticmethod
    def substringBefore(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = None
        foundAt = (_hx_str.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(_hx_str,searchFor,startIndex))
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,0,foundAt)

    @staticmethod
    def substringBeforeIgnoreCase(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        searchFor = searchFor.lower()
        _this = _hx_str.lower()
        startIndex = None
        foundAt = (_this.find(searchFor) if ((startIndex is None)) else HxString.indexOfImpl(_this,searchFor,startIndex))
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,0,foundAt)

    @staticmethod
    def substringBeforeLast(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        startIndex = None
        foundAt = None
        if (startIndex is None):
            foundAt = _hx_str.rfind(searchFor, 0, len(_hx_str))
        elif (searchFor == ""):
            length = len(_hx_str)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            foundAt = (length if ((startIndex > length)) else startIndex)
        else:
            i = _hx_str.rfind(searchFor, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(searchFor))) if ((i == -1)) else (i + 1))
            check = _hx_str.find(searchFor, startLeft, len(_hx_str))
            foundAt = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,0,foundAt)

    @staticmethod
    def substringBeforeLastIgnoreCase(_hx_str,searchFor,notFoundDefault = None):
        if (notFoundDefault is None):
            notFoundDefault = 2
        if (_hx_str is None):
            return None
        if (HxOverrides.eq(_hx_str,"") or (((searchFor is None) or ((len(searchFor) == 0))))):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        searchFor = searchFor.lower()
        _this = _hx_str.lower()
        startIndex = None
        foundAt = None
        if (startIndex is None):
            foundAt = _this.rfind(searchFor, 0, len(_this))
        elif (searchFor == ""):
            length = len(_this)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            foundAt = (length if ((startIndex > length)) else startIndex)
        else:
            i = _this.rfind(searchFor, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(searchFor))) if ((i == -1)) else (i + 1))
            check = _this.find(searchFor, startLeft, len(_this))
            foundAt = (check if (((check > i) and ((check <= startIndex)))) else i)
        if (foundAt == -1):
            tmp = None
            notFoundDefault1 = notFoundDefault
            if (notFoundDefault1 == 1):
                tmp = None
            elif (notFoundDefault1 == 2):
                tmp = ""
            elif (notFoundDefault1 == 3):
                tmp = _hx_str
            else:
                pass
            return tmp
        return HxString.substring(_hx_str,0,foundAt)

    @staticmethod
    def toBool(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return False
        _g = _hx_str.lower()
        _hx_local_0 = len(_g)
        if (_hx_local_0 == 1):
            if (_g == "0"):
                return False
            else:
                return True
        elif (_hx_local_0 == 5):
            if (_g == "false"):
                return False
            else:
                return True
        elif (_hx_local_0 == 2):
            if (_g == "no"):
                return False
            else:
                return True
        else:
            return True

    @staticmethod
    def toBytes(_hx_str):
        if (_hx_str is None):
            return None
        return haxe_io_Bytes.ofString(_hx_str)

    @staticmethod
    def toChar(charCode):
        return charCode

    @staticmethod
    def toCharIterator(_hx_str):
        if (_hx_str is None):
            return hx_strings__CharIterator_NullCharIterator.INSTANCE
        else:
            return hx_strings__CharIterator_StringCharIterator(_hx_str,0)

    @staticmethod
    def toChars(_hx_str):
        if (_hx_str is None):
            return None
        strLen = (0 if ((_hx_str is None)) else len(_hx_str))
        if (strLen == 0):
            return []
        _g = []
        _g1 = 0
        _g2 = strLen
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            x = HxString.charCodeAt(_hx_str,i)
            _g.append(x)
        return _g

    @staticmethod
    def toPattern(_hx_str,options = None):
        if (_hx_str is None):
            return None
        return hx_strings_Pattern.compile(_hx_str,options)

    @staticmethod
    def toEReg(_hx_str,opt = None):
        if (opt is None):
            opt = ""
        if (_hx_str is None):
            raise haxe_Exception.thrown("[str] must not be null")
        return EReg(_hx_str,opt)

    @staticmethod
    def toFloat(_hx_str,ifUnparseable):
        if (_hx_str is None):
            return ifUnparseable
        result = Std.parseFloat(_hx_str)
        if python_lib_Math.isnan(result):
            return ifUnparseable
        else:
            return result

    @staticmethod
    def toFloatOrNull(_hx_str,ifUnparseable = None):
        if (_hx_str is None):
            return ifUnparseable
        result = Std.parseFloat(_hx_str)
        if python_lib_Math.isnan(result):
            return ifUnparseable
        else:
            return result

    @staticmethod
    def toHex(num,minDigits = None,upperCase = None):
        if (minDigits is None):
            minDigits = 0
        if (upperCase is None):
            upperCase = True
        hexed = StringTools.hex(num,0)
        if (not upperCase):
            return hexed.lower()
        if (len(hexed) >= minDigits):
            return hexed
        return hx_strings_Strings.lpad(hexed,minDigits,"0")

    @staticmethod
    def toInt(_hx_str,ifUnparseable):
        if (_hx_str is None):
            return ifUnparseable
        result = Std.parseInt(_hx_str)
        if (result is None):
            return ifUnparseable
        else:
            return result

    @staticmethod
    def toIntOrNull(_hx_str,ifUnparseable = None):
        if (_hx_str is None):
            return ifUnparseable
        result = Std.parseInt(_hx_str)
        if (result is None):
            return ifUnparseable
        else:
            return result

    @staticmethod
    def toLowerCase8(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return _hx_str.lower()

    @staticmethod
    def toLowerCaseFirstChar(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        this1 = HxString.charCodeAt(_hx_str,0)
        lowerChar = hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapU2L.h.get(this1,None)
        firstChar = (this1 if ((lowerChar is None)) else lowerChar)
        if (len(_hx_str) == 1):
            return "".join(map(chr,[firstChar]))
        other = hx_strings_Strings.substr8(_hx_str,1)
        return (HxOverrides.stringOrNull("".join(map(chr,[firstChar]))) + ("null" if other is None else other))

    @staticmethod
    def toLowerCamel(_hx_str,keepUppercasedWords = None):
        if (keepUppercasedWords is None):
            keepUppercasedWords = True
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        sb = hx_strings_StringBuilder()
        if keepUppercasedWords:
            _g = 0
            _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)
            while (_g < len(_g1)):
                word = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                sb.add(hx_strings_Strings.toUpperCaseFirstChar(word))
        else:
            _g = 0
            _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)
            while (_g < len(_g1)):
                word = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                sb.add(hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(word)))
        return hx_strings_Strings.toLowerCaseFirstChar(sb.toString())

    @staticmethod
    def toLowerHyphen(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        def _hx_local_0(s):
            return hx_strings_Strings.toLowerCase8(s)
        _this = list(map(_hx_local_0,hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)))
        return "-".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def toLowerUnderscore(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        def _hx_local_0(s):
            return hx_strings_Strings.toLowerCase8(s)
        _this = list(map(_hx_local_0,hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)))
        return "_".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def toTitle(_hx_str,keepUppercasedWords = None):
        if (keepUppercasedWords is None):
            keepUppercasedWords = True
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if keepUppercasedWords:
            def _hx_local_0(s):
                if (hx_strings_Strings.toUpperCase8(s) == s):
                    return s
                else:
                    return hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(s))
            _this = list(map(_hx_local_0,hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)))
            return " ".join([python_Boot.toString1(x1,'') for x1 in _this])
        def _hx_local_1(s):
            return hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(s))
        _this = list(map(_hx_local_1,hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)))
        return " ".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def toUpperCamel(_hx_str,keepUppercasedWords = None):
        if (keepUppercasedWords is None):
            keepUppercasedWords = True
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        sb = hx_strings_StringBuilder()
        if keepUppercasedWords:
            _g = 0
            _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)
            while (_g < len(_g1)):
                word = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                sb.add(hx_strings_Strings.toUpperCaseFirstChar(word))
        else:
            _g = 0
            _g1 = hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)
            while (_g < len(_g1)):
                word = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                sb.add(hx_strings_Strings.toUpperCaseFirstChar(hx_strings_Strings.toLowerCase8(word)))
        return sb.toString()

    @staticmethod
    def toUpperUnderscore(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        def _hx_local_0(s):
            return hx_strings_Strings.toUpperCase8(s)
        _this = list(map(_hx_local_0,hx_strings_Strings._splitAsciiWordsUnsafe(_hx_str)))
        return "_".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def toString(_hx_str):
        if (_hx_str is None):
            return "null"
        else:
            return _hx_str

    @staticmethod
    def toUpperCase8(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return _hx_str.upper()

    @staticmethod
    def toUpperCaseFirstChar(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        this1 = HxString.charCodeAt(_hx_str,0)
        upperChar = hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER.mapL2U.h.get(this1,None)
        firstChar = (this1 if ((upperChar is None)) else upperChar)
        if (len(_hx_str) == 1):
            return "".join(map(chr,[firstChar]))
        other = hx_strings_Strings.substr8(_hx_str,1)
        return (HxOverrides.stringOrNull("".join(map(chr,[firstChar]))) + ("null" if other is None else other))

    @staticmethod
    def trim(_hx_str,charsToRemove = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if (charsToRemove is None):
            return StringTools.trim(_hx_str)
        removableChars = None
        _g = charsToRemove
        removableChars1 = _g.index
        if (removableChars1 == 0):
            str1 = _g.params[0]
            removableChars = hx_strings_Strings.toChars(str1)
        elif (removableChars1 == 1):
            chars = _g.params[0]
            removableChars = chars
        else:
            pass
        return hx_strings_Strings.trimLeft(hx_strings_Strings.trimRight(_hx_str,hx_strings_internal__Either2__Either2.b(removableChars)),hx_strings_internal__Either2__Either2.b(removableChars))

    @staticmethod
    def trimRight(_hx_str,charsToRemove = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        if (charsToRemove is None):
            return StringTools.rtrim(_hx_str)
        removableChars = None
        _g = charsToRemove
        removableChars1 = _g.index
        if (removableChars1 == 0):
            str1 = _g.params[0]
            removableChars = hx_strings_Strings.toChars(str1)
        elif (removableChars1 == 1):
            chars = _g.params[0]
            removableChars = chars
        else:
            pass
        if (len(removableChars) == 0):
            return _hx_str
        _hx_len = (0 if ((_hx_str is None)) else len(_hx_str))
        i = (_hx_len - 1)
        while ((i > -1) and ((python_internal_ArrayImpl.indexOf(removableChars,hx_strings_Strings.charCodeAt8(hx_strings_Strings.charAt8(_hx_str,i),0),None) > -1))):
            i = (i - 1)
        if (i < ((_hx_len - 1))):
            return hx_strings_Strings.substring8(_hx_str,0,(i + 1))
        return _hx_str

    @staticmethod
    def trimLeft(_hx_str,charsToRemove = None):
        if (_hx_str is None):
            return _hx_str
        if (charsToRemove is None):
            return StringTools.ltrim(_hx_str)
        removableChars = None
        _g = charsToRemove
        removableChars1 = _g.index
        if (removableChars1 == 0):
            str1 = _g.params[0]
            removableChars = hx_strings_Strings.toChars(str1)
        elif (removableChars1 == 1):
            chars = _g.params[0]
            removableChars = chars
        else:
            pass
        if (len(removableChars) == 0):
            return _hx_str
        _hx_len = (0 if ((_hx_str is None)) else len(_hx_str))
        i = 0
        while ((i < _hx_len) and ((python_internal_ArrayImpl.indexOf(removableChars,hx_strings_Strings.charCodeAt8(hx_strings_Strings.charAt8(_hx_str,i),0),None) > -1))):
            i = (i + 1)
        if (i > 0):
            return hx_strings_Strings.substring8(_hx_str,i,_hx_len)
        return _hx_str

    @staticmethod
    def trimLines(_hx_str,charsToRemove = None):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        def _hx_local_0(line):
            return hx_strings_Strings.trim(line,charsToRemove)
        _this = list(map(_hx_local_0,hx_strings_Strings.REGEX_SPLIT_LINES.ereg.split(_hx_str)))
        return "\n".join([python_Boot.toString1(x1,'') for x1 in _this])

    @staticmethod
    def trimToNull(_hx_str):
        if (_hx_str is None):
            return None
        trimmed = hx_strings_Strings.trim(_hx_str)
        if ((trimmed is None) or ((len(trimmed) == 0))):
            return None
        return trimmed

    @staticmethod
    def trimToEmpty(_hx_str):
        trimmed = hx_strings_Strings.trim(_hx_str)
        if ((trimmed is None) or ((len(trimmed) == 0))):
            return ""
        return trimmed

    @staticmethod
    def truncate(_hx_str,maxLength):
        if (((0 if ((_hx_str is None)) else len(_hx_str))) <= maxLength):
            return _hx_str
        else:
            return hx_strings_Strings.substring8(_hx_str,0,maxLength)

    @staticmethod
    def urlDecode(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return python_lib_urllib_Parse.unquote(_hx_str)

    @staticmethod
    def urlEncode(_hx_str):
        if ((_hx_str is None) or ((len(_hx_str) == 0))):
            return _hx_str
        return python_lib_urllib_Parse.quote(_hx_str,"")

    @staticmethod
    def wrap(_hx_str,maxLineLength,splitLongWords = None,newLineSeparator = None):
        if (splitLongWords is None):
            splitLongWords = True
        if (newLineSeparator is None):
            newLineSeparator = "\n"
        if ((((0 if ((_hx_str is None)) else len(_hx_str))) <= maxLineLength) or ((maxLineLength < 1))):
            return _hx_str
        sb = hx_strings_StringBuilder()
        wordChars = []
        currLineLength = 0
        _g = 0
        _g1 = hx_strings_Strings.toChars(_hx_str)
        while (_g < len(_g1)):
            ch = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (((ch > 8) and ((ch < 14))) or ((ch == 32))):
                if (len(wordChars) > 0):
                    _g2 = 0
                    while (_g2 < len(wordChars)):
                        wordCh = (wordChars[_g2] if _g2 >= 0 and _g2 < len(wordChars) else None)
                        _g2 = (_g2 + 1)
                        if ((currLineLength == maxLineLength) and splitLongWords):
                            sb.add(newLineSeparator)
                            currLineLength = 0
                        currLineLength = (currLineLength + 1)
                        sb.addChar(wordCh)
                    wordChars = []
                if (currLineLength >= maxLineLength):
                    sb.add(newLineSeparator)
                    currLineLength = 0
                sb.addChar(ch)
                currLineLength = (currLineLength + 1)
            else:
                wordChars.append(ch)
        if (len(wordChars) > 0):
            _g = 0
            while (_g < len(wordChars)):
                wordCh = (wordChars[_g] if _g >= 0 and _g < len(wordChars) else None)
                _g = (_g + 1)
                if ((currLineLength == maxLineLength) and splitLongWords):
                    sb.add(newLineSeparator)
                    currLineLength = 0
                currLineLength = (currLineLength + 1)
                sb.addChar(wordCh)
        return sb.toString()
hx_strings_Strings._hx_class = hx_strings_Strings
_hx_classes["hx.strings.Strings"] = hx_strings_Strings


class hx_strings_StringDiff:
    _hx_class_name = "hx.strings.StringDiff"
    _hx_is_interface = "False"
    __slots__ = ("at", "left", "right")
    _hx_fields = ["at", "left", "right"]
    _hx_methods = ["toString"]

    def __init__(self):
        self.right = None
        self.left = None
        self.at = -1

    def toString(self):
        return (((((("StringDiff[at=" + Std.string(self.at)) + ", left=") + HxOverrides.stringOrNull(self.left)) + ", right=") + HxOverrides.stringOrNull(self.right)) + "]")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.at = None
        _hx_o.left = None
        _hx_o.right = None
hx_strings_StringDiff._hx_class = hx_strings_StringDiff
_hx_classes["hx.strings.StringDiff"] = hx_strings_StringDiff

class hx_strings_HashCodeAlgorithm(Enum):
    __slots__ = ()
    _hx_class_name = "hx.strings.HashCodeAlgorithm"
    _hx_constructs = ["PLATFORM_SPECIFIC", "ADLER32", "CRC32B", "DJB2A", "JAVA", "SDBM"]
hx_strings_HashCodeAlgorithm.PLATFORM_SPECIFIC = hx_strings_HashCodeAlgorithm("PLATFORM_SPECIFIC", 0, ())
hx_strings_HashCodeAlgorithm.ADLER32 = hx_strings_HashCodeAlgorithm("ADLER32", 1, ())
hx_strings_HashCodeAlgorithm.CRC32B = hx_strings_HashCodeAlgorithm("CRC32B", 2, ())
hx_strings_HashCodeAlgorithm.DJB2A = hx_strings_HashCodeAlgorithm("DJB2A", 3, ())
hx_strings_HashCodeAlgorithm.JAVA = hx_strings_HashCodeAlgorithm("JAVA", 4, ())
hx_strings_HashCodeAlgorithm.SDBM = hx_strings_HashCodeAlgorithm("SDBM", 5, ())
hx_strings_HashCodeAlgorithm._hx_class = hx_strings_HashCodeAlgorithm
_hx_classes["hx.strings.HashCodeAlgorithm"] = hx_strings_HashCodeAlgorithm

class hx_strings_AnsiToHtmlRenderMethod(Enum):
    __slots__ = ()
    _hx_class_name = "hx.strings.AnsiToHtmlRenderMethod"
    _hx_constructs = ["StyleAttributes", "CssClasses", "CssClassesCallback"]

    @staticmethod
    def CssClassesCallback(func):
        return hx_strings_AnsiToHtmlRenderMethod("CssClassesCallback", 2, (func,))
hx_strings_AnsiToHtmlRenderMethod.StyleAttributes = hx_strings_AnsiToHtmlRenderMethod("StyleAttributes", 0, ())
hx_strings_AnsiToHtmlRenderMethod.CssClasses = hx_strings_AnsiToHtmlRenderMethod("CssClasses", 1, ())
hx_strings_AnsiToHtmlRenderMethod._hx_class = hx_strings_AnsiToHtmlRenderMethod
_hx_classes["hx.strings.AnsiToHtmlRenderMethod"] = hx_strings_AnsiToHtmlRenderMethod


class hx_strings_AnsiState:
    _hx_class_name = "hx.strings.AnsiState"
    _hx_is_interface = "False"
    __slots__ = ("bgcolor", "blink", "bold", "fgcolor", "underline")
    _hx_fields = ["bgcolor", "blink", "bold", "fgcolor", "underline"]
    _hx_methods = ["isActive", "reset", "copyFrom", "setGraphicModeParameter", "toCSS"]
    _hx_statics = ["defaultCssClassesCallback"]

    def __init__(self,copyFrom = None):
        self.fgcolor = None
        self.bgcolor = None
        self.underline = False
        self.bold = False
        self.blink = False
        if (copyFrom is None):
            self.reset()
        else:
            self.copyFrom(copyFrom)

    def isActive(self):
        if (not (((((self.fgcolor is not None) or ((self.bgcolor is not None))) or self.bold) or self.underline))):
            return self.blink
        else:
            return True

    def reset(self):
        self.fgcolor = None
        self.bgcolor = None
        self.bold = False
        self.underline = False
        self.blink = False

    def copyFrom(self,other):
        self.fgcolor = other.fgcolor
        self.bgcolor = other.bgcolor
        self.bold = other.bold
        self.underline = other.underline
        self.blink = other.blink

    def setGraphicModeParameter(self,param):
        param1 = param
        if (param1 == 0):
            self.reset()
        elif (param1 == 1):
            self.bold = True
        elif (param1 == 4):
            self.underline = True
        elif (param1 == 5):
            self.blink = True
        elif (param1 == 30):
            self.fgcolor = "black"
        elif (param1 == 31):
            self.fgcolor = "red"
        elif (param1 == 32):
            self.fgcolor = "green"
        elif (param1 == 33):
            self.fgcolor = "yellow"
        elif (param1 == 34):
            self.fgcolor = "blue"
        elif (param1 == 35):
            self.fgcolor = "magenta"
        elif (param1 == 36):
            self.fgcolor = "cyan"
        elif (param1 == 37):
            self.fgcolor = "white"
        elif (param1 == 40):
            self.bgcolor = "black"
        elif (param1 == 41):
            self.bgcolor = "red"
        elif (param1 == 42):
            self.bgcolor = "green"
        elif (param1 == 43):
            self.bgcolor = "yellow"
        elif (param1 == 44):
            self.bgcolor = "blue"
        elif (param1 == 45):
            self.bgcolor = "magenta"
        elif (param1 == 46):
            self.bgcolor = "cyan"
        elif (param1 == 47):
            self.bgcolor = "white"
        else:
            pass

    def toCSS(self,renderMethod):
        if (((((self.fgcolor is not None) or ((self.bgcolor is not None))) or self.bold) or self.underline) or self.blink):
            sb = hx_strings_StringBuilder()
            if (renderMethod is None):
                renderMethod = hx_strings_AnsiToHtmlRenderMethod.StyleAttributes
            tmp = renderMethod.index
            if (tmp == 0):
                if (self.fgcolor is not None):
                    sb.add("color:").add(self.fgcolor).add(";")
                if (self.bgcolor is not None):
                    sb.add("background-color:").add(self.bgcolor).add(";")
                if self.bold:
                    sb.add("font-weight:bold;")
                if self.underline:
                    sb.add("text-decoration:underline;")
                if self.blink:
                    sb.add("text-decoration:blink;")
            elif (tmp == 1):
                sb.add(hx_strings_AnsiState.defaultCssClassesCallback(self))
            elif (tmp == 2):
                func = renderMethod.params[0]
                sb.add(func(self))
            else:
                pass
            return sb.toString()
        return ""

    @staticmethod
    def defaultCssClassesCallback(state):
        classes = []
        if (state.fgcolor is not None):
            x = ("ansi_fg_" + HxOverrides.stringOrNull(state.fgcolor))
            classes.append(x)
        if (state.bgcolor is not None):
            x = ("ansi_bg_" + HxOverrides.stringOrNull(state.bgcolor))
            classes.append(x)
        if state.bold:
            classes.append("ansi_bold")
        if state.underline:
            classes.append("ansi_underline")
        if state.blink:
            classes.append("ansi_blink")
        return " ".join([python_Boot.toString1(x1,'') for x1 in classes])

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.bgcolor = None
        _hx_o.blink = None
        _hx_o.bold = None
        _hx_o.fgcolor = None
        _hx_o.underline = None
hx_strings_AnsiState._hx_class = hx_strings_AnsiState
_hx_classes["hx.strings.AnsiState"] = hx_strings_AnsiState


class hx_strings_internal_Bits:
    _hx_class_name = "hx.strings.internal.Bits"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["clearBit", "setBit", "toggleBit", "getBit"]

    @staticmethod
    def clearBit(num,bitPos):
        return (num & ~((1 << ((bitPos - 1)))))

    @staticmethod
    def setBit(num,bitPos):
        return (num | ((1 << ((bitPos - 1)))))

    @staticmethod
    def toggleBit(num,bitPos):
        return (num ^ ((1 << ((bitPos - 1)))))

    @staticmethod
    def getBit(num,bitPos):
        return (1 == (((num >> ((bitPos - 1))) & 1)))
hx_strings_internal_Bits._hx_class = hx_strings_internal_Bits
_hx_classes["hx.strings.internal.Bits"] = hx_strings_internal_Bits


class hx_strings_internal__Either2_Either2_Impl_:
    _hx_class_name = "hx.strings.internal._Either2.Either2_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "get_value", "fromA", "fromB"]
    value = None

    @staticmethod
    def _new(value):
        return value

    @staticmethod
    def get_value(this1):
        return this1

    @staticmethod
    def fromA(value):
        return hx_strings_internal__Either2__Either2.a(value)

    @staticmethod
    def fromB(value):
        return hx_strings_internal__Either2__Either2.b(value)
hx_strings_internal__Either2_Either2_Impl_._hx_class = hx_strings_internal__Either2_Either2_Impl_
_hx_classes["hx.strings.internal._Either2.Either2_Impl_"] = hx_strings_internal__Either2_Either2_Impl_

class hx_strings_internal__Either2__Either2(Enum):
    __slots__ = ()
    _hx_class_name = "hx.strings.internal._Either2._Either2"
    _hx_constructs = ["a", "b"]

    @staticmethod
    def a(v):
        return hx_strings_internal__Either2__Either2("a", 0, (v,))

    @staticmethod
    def b(v):
        return hx_strings_internal__Either2__Either2("b", 1, (v,))
hx_strings_internal__Either2__Either2._hx_class = hx_strings_internal__Either2__Either2
_hx_classes["hx.strings.internal._Either2._Either2"] = hx_strings_internal__Either2__Either2


class hx_strings_internal__Either3_Either3_Impl_:
    _hx_class_name = "hx.strings.internal._Either3.Either3_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "get_value", "fromA", "fromB", "fromC"]
    value = None

    @staticmethod
    def _new(value):
        return value

    @staticmethod
    def get_value(this1):
        return this1

    @staticmethod
    def fromA(value):
        return hx_strings_internal__Either3__Either3.a(value)

    @staticmethod
    def fromB(value):
        return hx_strings_internal__Either3__Either3.b(value)

    @staticmethod
    def fromC(value):
        return hx_strings_internal__Either3__Either3.c(value)
hx_strings_internal__Either3_Either3_Impl_._hx_class = hx_strings_internal__Either3_Either3_Impl_
_hx_classes["hx.strings.internal._Either3.Either3_Impl_"] = hx_strings_internal__Either3_Either3_Impl_


class hx_strings_internal__OneOrMany_OneOrMany_Impl_:
    _hx_class_name = "hx.strings.internal._OneOrMany.OneOrMany_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["fromSingle"]

    @staticmethod
    def fromSingle(value):
        return [value]
hx_strings_internal__OneOrMany_OneOrMany_Impl_._hx_class = hx_strings_internal__OneOrMany_OneOrMany_Impl_
_hx_classes["hx.strings.internal._OneOrMany.OneOrMany_Impl_"] = hx_strings_internal__OneOrMany_OneOrMany_Impl_


class hx_strings_internal__RingBuffer_RingBuffer_Impl_:
    _hx_class_name = "hx.strings.internal._RingBuffer.RingBuffer_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "get"]

    @staticmethod
    def _new(size):
        return hx_strings_internal__RingBuffer_RingBufferImpl(size)

    @staticmethod
    def get(this1,index):
        return this1.get(index)
hx_strings_internal__RingBuffer_RingBuffer_Impl_._hx_class = hx_strings_internal__RingBuffer_RingBuffer_Impl_
_hx_classes["hx.strings.internal._RingBuffer.RingBuffer_Impl_"] = hx_strings_internal__RingBuffer_RingBuffer_Impl_


class hx_strings_internal__RingBuffer_RingBufferIterator:
    _hx_class_name = "hx.strings.internal._RingBuffer.RingBufferIterator"
    _hx_is_interface = "False"
    __slots__ = ("buff", "idx")
    _hx_fields = ["buff", "idx"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,buff):
        self.idx = -1
        self.buff = buff

    def hasNext(self):
        return ((self.idx + 1) < self.buff.length)

    def next(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.idx
        _hx_local_0.idx = (_hx_local_1 + 1)
        _hx_local_1
        return self.buff.get(self.idx)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buff = None
        _hx_o.idx = None
hx_strings_internal__RingBuffer_RingBufferIterator._hx_class = hx_strings_internal__RingBuffer_RingBufferIterator
_hx_classes["hx.strings.internal._RingBuffer.RingBufferIterator"] = hx_strings_internal__RingBuffer_RingBufferIterator


class kiss__FuzzyMap_FuzzyMap_Impl_:
    _hx_class_name = "kiss._FuzzyMap.FuzzyMap_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "fromMap", "toMap", "bestMatch", "get", "remove", "exists", "existsExactly", "set"]

    @staticmethod
    def _new(m = None):
        return (m if ((m is not None)) else haxe_ds_StringMap())

    @staticmethod
    def fromMap(m):
        return (m if ((m is not None)) else haxe_ds_StringMap())

    @staticmethod
    def toMap(this1):
        return this1

    @staticmethod
    def bestMatch(this1,fuzzySearchKey,throwIfNone = None):
        if (throwIfNone is None):
            throwIfNone = True
        return kiss_FuzzyMapTools.bestMatch(this1,fuzzySearchKey,throwIfNone)

    @staticmethod
    def get(this1,fuzzySearchKey):
        match = kiss__FuzzyMap_FuzzyMap_Impl_.bestMatch(this1,fuzzySearchKey)
        value = this1.h.get(match,None)
        if (match is not None):
            kiss_FuzzyMapTools.onMatchMade(this1,fuzzySearchKey,value)
        return value

    @staticmethod
    def remove(this1,fuzzySearchKey):
        key = kiss__FuzzyMap_FuzzyMap_Impl_.bestMatch(this1,fuzzySearchKey,False)
        if (key is None):
            return False
        return this1.remove(key)

    @staticmethod
    def exists(this1,fuzzySearchKey):
        return (kiss__FuzzyMap_FuzzyMap_Impl_.bestMatch(this1,fuzzySearchKey,False) is not None)

    @staticmethod
    def existsExactly(this1,searchKey):
        return (searchKey in this1.h)

    @staticmethod
    def set(this1,key,v):
        this1.h[key] = v
        return v
kiss__FuzzyMap_FuzzyMap_Impl_._hx_class = kiss__FuzzyMap_FuzzyMap_Impl_
_hx_classes["kiss._FuzzyMap.FuzzyMap_Impl_"] = kiss__FuzzyMap_FuzzyMap_Impl_


class kiss_FuzzyMapTools:
    _hx_class_name = "kiss.FuzzyMapTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["serializingMaps", "serializeMatches", "fuzzyMatchScore", "threshold", "bestMatch", "onMatchMade", "loadMatches"]

    @staticmethod
    def serializeMatches(m,file):
        this1 = kiss_FuzzyMapTools.serializingMaps
        v = _hx_AnonObject({'file': file, 'matches': haxe_ds_StringMap()})
        this1.set(m,v)

    @staticmethod
    def fuzzyMatchScore(key,fuzzySearchKey):
        tmp = hx_strings_Strings.getLevenshteinDistance(key.lower(),fuzzySearchKey.lower())
        a = len(key)
        b = len(fuzzySearchKey)
        return (1 - ((tmp / ((a if (python_lib_Math.isnan(a)) else (b if (python_lib_Math.isnan(b)) else max(a,b)))))))

    @staticmethod
    def bestMatch(_hx_map,fuzzySearchKey,throwIfNone = None):
        if (throwIfNone is None):
            throwIfNone = True
        if (fuzzySearchKey in _hx_map.h):
            return fuzzySearchKey
        bestScore = 0.0
        bestKey = None
        key = _hx_map.keys()
        while key.hasNext():
            key1 = key.next()
            score = kiss_FuzzyMapTools.fuzzyMatchScore(key1,fuzzySearchKey)
            if (score > bestScore):
                bestScore = score
                bestKey = key1
        if (bestScore < kiss_FuzzyMapTools.threshold):
            if throwIfNone:
                raise haxe_Exception.thrown(((((((("No good match for " + ("null" if fuzzySearchKey is None else fuzzySearchKey)) + " in ") + Std.string(_hx_map)) + " -- best was ") + ("null" if bestKey is None else bestKey)) + " with ") + Std.string(bestScore)))
            else:
                return None
        haxe_Log.trace(((((("Fuzzy match " + ("null" if bestKey is None else bestKey)) + " for ") + ("null" if fuzzySearchKey is None else fuzzySearchKey)) + " score: ") + Std.string(bestScore)),_hx_AnonObject({'fileName': "kiss/FuzzyMapTools.hx", 'lineNumber': 51, 'className': "kiss.FuzzyMapTools", 'methodName': "bestMatch"}))
        return bestKey

    @staticmethod
    def onMatchMade(m,key,value):
        if (m in kiss_FuzzyMapTools.serializingMaps.h):
            info = kiss_FuzzyMapTools.serializingMaps.h.get(m,None)
            v = value
            info.matches.h[key] = v
            sys_io_File.saveContent(info.file,haxe_format_JsonPrinter.print(info.matches,None,None))

    @staticmethod
    def loadMatches(m,json):
        savedMatches = python_lib_Json.loads(json,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
        access = savedMatches
        _g_access = access
        _g_keys = python_Boot.fields(access)
        _g_index = 0
        while (_g_index < len(_g_keys)):
            key = _g_index
            _g_index = (_g_index + 1)
            key1 = (_g_keys[key] if key >= 0 and key < len(_g_keys) else None)
            _g_value = Reflect.field(_g_access,key1)
            _g_key = key1
            key2 = _g_key
            value = _g_value
            m.h[key2] = value
kiss_FuzzyMapTools._hx_class = kiss_FuzzyMapTools
_hx_classes["kiss.FuzzyMapTools"] = kiss_FuzzyMapTools


class kiss_KissInterp(hscript_Interp):
    _hx_class_name = "kiss.KissInterp"
    _hx_is_interface = "False"
    __slots__ = ("nullForUnknownVar", "parser", "cacheConvertedHScript")
    _hx_fields = ["nullForUnknownVar", "parser", "cacheConvertedHScript"]
    _hx_methods = ["evalKiss", "evalHaxe", "resolve", "exprReturn", "publicExprReturn", "getLocals", "setLocals"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = hscript_Interp


    def __init__(self,nullForUnknownVar = None):
        if (nullForUnknownVar is None):
            nullForUnknownVar = False
        self.nullForUnknownVar = None
        self.cacheConvertedHScript = False
        self.parser = hscript_Parser()
        super().__init__()
        self.nullForUnknownVar = nullForUnknownVar
        self.variables.h["Reflect"] = Reflect
        self.variables.h["Type"] = Type
        self.variables.h["Prelude"] = kiss_Prelude
        self.variables.h["Lambda"] = Lambda
        self.variables.h["Std"] = Std
        self.variables.h["Keep"] = kiss_ExtraElementHandling.Keep
        self.variables.h["Drop"] = kiss_ExtraElementHandling.Drop
        self.variables.h["Throw"] = kiss_ExtraElementHandling.Throw
        self.variables.h["Math"] = Math
        self.variables.h["Json"] = haxe_Json
        self.variables.h["StringMap"] = haxe_ds_StringMap
        self.variables.h["FuzzyMapTools"] = kiss_FuzzyMapTools
        self.variables.h["StringTools"] = StringTools
        self.variables.h["Path"] = haxe_io_Path
        self.variables.h["Sys"] = Sys
        self.variables.h["FileSystem"] = sys_FileSystem
        self.variables.h["File"] = sys_io_File
        self.variables.h["Http"] = sys_Http
        self.variables.h["kiss"] = _hx_AnonObject({})

    def evalKiss(self,kissStr):
        convert = (kiss_Prelude.cachedConvertToHScript if (self.cacheConvertedHScript) else kiss_Prelude.convertToHScript)
        return self.evalHaxe(convert(kissStr))

    def evalHaxe(self,hscriptStr):
        return self.execute(self.parser.parseString(hscriptStr))

    def resolve(self,id):
        if self.nullForUnknownVar:
            try:
                return super().resolve(id)
            except BaseException as _g:
                None
                return None
        else:
            return super().resolve(id)

    def exprReturn(self,e):
        return super().exprReturn(e)

    def publicExprReturn(self,e):
        return self.exprReturn(e)

    def getLocals(self):
        return self.locals

    def setLocals(self,l):
        self.locals = l

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.nullForUnknownVar = None
        _hx_o.parser = None
        _hx_o.cacheConvertedHScript = None
kiss_KissInterp._hx_class = kiss_KissInterp
_hx_classes["kiss.KissInterp"] = kiss_KissInterp


class kiss__List_List_Impl_:
    _hx_class_name = "kiss._List.List_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "fromArray", "toArray", "realIndex", "get", "arrayWrite", "insert", "slice", "splice"]

    @staticmethod
    def _new(a):
        return a

    @staticmethod
    def fromArray(a):
        return a

    @staticmethod
    def toArray(this1):
        return this1

    @staticmethod
    def realIndex(this1,idx):
        if (idx < 0):
            return (len(this1) + idx)
        else:
            return idx

    @staticmethod
    def get(this1,idx):
        return python_internal_ArrayImpl._get(this1, ((len(this1) + idx) if ((idx < 0)) else idx))

    @staticmethod
    def arrayWrite(this1,idx,v):
        python_internal_ArrayImpl._set(this1, ((len(this1) + idx) if ((idx < 0)) else idx), v)
        return v

    @staticmethod
    def insert(this1,idx,v):
        pos = ((len(this1) + idx) if ((idx < 0)) else idx)
        this1.insert(pos, v)

    @staticmethod
    def slice(this1,start,end = None):
        if (end is None):
            end = len(this1)
        return this1[((len(this1) + start) if ((start < 0)) else start):((len(this1) + end) if ((end < 0)) else end)]

    @staticmethod
    def splice(this1,start,_hx_len):
        pos = ((len(this1) + start) if ((start < 0)) else start)
        if (pos < 0):
            pos = (len(this1) + pos)
        if (pos < 0):
            pos = 0
        res = this1[pos:(pos + _hx_len)]
        del this1[pos:(pos + _hx_len)]
        return res
kiss__List_List_Impl_._hx_class = kiss__List_List_Impl_
_hx_classes["kiss._List.List_Impl_"] = kiss__List_List_Impl_

class kiss_ExtraElementHandling(Enum):
    __slots__ = ()
    _hx_class_name = "kiss.ExtraElementHandling"
    _hx_constructs = ["Keep", "Drop", "Throw"]
kiss_ExtraElementHandling.Keep = kiss_ExtraElementHandling("Keep", 0, ())
kiss_ExtraElementHandling.Drop = kiss_ExtraElementHandling("Drop", 1, ())
kiss_ExtraElementHandling.Throw = kiss_ExtraElementHandling("Throw", 2, ())
kiss_ExtraElementHandling._hx_class = kiss_ExtraElementHandling
_hx_classes["kiss.ExtraElementHandling"] = kiss_ExtraElementHandling

class kiss_KissTarget(Enum):
    __slots__ = ()
    _hx_class_name = "kiss.KissTarget"
    _hx_constructs = ["Cpp", "CSharp", "Haxe", "JavaScript", "NodeJS", "Python", "Macro"]
kiss_KissTarget.Cpp = kiss_KissTarget("Cpp", 0, ())
kiss_KissTarget.CSharp = kiss_KissTarget("CSharp", 1, ())
kiss_KissTarget.Haxe = kiss_KissTarget("Haxe", 2, ())
kiss_KissTarget.JavaScript = kiss_KissTarget("JavaScript", 3, ())
kiss_KissTarget.NodeJS = kiss_KissTarget("NodeJS", 4, ())
kiss_KissTarget.Python = kiss_KissTarget("Python", 5, ())
kiss_KissTarget.Macro = kiss_KissTarget("Macro", 6, ())
kiss_KissTarget._hx_class = kiss_KissTarget
_hx_classes["kiss.KissTarget"] = kiss_KissTarget


class sys_io_File:
    _hx_class_name = "sys.io.File"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["getContent", "saveContent", "copy"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content

    @staticmethod
    def saveContent(path,content):
        f = python_lib_Builtins.open(path,"w",-1,"utf-8",None,"")
        f.write(content)
        f.close()

    @staticmethod
    def copy(srcPath,dstPath):
        python_lib_Shutil.copy(srcPath,dstPath)
sys_io_File._hx_class = sys_io_File
_hx_classes["sys.io.File"] = sys_io_File


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        return python_Lib.anonAsDict(d)
python__KwArgs_KwArgs_Impl_._hx_class = python__KwArgs_KwArgs_Impl_
_hx_classes["python._KwArgs.KwArgs_Impl_"] = python__KwArgs_KwArgs_Impl_


class python_Lib:
    _hx_class_name = "python.Lib"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["lineEnd", "printString", "dictToAnon", "anonToDict", "anonAsDict"]

    @staticmethod
    def printString(_hx_str):
        encoding = "utf-8"
        if (encoding is None):
            encoding = "utf-8"
        python_lib_Sys.stdout.buffer.write(_hx_str.encode(encoding, "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def dictToAnon(v):
        return _hx_AnonObject(v.copy())

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None
python_Lib._hx_class = python_Lib
_hx_classes["python.Lib"] = python_Lib


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    _hx_is_interface = "False"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.obj = None
        _hx_o.func = None
python_internal_MethodClosure._hx_class = python_internal_MethodClosure
_hx_classes["python.internal.MethodClosure"] = python_internal_MethodClosure


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "keyValueIterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "contains", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def keyValueIterator(x):
        return haxe_iterators_ArrayKeyValueIterator(x)

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except BaseException as _g:
            None
            return False

    @staticmethod
    def contains(x,e):
        return (e in x)

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl
_hx_classes["python.internal.ArrayImpl"] = python_internal_ArrayImpl


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    _hx_is_interface = "False"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.it = None
        _hx_o.x = None
        _hx_o.has = None
        _hx_o.checked = None
python_HaxeIterator._hx_class = python_HaxeIterator
_hx_classes["python.HaxeIterator"] = python_HaxeIterator


class kiss_Prelude:
    _hx_class_name = "kiss.Prelude"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["stringOrFloat", "_and", "and", "_or", "or", "makeVarArgsWithArrayCheck", "_add", "add", "_subtract", "subtract", "_multiply2", "_multiply", "multiply", "_divide", "divide", "mod", "pow", "_min", "min", "_max", "max", "_comparison", "greaterThan", "greaterEqual", "lessThan", "lesserEqual", "areEqual", "iFraction", "iHalf", "iThird", "iFourth", "iFifth", "iSixth", "iSeventh", "iEighth", "iNinth", "iTenth", "fFraction", "fHalf", "fThird", "fFourth", "fFifth", "fSixth", "fSeventh", "fEighth", "fNinth", "fTenth", "sort", "sortBy", "groups", "_concat", "concat", "_zip", "zipKeep", "zipDrop", "zipThrow", "_intersect", "intersect", "enumerate", "pairs", "reverse", "range", "_joinPath", "joinPath", "isNull", "truthy", "chooseRandom", "memoize", "fsMemoize", "_printStr", "externLogFile", "_externPrintStr", "printStr", "withLabel", "print", "symbolNameValue", "uuid", "symbol", "symbolName", "expList", "isListExp", "kissProcess", "walkDirectory", "purgeDirectory", "convertToHScript", "userHome", "cachedConvertToHScript", "getTarget", "assertProcess", "tryProcess", "libPath", "shellCountMutex", "shellCount", "shellExecute", "filter", "readDirectory", "substr", "runtimeInsertAssertionMessage", "newLine", "backSlash", "doubleQuote", "dollar"]

    @staticmethod
    def stringOrFloat(d):
        tmp = Type.typeof(d).index
        if ((tmp == 2) or ((tmp == 1))):
            return haxe_ds_Either.Right(python_Boot._add_dynamic(0.0,d))
        elif Std.isOfType(d,str):
            return haxe_ds_Either.Left(d)
        else:
            raise haxe_Exception.thrown((("cannot use " + Std.string(d)) + " in multiplication"))

    @staticmethod
    def _and(values):
        _g = 0
        while (_g < len(values)):
            value = (values[_g] if _g >= 0 and _g < len(values) else None)
            _g = (_g + 1)
            if (not kiss_Prelude.truthy(value)):
                return False
        return python_internal_ArrayImpl._get(values, (len(values) - 1))

    @staticmethod
    def _or(values):
        _g = 0
        while (_g < len(values)):
            value = (values[_g] if _g >= 0 and _g < len(values) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy(value):
                return value
        return python_internal_ArrayImpl._get(values, (len(values) - 1))

    @staticmethod
    def makeVarArgsWithArrayCheck(f,name):
        def _hx_local_0(args):
            if ((len(args) == 1) and Std.isOfType((args[0] if 0 < len(args) else None),list)):
                raise haxe_Exception.thrown((((((("Array " + Std.string((args[0] if 0 < len(args) else None))) + " was passed to variadic function ") + ("null" if name is None else name)) + ". Use (apply ") + ("null" if name is None else name)) + " args) instead"))
            return f(args)
        fWithArrayCheck = _hx_local_0
        return Reflect.makeVarArgs(fWithArrayCheck)

    @staticmethod
    def _add(values):
        sum = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            sum = python_Boot._add_dynamic(sum,value)
        return sum

    @staticmethod
    def _subtract(values):
        difference = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            difference = (difference - value)
        return difference

    @staticmethod
    def _multiply2(a,b):
        _g = kiss_Prelude.stringOrFloat(a)
        _g1 = kiss_Prelude.stringOrFloat(b)
        tmp = _g.index
        if (tmp == 0):
            _g2 = _g.params[0]
            tmp = _g1.index
            if (tmp == 0):
                b1 = _g1.params[0]
                a1 = _g2
                raise haxe_Exception.thrown((((("cannot multiply strings \"" + ("null" if a1 is None else a1)) + "\" and \"") + ("null" if b1 is None else b1)) + "\""))
            elif (tmp == 1):
                i = _g1.params[0]
                s = _g2
                if (HxOverrides.modf(i, 1) == 0):
                    result = ""
                    _g2 = 0
                    _g3 = Math.floor(i)
                    while (_g2 < _g3):
                        _ = _g2
                        _g2 = (_g2 + 1)
                        result = (("null" if result is None else result) + ("null" if s is None else s))
                    return result
                else:
                    raise haxe_Exception.thrown(((("cannot multiply " + Std.string(a)) + " and ") + Std.string(b)))
            else:
                raise haxe_Exception.thrown(((("cannot multiply " + Std.string(a)) + " and ") + Std.string(b)))
        elif (tmp == 1):
            _g2 = _g.params[0]
            tmp = _g1.index
            if (tmp == 0):
                s = _g1.params[0]
                i = _g2
                if (HxOverrides.modf(i, 1) == 0):
                    result = ""
                    _g = 0
                    _g3 = Math.floor(i)
                    while (_g < _g3):
                        _ = _g
                        _g = (_g + 1)
                        result = (("null" if result is None else result) + ("null" if s is None else s))
                    return result
                else:
                    raise haxe_Exception.thrown(((("cannot multiply " + Std.string(a)) + " and ") + Std.string(b)))
            elif (tmp == 1):
                f2 = _g1.params[0]
                f = _g2
                return (f * f2)
            else:
                raise haxe_Exception.thrown(((("cannot multiply " + Std.string(a)) + " and ") + Std.string(b)))
        else:
            pass

    @staticmethod
    def _multiply(values):
        product = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            product = kiss_Prelude._multiply2(product,value)
        return product

    @staticmethod
    def _divide(values):
        quotient = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            quotient = (quotient / value)
        return quotient

    @staticmethod
    def mod(top,bottom):
        return HxOverrides.modf(top, bottom)

    @staticmethod
    def pow(base,exponent):
        return Math.pow(base,exponent)

    @staticmethod
    def _min(values):
        _hx_min = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            b = value
            if (not python_lib_Math.isnan(_hx_min)):
                _hx_min = (b if (python_lib_Math.isnan(b)) else min(_hx_min,b))
        return _hx_min

    @staticmethod
    def _max(values):
        _hx_max = (values[0] if 0 < len(values) else None)
        _g = 0
        _g1 = values[1:None]
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            b = value
            if (not python_lib_Math.isnan(_hx_max)):
                _hx_max = (b if (python_lib_Math.isnan(b)) else max(_hx_max,b))
        return _hx_max

    @staticmethod
    def _comparison(op,values):
        _g = 1
        _g1 = len(values)
        while (_g < _g1):
            idx = _g
            _g = (_g + 1)
            a = python_internal_ArrayImpl._get(values, (idx - 1))
            b = (values[idx] if idx >= 0 and idx < len(values) else None)
            check = None
            op1 = op
            _hx_local_0 = len(op1)
            if (_hx_local_0 == 1):
                if (op1 == "<"):
                    check = (a < b)
                elif (op1 == ">"):
                    check = (a > b)
                else:
                    raise haxe_Exception.thrown("Unreachable case")
            elif (_hx_local_0 == 2):
                if (op1 == "<="):
                    check = (a <= b)
                elif (op1 == "=="):
                    check = HxOverrides.eq(a,b)
                elif (op1 == ">="):
                    check = (a >= b)
                else:
                    raise haxe_Exception.thrown("Unreachable case")
            else:
                raise haxe_Exception.thrown("Unreachable case")
            if (not check):
                return False
        return True

    @staticmethod
    def iFraction(num,denom):
        tmp = None
        try:
            tmp = int((num / denom))
        except BaseException as _g:
            None
            tmp = None
        return tmp

    @staticmethod
    def fFraction(num,denom):
        return (num / denom)

    @staticmethod
    def sort(a,comp = None):
        if (comp is None):
            comp = Reflect.compare
        sorted = list(a)
        sorted.sort(key= python_lib_Functools.cmp_to_key(comp))
        return sorted

    @staticmethod
    def sortBy(a,index,comp = None):
        if (comp is None):
            comp = Reflect.compare
        def _hx_local_1():
            def _hx_local_0(v1,v2):
                return comp(index(v1),index(v2))
            return kiss_Prelude.sort(a,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def groups(a,size,extraHandling = None):
        if (extraHandling is None):
            extraHandling = kiss_ExtraElementHandling.Throw
        numFullGroups = Math.floor((len(a) / size))
        _g = []
        _g1 = 0
        _g2 = numFullGroups
        while (_g1 < _g2):
            num = _g1
            _g1 = (_g1 + 1)
            start = (num * size)
            end = (((num + 1)) * size)
            x = a[start:end]
            _g.append(x)
        fullGroups = _g
        if (HxOverrides.mod(len(a), size) != 0):
            tmp = extraHandling.index
            if (tmp == 0):
                x = a[(numFullGroups * size):None]
                fullGroups.append(x)
            elif (tmp == 1):
                pass
            elif (tmp == 2):
                raise haxe_Exception.thrown(((("groups was given a non-divisible number of elements: " + Std.string(a)) + ", ") + Std.string(size)))
            else:
                pass
        return fullGroups

    @staticmethod
    def _concat(arrays):
        arr = (arrays[0] if 0 < len(arrays) else None)
        _g = 0
        _g1 = arrays[1:None]
        while (_g < len(_g1)):
            nextArr = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            arr = (arr + nextArr)
        return arr

    @staticmethod
    def _zip(iterables,extraHandling):
        lists = []
        _g = []
        _g1 = 0
        while (_g1 < len(iterables)):
            iterable = (iterables[_g1] if _g1 >= 0 and _g1 < len(iterables) else None)
            _g1 = (_g1 + 1)
            x = Reflect.field(iterable,"iterator")()
            _g.append(x)
        iterators = _g
        while True:
            zipped = []
            someNonNull = False
            _g = 0
            while (_g < len(iterators)):
                it = (iterators[_g] if _g >= 0 and _g < len(iterators) else None)
                _g = (_g + 1)
                if (extraHandling.index == 0):
                    x = None
                    if it.hasNext():
                        someNonNull = True
                        x = it.next()
                    else:
                        x = None
                    zipped.append(x)
                elif it.hasNext():
                    x1 = it.next()
                    zipped.append(x1)
            if (len(zipped) == 0):
                break
            else:
                tmp = extraHandling.index
                if (tmp == 0):
                    if (not someNonNull):
                        break
                elif (tmp == 1):
                    if (len(zipped) != len(iterators)):
                        break
                elif (tmp == 2):
                    if (len(zipped) != len(iterators)):
                        raise haxe_Exception.thrown(((("zip" + Std.string(extraHandling)) + " was given iterables of mis-matched size: ") + Std.string(iterables)))
                else:
                    pass
            lists.append(zipped)
        return lists

    @staticmethod
    def _intersect(iterables):
        _g = []
        _g1 = 0
        while (_g1 < len(iterables)):
            iterable = (iterables[_g1] if _g1 >= 0 and _g1 < len(iterables) else None)
            _g1 = (_g1 + 1)
            x = Reflect.field(iterable,"iterator")()
            _g.append(x)
        iterators = _g
        _g = []
        elem = (None if ((len(iterators) == 0)) else iterators.pop(0))
        while elem.hasNext():
            elem1 = elem.next()
            _g.append([elem1])
        intersections = _g
        _g = 0
        while (_g < len(iterators)):
            iterator = (iterators[_g] if _g >= 0 and _g < len(iterators) else None)
            _g = (_g + 1)
            _g1 = []
            elem = iterator
            while elem.hasNext():
                elem1 = elem.next()
                _g2 = []
                _g3 = 0
                while (_g3 < len(intersections)):
                    intersection = (intersections[_g3] if _g3 >= 0 and _g3 < len(intersections) else None)
                    _g3 = (_g3 + 1)
                    x = (intersection + [elem1])
                    _g2.append(x)
                _g1.append(_g2)
            intersections = kiss_Prelude._concat(_g1)
        return intersections

    @staticmethod
    def enumerate(l,startingIdx = None):
        if (startingIdx is None):
            startingIdx = 0
        return kiss_Prelude.zipThrow(kiss_Prelude.range(startingIdx,(startingIdx + len(l)),1),l)

    @staticmethod
    def pairs(l,loopAround = None):
        if (loopAround is None):
            loopAround = False
        l1 = kiss__List_List_Impl_.slice(l,0,(len(l) - 1))
        l2 = kiss__List_List_Impl_.slice(l,1,len(l))
        if loopAround:
            x = python_internal_ArrayImpl._get(l, (len(l) + (-1)))
            l1.append(x)
            l2.insert(0, python_internal_ArrayImpl._get(l, 0))
        return kiss_Prelude.zipThrow(l1,l2)

    @staticmethod
    def reverse(l):
        c = list(l)
        c.reverse()
        return c

    @staticmethod
    def range(_hx_min,_hx_max,step):
        if ((step <= 0) or ((_hx_max < _hx_min))):
            raise haxe_Exception.thrown("(range...) can only count up")
        count = _hx_min
        def _hx_local_1():
            nonlocal count
            oldCount = count
            count = (count + step)
            return oldCount
        def _hx_local_2():
            return (count < _hx_max)
        iterator = _hx_AnonObject({'next': _hx_local_1, 'hasNext': _hx_local_2})
        def _hx_local_6():
            def _hx_local_3():
                return iterator
            def _hx_local_4():
                return iterator.next()
            def _hx_local_5():
                return iterator.hasNext()
            return _hx_AnonObject({'iterator': _hx_local_3, 'next': _hx_local_4, 'hasNext': _hx_local_5})
        return _hx_local_6()

    @staticmethod
    def _joinPath(parts):
        _g = []
        _g1 = 0
        while (_g1 < len(parts)):
            part = (parts[_g1] if _g1 >= 0 and _g1 < len(parts) else None)
            _g1 = (_g1 + 1)
            def _hx_local_2():
                _hx_local_1 = part
                if (Std.isOfType(_hx_local_1,str) or ((_hx_local_1 is None))):
                    _hx_local_1
                else:
                    raise "Class cast error"
                return _hx_local_1
            _g.append(_hx_local_2())
        return haxe_io_Path.join(_g)

    @staticmethod
    def isNull(v):
        if (Type.typeof(v).index == 0):
            return True
        else:
            return False

    @staticmethod
    def truthy(v):
        tmp = Type.typeof(v).index
        if (tmp == 0):
            return False
        elif (tmp == 3):
            def _hx_local_2():
                def _hx_local_1():
                    _hx_local_0 = v
                    if (Std.isOfType(_hx_local_0,Bool) or ((_hx_local_0 is None))):
                        _hx_local_0
                    else:
                        raise "Class cast error"
                    return _hx_local_0
                return _hx_local_1()
            return _hx_local_2()
        elif Std.isOfType(v,str):
            _hx_str = v
            return (len(_hx_str) > 0)
        elif Std.isOfType(v,list):
            lst = v
            return (len(lst) > 0)
        else:
            return True

    @staticmethod
    def chooseRandom(l):
        x = len(l)
        idx = (0 if ((x <= 0)) else int((python_lib_Random.random() * x)))
        return python_internal_ArrayImpl._get(l, ((len(l) + idx) if ((idx < 0)) else idx))

    @staticmethod
    def memoize(func,caller = None,jsonFile = None,jsonArgMap = None):
        argMap = (jsonArgMap if ((jsonArgMap is not None)) else haxe_ds_StringMap())
        def _hx_local_0(args):
            argString = "|".join([python_Boot.toString1(x1,'') for x1 in args])
            if (argString in argMap.h):
                return argMap.h.get(argString,None)
            else:
                ret = Reflect.callMethod(caller,func,args)
                argMap.h[argString] = ret
                if (jsonFile is not None):
                    sys_io_File.saveContent(jsonFile,haxe_format_JsonPrinter.print(argMap,None,None))
                return ret
        f = _hx_local_0
        f = Reflect.makeVarArgs(f)
        return f

    @staticmethod
    def fsMemoize(func,funcName,cacheDirectory = None,caller = None):
        if (cacheDirectory is None):
            cacheDirectory = ""
        fileName = (("" + ("null" if funcName is None else funcName)) + ".memoized")
        if (len(cacheDirectory) > 0):
            sys_FileSystem.createDirectory(cacheDirectory)
            fileName = ((("" + ("null" if cacheDirectory is None else cacheDirectory)) + "/") + ("null" if fileName is None else fileName))
        if (not sys_FileSystem.exists(fileName)):
            sys_io_File.saveContent(fileName,"{}")
        pastResults = python_lib_Json.loads(sys_io_File.getContent(fileName),**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
        _g = haxe_ds_StringMap()
        access = pastResults
        _g_access = access
        _g_keys = python_Boot.fields(access)
        _g_index = 0
        while (_g_index < len(_g_keys)):
            key = _g_index
            _g_index = (_g_index + 1)
            key1 = (_g_keys[key] if key >= 0 and key < len(_g_keys) else None)
            _g_value = Reflect.field(_g_access,key1)
            _g_key = key1
            key2 = _g_key
            value = _g_value
            _g.h[key2] = value
        argMap = _g
        return kiss_Prelude.memoize(func,caller,fileName,argMap)

    @staticmethod
    def _printStr(s):
        _hx_str = Std.string(s)
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))

    @staticmethod
    def _externPrintStr(s):
        logContent = None
        try:
            logContent = sys_io_File.getContent(kiss_Prelude.externLogFile)
        except BaseException as _g:
            logContent = ""
        sys_io_File.saveContent(kiss_Prelude.externLogFile,((("" + ("null" if logContent is None else logContent)) + ("null" if s is None else s)) + "\n"))

    @staticmethod
    def withLabel(v,label = None):
        if (label is None):
            label = ""
        toPrint = label
        if (len(label) > 0):
            toPrint = (("null" if toPrint is None else toPrint) + ": ")
        toPrint = (("null" if toPrint is None else toPrint) + HxOverrides.stringOrNull(("null" if ((v is None)) else Std.string(v))))
        return toPrint

    @staticmethod
    def print(v,label = None):
        if (label is None):
            label = ""
        toPrint = kiss_Prelude.withLabel(v,label)
        kiss_Prelude.printStr(toPrint)
        return v

    @staticmethod
    def symbolNameValue(s,allowTyped = None,allowMeta = None):
        if (allowTyped is None):
            allowTyped = False
        if (allowMeta is None):
            allowMeta = False
        _g = s._hx_def
        tmp = _g.index
        if (tmp == 3):
            name = _g.params[0]
            return name
        elif (tmp == 6):
            _g1 = _g.params[0]
            innerExp = _g.params[1]
            if allowTyped:
                return kiss_Prelude.symbolNameValue(innerExp,False)
            else:
                raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))
        elif (tmp == 7):
            _g1 = _g.params[0]
            innerExp = _g.params[1]
            if allowMeta:
                return kiss_Prelude.symbolNameValue(innerExp,allowTyped,False)
            else:
                raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))
        else:
            raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))

    @staticmethod
    def uuid():
        return uuid_Uuid.toShort(uuid_Uuid.v4())

    @staticmethod
    def symbol(name = None):
        if (name is None):
            name = ("_" + HxOverrides.stringOrNull(uuid_Uuid.toShort(uuid_Uuid.v4())))
        return kiss_ReaderExpDef.Symbol(name)

    @staticmethod
    def symbolName(s,allowTyped = None,allowMeta = None):
        if (allowTyped is None):
            allowTyped = False
        if (allowMeta is None):
            allowMeta = False
        _g = s._hx_def
        tmp = _g.index
        if (tmp == 3):
            name = _g.params[0]
            return kiss_ReaderExpDef.StrExp(name)
        elif (tmp == 6):
            _g1 = _g.params[0]
            innerExp = _g.params[1]
            if allowTyped:
                return kiss_Prelude.symbolName(innerExp,False)
            else:
                raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))
        elif (tmp == 7):
            _g1 = _g.params[0]
            innerExp = _g.params[1]
            if allowMeta:
                return kiss_Prelude.symbolName(innerExp,allowTyped,False)
            else:
                raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))
        else:
            raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a plain symbol"))

    @staticmethod
    def expList(s):
        _g = s._hx_def
        if (_g.index == 1):
            exps = _g.params[0]
            return exps
        else:
            raise haxe_Exception.thrown((("expected " + Std.string(s)) + " to be a list expression"))

    @staticmethod
    def isListExp(s):
        _g = s._hx_def
        if (_g.index == 1):
            exps = _g.params[0]
            return True
        else:
            return False

    @staticmethod
    def walkDirectory(basePath,directory,processFile,filterFolderBefore = None,processFolderAfter = None):
        _g = 0
        _g1 = sys_FileSystem.readDirectory(kiss_Prelude.joinPath(basePath,directory))
        while (_g < len(_g1)):
            fileOrFolder = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            folder = fileOrFolder
            if sys_FileSystem.isDirectory(kiss_Prelude.joinPath(basePath,directory,folder)):
                subdirectory = kiss_Prelude.joinPath(directory,folder)
                if (filterFolderBefore is not None):
                    if filterFolderBefore(subdirectory):
                        continue
                kiss_Prelude.walkDirectory(basePath,subdirectory,processFile,filterFolderBefore,processFolderAfter)
                if (processFolderAfter is not None):
                    processFolderAfter(subdirectory)
            else:
                file = fileOrFolder
                processFile(kiss_Prelude.joinPath(directory,file))

    @staticmethod
    def purgeDirectory(directory):
        kiss_Prelude.walkDirectory("",directory,sys_FileSystem.deleteFile,None,sys_FileSystem.deleteDirectory)
        sys_FileSystem.deleteDirectory(directory)

    @staticmethod
    def convertToHScript(kissStr):
        hscript = None
        try:
            hscript = kiss_Prelude.assertProcess("haxelib",["run", "kiss", "convert", "--hscript"],[StringTools.replace(kissStr,"\n"," ")],False)
        except BaseException as _g:
            e = haxe_Exception.caught(_g)
            raise haxe_Exception.thrown(((("failed to convert " + ("null" if kissStr is None else kissStr)) + " to hscript:\n") + Std.string(e)))
        if hscript.startswith(">>> "):
            hscript = HxString.substr(hscript,4,None)
        return StringTools.trim(hscript)

    @staticmethod
    def userHome():
        msysHome = Sys.getEnv("MSYSHOME")
        home = Sys.getEnv("HOME")
        userProfile = Sys.getEnv("UserProfile")
        if (msysHome is not None):
            return msysHome
        elif (home is not None):
            return home
        elif (userProfile is not None):
            return userProfile
        else:
            raise haxe_Exception.thrown("Cannot find user's home directory")

    @staticmethod
    def getTarget():
        return kiss_KissTarget.Python

    @staticmethod
    def assertProcess(command,args,inputLines = None,fullProcess = None,cwd = None):
        if (fullProcess is None):
            fullProcess = True
        def _hx_local_1():
            def _hx_local_0(error):
                raise haxe_Exception.thrown(error)
            return kiss_Prelude.tryProcess(command,args,_hx_local_0,inputLines,fullProcess,cwd)
        return _hx_local_1()

    @staticmethod
    def tryProcess(command,args,handleError,inputLines = None,fullProcess = None,cwd = None):
        if (fullProcess is None):
            fullProcess = True
        kiss_Prelude.print(((((((("running " + ("null" if command is None else command)) + " ") + Std.string(args)) + " ") + Std.string(inputLines)) + " from ") + Std.string(kiss_Prelude.getTarget())))
        if (inputLines is not None):
            _g = 0
            while (_g < len(inputLines)):
                line = (inputLines[_g] if _g >= 0 and _g < len(inputLines) else None)
                _g = (_g + 1)
                startIndex = None
                if (((line.find("\n") if ((startIndex is None)) else HxString.indexOfImpl(line,"\n",startIndex))) != -1):
                    handleError((("newline is not allowed in the middle of a process input line: \"" + HxOverrides.stringOrNull(StringTools.replace(line,"\n","\n"))) + "\""))
                    return None
        p = None
        try:
            args1 = ([command] + args)
            o = _hx_AnonObject({'stdin': -1, 'stdout': -1, 'stderr': -1, 'cwd': cwd})
            Reflect.setField(o,"bufsize",(Reflect.field(o,"bufsize") if (python_Boot.hasField(o,"bufsize")) else 0))
            Reflect.setField(o,"executable",(Reflect.field(o,"executable") if (python_Boot.hasField(o,"executable")) else None))
            Reflect.setField(o,"stdin",(Reflect.field(o,"stdin") if (python_Boot.hasField(o,"stdin")) else None))
            Reflect.setField(o,"stdout",(Reflect.field(o,"stdout") if (python_Boot.hasField(o,"stdout")) else None))
            Reflect.setField(o,"stderr",(Reflect.field(o,"stderr") if (python_Boot.hasField(o,"stderr")) else None))
            Reflect.setField(o,"preexec_fn",(Reflect.field(o,"preexec_fn") if (python_Boot.hasField(o,"preexec_fn")) else None))
            Reflect.setField(o,"close_fds",(Reflect.field(o,"close_fds") if (python_Boot.hasField(o,"close_fds")) else None))
            Reflect.setField(o,"shell",(Reflect.field(o,"shell") if (python_Boot.hasField(o,"shell")) else None))
            Reflect.setField(o,"cwd",(Reflect.field(o,"cwd") if (python_Boot.hasField(o,"cwd")) else None))
            Reflect.setField(o,"env",(Reflect.field(o,"env") if (python_Boot.hasField(o,"env")) else None))
            Reflect.setField(o,"universal_newlines",(Reflect.field(o,"universal_newlines") if (python_Boot.hasField(o,"universal_newlines")) else None))
            Reflect.setField(o,"startupinfo",(Reflect.field(o,"startupinfo") if (python_Boot.hasField(o,"startupinfo")) else None))
            Reflect.setField(o,"creationflags",(Reflect.field(o,"creationflags") if (python_Boot.hasField(o,"creationflags")) else 0))
            p = (python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo"),Reflect.field(o,"creationflags")) if ((Sys.systemName() == "Windows")) else python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo")))
        except BaseException as _g:
            None
            e = haxe_Exception.caught(_g).unwrap()
            handleError(Std.string(e))
            return None
        if (inputLines is not None):
            _g = 0
            while (_g < len(inputLines)):
                line = (inputLines[_g] if _g >= 0 and _g < len(inputLines) else None)
                _g = (_g + 1)
                p.stdin.write(bytearray((("" + ("null" if line is None else line)) + "\n"),"utf-8"))
        output = None
        if fullProcess:
            if (p.wait() == 0):
                output = StringTools.trim(p.stdout.readall().decode())
            else:
                handleError(((((("process " + ("null" if command is None else command)) + " ") + Std.string(args)) + " failed:\n") + HxOverrides.stringOrNull(((HxOverrides.stringOrNull(StringTools.trim(p.stdout.readall().decode())) + HxOverrides.stringOrNull(StringTools.trim(p.stderr.readall().decode())))))))
                return None
        else:
            _hx_bytes = p.stdout.readline()
            s = Reflect.field(_hx_bytes,"decode")()
            output = StringTools.trim(s)
        p.terminate()
        return output

    @staticmethod
    def libPath(haxelibName):
        return StringTools.trim(kiss_Prelude.assertProcess("haxelib",["libpath", haxelibName]))

    @staticmethod
    def shellExecute(script,shell):
        if (len(shell) == 0):
            shell = ("cmd /c" if ((Sys.systemName() == "Windows")) else "bash")
        kiss_Prelude.shellCountMutex.lock.acquire(True)
        def _hx_local_2():
            _hx_local_0 = kiss_Prelude
            _hx_local_1 = _hx_local_0.shellCount
            _hx_local_0.shellCount = (_hx_local_1 + 1)
            return _hx_local_1
        tempScript = ("tempScript" + Std.string(_hx_local_2()))
        tempScript1 = ((("null" if tempScript is None else tempScript) + ".") + HxOverrides.stringOrNull(HxOverrides.arrayGet(shell.split(" "), 0)))
        kiss_Prelude.shellCountMutex.lock.release()
        sys_io_File.saveContent(tempScript1,script)
        try:
            if (Sys.systemName() != "Windows"):
                tempScript1 = kiss_Prelude.joinPath(Sys.getCwd(),tempScript1)
            parts = (shell.split(" ") + [tempScript1])
            shell = (None if ((len(parts) == 0)) else parts.pop(0))
            kiss_Prelude.assertProcess(shell,parts)
            sys_FileSystem.deleteFile(tempScript1)
        except BaseException as _g:
            e = haxe_Exception.caught(_g)
            kiss_Prelude.printStr("# Failing script:")
            kiss_Prelude.printStr(script)
            kiss_Prelude.printStr("#################")
            sys_FileSystem.deleteFile(tempScript1)
            raise haxe_Exception.thrown(e)

    @staticmethod
    def filter(l,p = None):
        if (p is None):
            p = kiss_Prelude.truthy
        return Lambda.filter(l,p)

    @staticmethod
    def readDirectory(dir):
        _g = []
        _g1 = 0
        _g2 = sys_FileSystem.readDirectory(dir)
        while (_g1 < len(_g2)):
            file = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            x = kiss_Prelude.joinPath(dir,file)
            _g.append(x)
        return _g

    @staticmethod
    def substr(_hx_str,startIdx,endIdx = None):
        def _hx_local_0(idx):
            if (idx < 0):
                return (len(_hx_str) + idx)
            else:
                return idx
        negIdx = _hx_local_0
        if (endIdx is None):
            endIdx = len(_hx_str)
        startIndex = negIdx(startIdx)
        endIndex = negIdx(endIdx)
        return HxString.substring(_hx_str,startIndex,endIndex)

    @staticmethod
    def runtimeInsertAssertionMessage(message,error,colonsInPrefix):
        colonIdx = 0
        _g = 0
        _g1 = colonsInPrefix
        while (_g < _g1):
            _ = _g
            _g = (_g + 1)
            colonIdx = (((error.find(":") if ((colonIdx is None)) else HxString.indexOfImpl(error,":",colonIdx))) + 1)
        colonIdx = (colonIdx + 1)
        return ((HxOverrides.stringOrNull(HxString.substr(error,0,colonIdx)) + ("null" if message is None else message)) + HxOverrides.stringOrNull(HxString.substr(error,colonIdx,None)))
kiss_Prelude._hx_class = kiss_Prelude
_hx_classes["kiss.Prelude"] = kiss_Prelude

class kiss_ReaderExpDef(Enum):
    __slots__ = ()
    _hx_class_name = "kiss.ReaderExpDef"
    _hx_constructs = ["CallExp", "ListExp", "StrExp", "Symbol", "RawHaxe", "RawHaxeBlock", "TypedExp", "MetaExp", "FieldExp", "KeyValueExp", "Quasiquote", "Unquote", "UnquoteList", "ListEatingExp", "ListRestExp", "TypeParams", "HaxeMeta", "None"]

    @staticmethod
    def CallExp(func,args):
        return kiss_ReaderExpDef("CallExp", 0, (func,args))

    @staticmethod
    def ListExp(exps):
        return kiss_ReaderExpDef("ListExp", 1, (exps,))

    @staticmethod
    def StrExp(s):
        return kiss_ReaderExpDef("StrExp", 2, (s,))

    @staticmethod
    def Symbol(name):
        return kiss_ReaderExpDef("Symbol", 3, (name,))

    @staticmethod
    def RawHaxe(code):
        return kiss_ReaderExpDef("RawHaxe", 4, (code,))

    @staticmethod
    def RawHaxeBlock(code):
        return kiss_ReaderExpDef("RawHaxeBlock", 5, (code,))

    @staticmethod
    def TypedExp(path,exp):
        return kiss_ReaderExpDef("TypedExp", 6, (path,exp))

    @staticmethod
    def MetaExp(meta,exp):
        return kiss_ReaderExpDef("MetaExp", 7, (meta,exp))

    @staticmethod
    def FieldExp(field,exp):
        return kiss_ReaderExpDef("FieldExp", 8, (field,exp))

    @staticmethod
    def KeyValueExp(key,value):
        return kiss_ReaderExpDef("KeyValueExp", 9, (key,value))

    @staticmethod
    def Quasiquote(exp):
        return kiss_ReaderExpDef("Quasiquote", 10, (exp,))

    @staticmethod
    def Unquote(exp):
        return kiss_ReaderExpDef("Unquote", 11, (exp,))

    @staticmethod
    def UnquoteList(exp):
        return kiss_ReaderExpDef("UnquoteList", 12, (exp,))

    @staticmethod
    def ListEatingExp(exps):
        return kiss_ReaderExpDef("ListEatingExp", 13, (exps,))

    @staticmethod
    def ListRestExp(name):
        return kiss_ReaderExpDef("ListRestExp", 14, (name,))

    @staticmethod
    def TypeParams(types):
        return kiss_ReaderExpDef("TypeParams", 15, (types,))

    @staticmethod
    def HaxeMeta(name,params,exp):
        return kiss_ReaderExpDef("HaxeMeta", 16, (name,params,exp))
kiss_ReaderExpDef._hx_None = kiss_ReaderExpDef("None", 17, ())
kiss_ReaderExpDef._hx_class = kiss_ReaderExpDef
_hx_classes["kiss.ReaderExpDef"] = kiss_ReaderExpDef


class kiss_StreamError:
    _hx_class_name = "kiss.StreamError"
    _hx_is_interface = "False"
    __slots__ = ("position", "message")
    _hx_fields = ["position", "message"]
    _hx_methods = ["toString"]

    def __init__(self,position,message):
        self.position = position
        self.message = message

    def toString(self):
        return (("\nKiss reader error!\n" + HxOverrides.stringOrNull(kiss_Stream.toPrint(self.position))) + HxOverrides.stringOrNull((((": " + HxOverrides.stringOrNull(self.message)) + "\n"))))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.position = None
        _hx_o.message = None
kiss_StreamError._hx_class = kiss_StreamError
_hx_classes["kiss.StreamError"] = kiss_StreamError


class kiss_Stream:
    _hx_class_name = "kiss.Stream"
    _hx_is_interface = "False"
    __slots__ = ("content", "file", "line", "column", "absoluteChar", "absolutePerNewline", "startOfLine", "lineLengths")
    _hx_fields = ["content", "file", "line", "column", "absoluteChar", "absolutePerNewline", "startOfLine", "lineLengths"]
    _hx_methods = ["peekChars", "isEmpty", "position", "startsWith", "dropChars", "putBackString", "takeChars", "dropString", "dropStringIf", "dropUntil", "dropWhitespace", "takeUntilOneOf", "takeUntil", "takeUntilAndDrop", "takeBetween", "takeRest", "takeLine", "takeLineAsStream", "expect"]
    _hx_statics = ["fromFile", "fromString", "toPrint", "error"]

    def __init__(self,file,content):
        self.lineLengths = []
        self.startOfLine = True
        self.absolutePerNewline = 1
        self.file = StringTools.replace(file,"\\","/")
        startIndex = None
        if (((content.find("\r") if ((startIndex is None)) else HxString.indexOfImpl(content,"\r",startIndex))) >= 0):
            self.absolutePerNewline = 2
            content = StringTools.replace(content,"\r","")
        index = (len(content) - 1)
        if ((("" if (((index < 0) or ((index >= len(content))))) else content[index])) != "\n"):
            content = (("null" if content is None else content) + "\n")
        self.content = content
        self.line = 1
        self.column = 1
        self.absoluteChar = 0

    def peekChars(self,chars):
        if (len(self.content) < chars):
            return haxe_ds_Option._hx_None
        return haxe_ds_Option.Some(HxString.substr(self.content,0,chars))

    def isEmpty(self):
        return (len(self.content) == 0)

    def position(self):
        return _hx_AnonObject({'file': self.file, 'line': self.line, 'column': self.column, 'absoluteChar': self.absoluteChar})

    def startsWith(self,s):
        _g = self.peekChars(len(s))
        if (_g.index == 0):
            s1 = _g.params[0]
            if (s == s1):
                return True
            else:
                return False
        else:
            return False

    def dropChars(self,count):
        _g = 0
        _g1 = count
        while (_g < _g1):
            idx = _g
            _g = (_g + 1)
            _this = self.content
            _g2 = ("" if (((idx < 0) or ((idx >= len(_this))))) else _this[idx])
            if (_g2 == "\n"):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.absoluteChar
                _hx_local_0.absoluteChar = (_hx_local_1 + self.absolutePerNewline)
                _hx_local_0.absoluteChar
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.line
                _hx_local_2.line = (_hx_local_3 + 1)
                _hx_local_2.line
                _this1 = self.lineLengths
                x = self.column
                _this1.append(x)
                self.column = 1
                self.startOfLine = True
            else:
                c = _g2
                if (StringTools.trim(c) == ""):
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.absoluteChar
                    _hx_local_4.absoluteChar = (_hx_local_5 + 1)
                    _hx_local_4.absoluteChar
                    _hx_local_6 = self
                    _hx_local_7 = _hx_local_6.column
                    _hx_local_6.column = (_hx_local_7 + 1)
                    _hx_local_6.column
                else:
                    _hx_local_8 = self
                    _hx_local_9 = _hx_local_8.absoluteChar
                    _hx_local_8.absoluteChar = (_hx_local_9 + 1)
                    _hx_local_8.absoluteChar
                    _hx_local_10 = self
                    _hx_local_11 = _hx_local_10.column
                    _hx_local_10.column = (_hx_local_11 + 1)
                    _hx_local_10.column
                    self.startOfLine = False
        self.content = HxString.substr(self.content,count,None)

    def putBackString(self,s):
        idx = (len(s) - 1)
        while (idx >= 0):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.absoluteChar
            _hx_local_0.absoluteChar = (_hx_local_1 - 1)
            _hx_local_0.absoluteChar
            if ((("" if (((idx < 0) or ((idx >= len(s))))) else s[idx])) == "\n"):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.line
                _hx_local_2.line = (_hx_local_3 - 1)
                _hx_local_2.line
                _this = self.lineLengths
                self.column = (None if ((len(_this) == 0)) else _this.pop())
            else:
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.column
                _hx_local_4.column = (_hx_local_5 - 1)
                _hx_local_4.column
            idx = (idx - 1)
        self.content = (("null" if s is None else s) + HxOverrides.stringOrNull(self.content))

    def takeChars(self,count):
        if (count > len(self.content)):
            return haxe_ds_Option._hx_None
        toReturn = HxString.substr(self.content,0,count)
        self.dropChars(count)
        return haxe_ds_Option.Some(toReturn)

    def dropString(self,s):
        toDrop = HxString.substr(self.content,0,len(s))
        if (toDrop != s):
            kiss_Stream.error(self,("Expected " + ("null" if s is None else s)))
        self.dropChars(len(s))

    def dropStringIf(self,s):
        toDrop = HxString.substr(self.content,0,len(s))
        if (toDrop == s):
            self.dropString(toDrop)
            return True
        return False

    def dropUntil(self,s):
        _this = self.content
        startIndex = None
        self.dropChars((_this.find(s) if ((startIndex is None)) else HxString.indexOfImpl(_this,s,startIndex)))

    def dropWhitespace(self):
        trimmed = StringTools.ltrim(self.content)
        self.dropChars((len(self.content) - len(trimmed)))

    def takeUntilOneOf(self,terminators,allowEOF = None):
        if (allowEOF is None):
            allowEOF = False
        _g = []
        _g1 = 0
        while (_g1 < len(terminators)):
            term = (terminators[_g1] if _g1 >= 0 and _g1 < len(terminators) else None)
            _g1 = (_g1 + 1)
            _this = self.content
            startIndex = None
            x = (_this.find(term) if ((startIndex is None)) else HxString.indexOfImpl(_this,term,startIndex))
            _g.append(x)
        def _hx_local_1(idx):
            return (idx >= 0)
        indices = list(filter(_hx_local_1,_g))
        if (len(indices) == 0):
            if allowEOF:
                return haxe_ds_Option.Some(self.takeRest())
            else:
                return haxe_ds_Option._hx_None
        firstIndex = Math.floor(Lambda.fold(indices,_Math_Math_Impl_.min,(indices[0] if 0 < len(indices) else None)))
        return self.takeChars(firstIndex)

    def takeUntil(self,s,allowEOF = None):
        if (allowEOF is None):
            allowEOF = False
        return self.takeUntilOneOf([s],allowEOF)

    def takeUntilAndDrop(self,s,allowEOF = None):
        if (allowEOF is None):
            allowEOF = False
        _this = self.content
        startIndex = None
        idx = (_this.find(s) if ((startIndex is None)) else HxString.indexOfImpl(_this,s,startIndex))
        if (idx < 0):
            if allowEOF:
                return haxe_ds_Option.Some(self.takeRest())
            else:
                return haxe_ds_Option._hx_None
        toReturn = HxString.substr(self.content,0,idx)
        self.dropChars((len(toReturn) + len(s)))
        return haxe_ds_Option.Some(toReturn)

    def takeBetween(self,open,close,escapeSeq = None):
        if (not self.startsWith(open)):
            return haxe_ds_Option._hx_None
        self.dropString(open)
        taken = ""
        while True:
            if self.startsWith(close):
                self.dropString(close)
                return haxe_ds_Option.Some(taken)
            elif self.startsWith(open):
                kiss_Stream.error(self,"takeBetween() does not support nested delimiter pairs")
            elif ((escapeSeq is not None) and self.startsWith(escapeSeq)):
                self.dropString(escapeSeq)
                if self.startsWith(open):
                    self.dropString(open)
                    taken = (("null" if taken is None else taken) + ("null" if open is None else open))
                elif self.startsWith(close):
                    self.dropString(close)
                    taken = (("null" if taken is None else taken) + ("null" if close is None else close))
                elif self.startsWith(escapeSeq):
                    self.dropString(escapeSeq)
                    taken = (("null" if taken is None else taken) + ("null" if escapeSeq is None else escapeSeq))
                else:
                    kiss_Stream.error(self,"invalid escape sequence")
            else:
                next = None
                _g = self.takeChars(1)
                if (_g.index == 0):
                    n = _g.params[0]
                    next = n
                else:
                    kiss_Stream.error(self,("Ran out of characters before closing delimiter " + ("null" if close is None else close)))
                    next = ""
                taken = (("null" if taken is None else taken) + ("null" if next is None else next))

    def takeRest(self):
        toReturn = self.content
        self.dropChars(len(self.content))
        return toReturn

    def takeLine(self):
        _g = self.takeUntilAndDrop("\n")
        tmp = _g.index
        if (tmp == 0):
            line = _g.params[0]
            return haxe_ds_Option.Some(line)
        elif (tmp == 1):
            if (len(self.content) > 0):
                return haxe_ds_Option.Some(self.takeRest())
            else:
                return haxe_ds_Option._hx_None
        else:
            return haxe_ds_Option._hx_None

    def takeLineAsStream(self):
        lineNo = self.line
        column = self.column
        absoluteChar = self.absoluteChar
        _g = self.takeLine()
        if (_g.index == 0):
            line = _g.params[0]
            s = kiss_Stream.fromString(line)
            s.line = lineNo
            s.column = column
            s.file = self.file
            s.absoluteChar = absoluteChar
            return haxe_ds_Option.Some(s)
        else:
            return haxe_ds_Option._hx_None

    def expect(self,whatToExpect,f):
        position = self.position()
        _g = f()
        if (_g.index == 0):
            s = _g.params[0]
            return s
        else:
            kiss_Stream.error(self,("Expected " + ("null" if whatToExpect is None else whatToExpect)))
            return None

    @staticmethod
    def fromFile(file):
        return kiss_Stream(file,sys_io_File.getContent(file))

    @staticmethod
    def fromString(content,position = None):
        file = "string"
        if (position is not None):
            file = position.file
        s = kiss_Stream(file,content)
        if (position is not None):
            s.line = position.line
            s.column = position.column
            s.absoluteChar = position.absoluteChar
        return s

    @staticmethod
    def toPrint(p):
        return ((((("" + HxOverrides.stringOrNull(p.file)) + ":") + Std.string(p.line)) + ":") + Std.string(p.column))

    @staticmethod
    def error(stream,message):
        raise haxe_Exception.thrown(kiss_StreamError(stream.position(),message))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.content = None
        _hx_o.file = None
        _hx_o.line = None
        _hx_o.column = None
        _hx_o.absoluteChar = None
        _hx_o.absolutePerNewline = None
        _hx_o.startOfLine = None
        _hx_o.lineLengths = None
kiss_Stream._hx_class = kiss_Stream
_hx_classes["kiss.Stream"] = kiss_Stream

class kiss_tools_ShortcutKey(Enum):
    __slots__ = ()
    _hx_class_name = "kiss_tools.ShortcutKey"
    _hx_constructs = ["Cancel", "Final", "Prefix"]

    @staticmethod
    def Cancel(key):
        return kiss_tools_ShortcutKey("Cancel", 0, (key,))

    @staticmethod
    def Final(item):
        return kiss_tools_ShortcutKey("Final", 1, (item,))

    @staticmethod
    def Prefix(keys):
        return kiss_tools_ShortcutKey("Prefix", 2, (keys,))
kiss_tools_ShortcutKey._hx_class = kiss_tools_ShortcutKey
_hx_classes["kiss_tools.ShortcutKey"] = kiss_tools_ShortcutKey


class kiss_tools_KeyShortcutHandler:
    _hx_class_name = "kiss_tools.KeyShortcutHandler"
    _hx_is_interface = "False"
    __slots__ = ("rootMap", "currentMap", "cancelKey", "onSelectPrefixMap", "onSelectItem", "onFinishOrCancel", "onBadKey", "onBadShortcut")
    _hx_fields = ["rootMap", "currentMap", "cancelKey", "onSelectPrefixMap", "onSelectItem", "onFinishOrCancel", "onBadKey", "onBadShortcut"]
    _hx_methods = ["_selectMap", "start", "cancel", "clear", "handleKey", "extractKeyboardShortcuts", "registerShortcut", "registerItem", "prefixMapToStrings"]

    def __init__(self):
        self.onBadShortcut = None
        self.onBadKey = None
        self.onFinishOrCancel = None
        self.onSelectItem = None
        self.onSelectPrefixMap = None
        self.cancelKey = None
        self.currentMap = None
        self.rootMap = haxe_ds_StringMap()

    def _selectMap(self,m):
        self.currentMap = m
        _muvsRcqRUNKXq3DGTNW4Gs = self.onSelectPrefixMap
        if kiss_Prelude.truthy(_muvsRcqRUNKXq3DGTNW4Gs):
            _cRwMgZS6ep2S255r42LVZu = _muvsRcqRUNKXq3DGTNW4Gs
            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_cRwMgZS6ep2S255r42LVZu))):
                handler = _muvsRcqRUNKXq3DGTNW4Gs
                handler(m,self.prefixMapToStrings(m))

    def start(self):
        self._selectMap(self.rootMap)

    def cancel(self):
        self.currentMap = None
        _55wSkH1rn3udtGmtifwoo9 = self.onFinishOrCancel
        if kiss_Prelude.truthy(_55wSkH1rn3udtGmtifwoo9):
            _9r9Uz8cZNVGAgaUQw6rVtL = _55wSkH1rn3udtGmtifwoo9
            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_9r9Uz8cZNVGAgaUQw6rVtL))):
                handler = _55wSkH1rn3udtGmtifwoo9
                handler()

    def clear(self):
        self.rootMap.h.clear()

    def handleKey(self,key):
        if kiss_Prelude.truthy((not kiss_Prelude.truthy(self.currentMap))):
            _eRhvjCxeyUhmm6oADy7PDn = self.onBadKey
            if kiss_Prelude.truthy(_eRhvjCxeyUhmm6oADy7PDn):
                _c3svKm5zsyVWoVCwf2atsU = _eRhvjCxeyUhmm6oADy7PDn
                if kiss_Prelude.truthy(kiss_Prelude.isNull(_c3svKm5zsyVWoVCwf2atsU)):
                    raise haxe_Exception.thrown(kiss_Prelude.add("Tried to handle key ",Std.string(key)," without calling start() first"))
                else:
                    handler = _eRhvjCxeyUhmm6oADy7PDn
                    handler(key,None)
                    return
            else:
                raise haxe_Exception.thrown(kiss_Prelude.add("Tried to handle key ",Std.string(key)," without calling start() first"))
        if kiss_Prelude.truthy(kiss_Prelude.areEqual(self.cancelKey,key)):
            self.cancel()
        else:
            _g = self.currentMap.h.get(key,None)
            _mUUh9EtCVkUztfoTucQcLU = _g
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_mUUh9EtCVkUztfoTucQcLU)):
                _4xJZMdHRHJpze2VerBwRXM = self.onBadKey
                if kiss_Prelude.truthy(_4xJZMdHRHJpze2VerBwRXM):
                    _dLKcmHsYfPJw5gkDsoWLkS = _4xJZMdHRHJpze2VerBwRXM
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_dLKcmHsYfPJw5gkDsoWLkS)):
                        raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))
                    else:
                        handler = _4xJZMdHRHJpze2VerBwRXM
                        handler(key,self.currentMap)
                        return
                else:
                    raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))
            elif (_g is None):
                _4xJZMdHRHJpze2VerBwRXM = self.onBadKey
                if kiss_Prelude.truthy(_4xJZMdHRHJpze2VerBwRXM):
                    _dLKcmHsYfPJw5gkDsoWLkS = _4xJZMdHRHJpze2VerBwRXM
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_dLKcmHsYfPJw5gkDsoWLkS)):
                        raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))
                    else:
                        handler = _4xJZMdHRHJpze2VerBwRXM
                        handler(key,self.currentMap)
                        return
                else:
                    raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))
            else:
                tmp = _g.index
                if (tmp == 1):
                    item = _g.params[0]
                    self.cancel()
                    _7Kq6d1c5Uz1Ry7X5nC5Qj2 = self.onSelectItem
                    if kiss_Prelude.truthy(_7Kq6d1c5Uz1Ry7X5nC5Qj2):
                        _gNeUdnaHy8XDkcpXfXMpVG = _7Kq6d1c5Uz1Ry7X5nC5Qj2
                        if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_gNeUdnaHy8XDkcpXfXMpVG))):
                            handler = _7Kq6d1c5Uz1Ry7X5nC5Qj2
                            handler(item)
                elif (tmp == 2):
                    nextMap = _g.params[0]
                    self._selectMap(nextMap)
                else:
                    _4xJZMdHRHJpze2VerBwRXM = self.onBadKey
                    if kiss_Prelude.truthy(_4xJZMdHRHJpze2VerBwRXM):
                        _dLKcmHsYfPJw5gkDsoWLkS = _4xJZMdHRHJpze2VerBwRXM
                        if kiss_Prelude.truthy(kiss_Prelude.isNull(_dLKcmHsYfPJw5gkDsoWLkS)):
                            raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))
                        else:
                            handler = _4xJZMdHRHJpze2VerBwRXM
                            handler(key,self.currentMap)
                            return
                    else:
                        raise haxe_Exception.thrown(kiss_Prelude.add("Key ",Std.string(key)," is not defined in ",("null" if ((self.currentMap is None)) else self.currentMap.toString())," and no onBadKey event was given"))

    def extractKeyboardShortcuts(self,_hx_str,stream = None,shortcuts = None):
        if kiss_Prelude.truthy((not kiss_Prelude.truthy(stream))):
            stream = kiss_Stream.fromString(_hx_str)
        if kiss_Prelude.truthy((not kiss_Prelude.truthy(shortcuts))):
            shortcuts = []
        _g = stream.takeUntilOneOf(["[", "{"],False)
        _wLV8pfKa6Aj9omNHcU23LK = _g
        if kiss_Prelude.truthy(kiss_Prelude.isNull(_wLV8pfKa6Aj9omNHcU23LK)):
            return shortcuts
        elif (_g.index == 0):
            _g1 = _g.params[0]
            _g = stream.takeChars(1)
            _dmWJW8LACQPhdn8nDpmfUc = _g
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_dmWJW8LACQPhdn8nDpmfUc)):
                raise haxe_Exception.thrown("takeUntilOneOf lied")
            elif (_g.index == 0):
                _g1 = _g.params[0]
                if (_g1 == "["):
                    _g = stream.takeUntilAndDrop("]")
                    _kyR2sXDxxrthsSAchYv9CG = _g
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_kyR2sXDxxrthsSAchYv9CG)):
                        _5bAfFM1pp2s1MLo8t9xYCy = self.onBadShortcut
                        if kiss_Prelude.truthy(_5bAfFM1pp2s1MLo8t9xYCy):
                            _wsMExsCwnSK9XJYsX8z7wS = _5bAfFM1pp2s1MLo8t9xYCy
                            if kiss_Prelude.truthy(kiss_Prelude.isNull(_wsMExsCwnSK9XJYsX8z7wS)):
                                raise haxe_Exception.thrown(kiss_Prelude.add("unclosed [ in ",Std.string(_hx_str),""))
                            else:
                                handler = _5bAfFM1pp2s1MLo8t9xYCy
                                handler(_hx_str,None)
                                return None
                        else:
                            raise haxe_Exception.thrown(kiss_Prelude.add("unclosed [ in ",Std.string(_hx_str),""))
                    elif (_g.index == 0):
                        newShortcuts = _g.params[0]
                        return self.extractKeyboardShortcuts(_hx_str,stream,(shortcuts + list(newShortcuts)))
                    else:
                        _5bAfFM1pp2s1MLo8t9xYCy = self.onBadShortcut
                        if kiss_Prelude.truthy(_5bAfFM1pp2s1MLo8t9xYCy):
                            _wsMExsCwnSK9XJYsX8z7wS = _5bAfFM1pp2s1MLo8t9xYCy
                            if kiss_Prelude.truthy(kiss_Prelude.isNull(_wsMExsCwnSK9XJYsX8z7wS)):
                                raise haxe_Exception.thrown(kiss_Prelude.add("unclosed [ in ",Std.string(_hx_str),""))
                            else:
                                handler = _5bAfFM1pp2s1MLo8t9xYCy
                                handler(_hx_str,None)
                                return None
                        else:
                            raise haxe_Exception.thrown(kiss_Prelude.add("unclosed [ in ",Std.string(_hx_str),""))
                elif (_g1 == "{"):
                    _g = stream.takeUntilAndDrop("}")
                    _uQiTsgACwU9dAANCbxQhte = _g
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_uQiTsgACwU9dAANCbxQhte)):
                        _hauwgPP8FCmzYkBNtwmh9 = self.onBadShortcut
                        if kiss_Prelude.truthy(_hauwgPP8FCmzYkBNtwmh9):
                            _t6XCZd7wRbaWFmZGHGYQsx = _hauwgPP8FCmzYkBNtwmh9
                            if kiss_Prelude.truthy(kiss_Prelude.isNull(_t6XCZd7wRbaWFmZGHGYQsx)):
                                raise haxe_Exception.thrown(kiss_Prelude.add("unclosed { in ",Std.string(_hx_str),""))
                            else:
                                handler = _hauwgPP8FCmzYkBNtwmh9
                                handler(_hx_str,None)
                                return None
                        else:
                            raise haxe_Exception.thrown(kiss_Prelude.add("unclosed { in ",Std.string(_hx_str),""))
                    elif (_g.index == 0):
                        newShortcut = _g.params[0]
                        return self.extractKeyboardShortcuts(_hx_str,stream,(shortcuts + [newShortcut]))
                    else:
                        _hauwgPP8FCmzYkBNtwmh9 = self.onBadShortcut
                        if kiss_Prelude.truthy(_hauwgPP8FCmzYkBNtwmh9):
                            _t6XCZd7wRbaWFmZGHGYQsx = _hauwgPP8FCmzYkBNtwmh9
                            if kiss_Prelude.truthy(kiss_Prelude.isNull(_t6XCZd7wRbaWFmZGHGYQsx)):
                                raise haxe_Exception.thrown(kiss_Prelude.add("unclosed { in ",Std.string(_hx_str),""))
                            else:
                                handler = _hauwgPP8FCmzYkBNtwmh9
                                handler(_hx_str,None)
                                return None
                        else:
                            raise haxe_Exception.thrown(kiss_Prelude.add("unclosed { in ",Std.string(_hx_str),""))
                else:
                    raise haxe_Exception.thrown("takeUntilOneOf lied")
            else:
                raise haxe_Exception.thrown("takeUntilOneOf lied")
        else:
            return shortcuts

    def registerShortcut(self,keys,description,item,force = None,prefixMap = None):
        if kiss_Prelude.truthy((not kiss_Prelude.truthy(prefixMap))):
            prefixMap = self.rootMap
        firstKey = HxOverrides.shift(keys)
        tmp = kiss_Prelude.truthy
        _mwxGMkTq7m6c2PLRxEaYXQ = (not kiss_Prelude.truthy(force))
        tmp1 = None
        if kiss_Prelude.truthy(_mwxGMkTq7m6c2PLRxEaYXQ):
            _dHQfLcbfWLkqLg2RyBqqAc = (firstKey in prefixMap.h)
            _d4db7ogtqzVk1T8RQvmbjM = None
            if kiss_Prelude.truthy(_dHQfLcbfWLkqLg2RyBqqAc):
                _d4db7ogtqzVk1T8RQvmbjM = _dHQfLcbfWLkqLg2RyBqqAc
            else:
                _sEWpR2hgpG5y2821DfTiTX = kiss_Prelude.areEqual(firstKey,self.cancelKey)
                _d4db7ogtqzVk1T8RQvmbjM = _sEWpR2hgpG5y2821DfTiTX
            tmp1 = _d4db7ogtqzVk1T8RQvmbjM
        else:
            tmp1 = _mwxGMkTq7m6c2PLRxEaYXQ
        if tmp(tmp1):
            existingKey = (kiss_tools_ShortcutKey.Cancel(self.cancelKey) if (kiss_Prelude.truthy(kiss_Prelude.areEqual(firstKey,self.cancelKey))) else prefixMap.h.get(firstKey,None))
            conflictMessage = kiss_Prelude.add("Keyboard shortcut for ",Std.string(description)," conflicts with ",Std.string(existingKey),"")
            if kiss_Prelude.truthy(keys):
                _oCFqMYHNKutdVpd93gHnry = existingKey
                if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_oCFqMYHNKutdVpd93gHnry))):
                    if (existingKey is not None):
                        tmp = existingKey.index
                        if (tmp == 0):
                            otherItem = existingKey.params[0]
                            if kiss_Prelude.truthy(kiss_Prelude.areEqual(otherItem,item)):
                                return
                            else:
                                _eYAGn3d1q9ZTaNsP5EFWcr = self.onBadShortcut
                                if kiss_Prelude.truthy(_eYAGn3d1q9ZTaNsP5EFWcr):
                                    _soWQbhhU7wGaMZFuMkPJo7 = _eYAGn3d1q9ZTaNsP5EFWcr
                                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_soWQbhhU7wGaMZFuMkPJo7)):
                                        raise haxe_Exception.thrown(conflictMessage)
                                    else:
                                        handler = _eYAGn3d1q9ZTaNsP5EFWcr
                                        handler(description,existingKey)
                                        return
                                else:
                                    raise haxe_Exception.thrown(conflictMessage)
                        elif (tmp == 1):
                            otherItem = existingKey.params[0]
                            if kiss_Prelude.truthy(kiss_Prelude.areEqual(otherItem,item)):
                                return
                            else:
                                _eYAGn3d1q9ZTaNsP5EFWcr = self.onBadShortcut
                                if kiss_Prelude.truthy(_eYAGn3d1q9ZTaNsP5EFWcr):
                                    _soWQbhhU7wGaMZFuMkPJo7 = _eYAGn3d1q9ZTaNsP5EFWcr
                                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_soWQbhhU7wGaMZFuMkPJo7)):
                                        raise haxe_Exception.thrown(conflictMessage)
                                    else:
                                        handler = _eYAGn3d1q9ZTaNsP5EFWcr
                                        handler(description,existingKey)
                                        return
                                else:
                                    raise haxe_Exception.thrown(conflictMessage)
                        elif (tmp == 2):
                            innerPrefixMap = existingKey.params[0]
                            self.registerShortcut(keys,description,item,None,innerPrefixMap)
                        else:
                            pass
            else:
                _cs2uhbP5dEzS6tMZACvvAk = self.onBadShortcut
                if kiss_Prelude.truthy(_cs2uhbP5dEzS6tMZACvvAk):
                    _2TKnFW2cLzMEFgFoF9hgQM = _cs2uhbP5dEzS6tMZACvvAk
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_2TKnFW2cLzMEFgFoF9hgQM)):
                        raise haxe_Exception.thrown(conflictMessage)
                    else:
                        handler = _cs2uhbP5dEzS6tMZACvvAk
                        handler(description,existingKey)
                        return
                else:
                    raise haxe_Exception.thrown(conflictMessage)
        elif kiss_Prelude.truthy(True):
            if kiss_Prelude.truthy(keys):
                innerPrefixMap = haxe_ds_StringMap()
                v = kiss_tools_ShortcutKey.Prefix(innerPrefixMap)
                prefixMap.h[firstKey] = v
                self.registerShortcut(keys,description,item,force,innerPrefixMap)
            else:
                v = kiss_tools_ShortcutKey.Final(item)
                prefixMap.h[firstKey] = v

    def registerItem(self,description,item,force = None):
        _gcGEeaDSFvd42F3ruKhv7A = self.extractKeyboardShortcuts(description)
        if kiss_Prelude.truthy(_gcGEeaDSFvd42F3ruKhv7A):
            _6Ycrz1x9eikAa6Ze3McZ3x = _gcGEeaDSFvd42F3ruKhv7A
            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_6Ycrz1x9eikAa6Ze3McZ3x))):
                keyboardShortcut = _gcGEeaDSFvd42F3ruKhv7A
                self.registerShortcut(keyboardShortcut,description,item,force)

    def prefixMapToStrings(self,_hx_map):
        _g = haxe_ds_StringMap()
        map1 = _hx_map
        _g_map = map1
        _g_keys = map1.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            key1 = _g_key
            mapping = _g_value
            value = None
            _ucx3gp71FRRp7kHkaLorxJ = mapping
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_ucx3gp71FRRp7kHkaLorxJ)):
                raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("case should never match pattern null","/home/nat/repos/kisslang/projects/kiss-tools/src/kiss_tools/KeyShortcutHandler.kiss:110:25: Assertion failed: \nFrom:[(never null)]",4))
            else:
                value1 = mapping.index
                if (value1 == 0):
                    _g1 = mapping.params[0]
                    value = "cancel"
                elif (value1 == 1):
                    thing = mapping.params[0]
                    value = Std.string(thing)
                elif (value1 == 2):
                    _hx_map = mapping.params[0]
                    _g2 = []
                    elem = _hx_map.keys()
                    while elem.hasNext():
                        elem1 = elem.next()
                        _g2.append(elem1)
                    value = ", ".join([python_Boot.toString1(x1,'') for x1 in _g2])
                else:
                    pass
            _g.h[key1] = value
        return _g

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.rootMap = None
        _hx_o.currentMap = None
        _hx_o.cancelKey = None
        _hx_o.onSelectPrefixMap = None
        _hx_o.onSelectItem = None
        _hx_o.onFinishOrCancel = None
        _hx_o.onBadKey = None
        _hx_o.onBadShortcut = None
kiss_tools_KeyShortcutHandler._hx_class = kiss_tools_KeyShortcutHandler
_hx_classes["kiss_tools.KeyShortcutHandler"] = kiss_tools_KeyShortcutHandler


class nat_Archive:
    _hx_class_name = "nat.Archive"
    _hx_is_interface = "False"
    __slots__ = ("systems", "gitDir", "entries", "playgrounds", "archiveDir", "defaultInitializer")
    _hx_fields = ["systems", "gitDir", "entries", "playgrounds", "archiveDir", "defaultInitializer"]
    _hx_methods = ["changePlaygrounds", "currentPlayground", "addSystem", "addAndProcessSystem", "refreshSystem", "forceProcessAll", "processSystems", "createEntry", "refreshEntry", "gitSync", "_saveEntry", "fullString", "filePath"]

    def __init__(self,archiveDir):
        self.archiveDir = None
        self.playgrounds = None
        self.entries = None
        self.defaultInitializer = None
        self.systems = []
        gitDir = kiss_Prelude.joinPath(archiveDir,".git")
        self.gitDir = (haxe_ds_Option.Some(gitDir) if (kiss_Prelude.truthy(sys_FileSystem.exists(gitDir))) else haxe_ds_Option._hx_None)
        entryDir = kiss_Prelude.joinPath(archiveDir,"entries")
        filesDir = kiss_Prelude.joinPath(archiveDir,"files")
        _qxQJTZdXTXEWt4WHw3XoUG = sys_FileSystem.exists(archiveDir)
        if (not kiss_Prelude.truthy(_qxQJTZdXTXEWt4WHw3XoUG)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage(kiss_Prelude.add("Archive directory ",Std.string(archiveDir)," does not exist"),"/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/Archive.kiss:14:17: Assertion failed: \nFrom:[(assert (FileSystem.exists archiveDir) (the String (+ \"Archive directory \" (Std.string archiveDir) \" does not exist\")))]",4))
        _YmHMrZt5krAdYsbfoNQGx = sys_FileSystem.isDirectory(archiveDir)
        if (not kiss_Prelude.truthy(_YmHMrZt5krAdYsbfoNQGx)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage(kiss_Prelude.add("",Std.string(archiveDir)," is not a directory"),"/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/Archive.kiss:15:17: Assertion failed: \nFrom:[(assert (FileSystem.isDirectory archiveDir) (the String (+ \"\" (Std.string archiveDir) \" is not a directory\")))]",4))
        sys_FileSystem.createDirectory(entryDir)
        sys_FileSystem.createDirectory(filesDir)
        _gu1aNcr5X2TcjgXWF2PNLE = self.gitDir
        if kiss_Prelude.truthy(_gu1aNcr5X2TcjgXWF2PNLE):
            _qmt1gnheJh3RPTdYVQWZeh = _gu1aNcr5X2TcjgXWF2PNLE
            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_qmt1gnheJh3RPTdYVQWZeh))):
                if (_gu1aNcr5X2TcjgXWF2PNLE.index == 0):
                    gitDir = _gu1aNcr5X2TcjgXWF2PNLE.params[0]
                    kiss_Prelude.assertProcess("git",["pull"],[],True,archiveDir)
        entryFiles = sys_FileSystem.readDirectory(entryDir)
        _g = haxe_ds_StringMap()
        _g1 = 0
        while (_g1 < len(entryFiles)):
            file = (entryFiles[_g1] if _g1 >= 0 and _g1 < len(entryFiles) else None)
            _g1 = (_g1 + 1)
            key = haxe_io_Path.withoutExtension(file)
            value = tink_json_Parser0().parse(sys_io_File.getContent(kiss_Prelude.joinPath(archiveDir,"entries",file)))
            _g.h[key] = value
        self.entries = _g
        playgroundsFile = kiss_Prelude.joinPath(archiveDir,"playgrounds.json")
        if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(playgroundsFile)))):
            sys_io_File.saveContent(playgroundsFile,"{\n\t\"default\": \"Playground-MAIN\",\n\t\"Playground-MAIN\": {\n\t\t\"catsMatch\": \"true\"\n\t}\n}\n")
        self.playgrounds = python_lib_Json.loads(sys_io_File.getContent(playgroundsFile),**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
        self.archiveDir = archiveDir

    def changePlaygrounds(self,change):
        change(self.playgrounds)
        sys_io_File.saveContent(kiss_Prelude.joinPath(self.archiveDir,"playgrounds.json"),haxe_format_JsonPrinter.print(self.playgrounds,None,"\t"))
        return self.gitSync()

    def currentPlayground(self):
        return Reflect.field(self.playgrounds,"default")

    def addSystem(self,system):
        _this = self.systems
        _this.append(system)
        return system

    def addAndProcessSystem(self,system,ui = None):
        self.addSystem(system)
        self.refreshSystem(system)
        system.process(self,ui)
        return system

    def refreshSystem(self,system):
        _hx_map = self.entries
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            id = _g_key
            e = _g_value
            system.checkEntryInOrOut(self,e)
        return None

    def forceProcessAll(self,ui = None):
        _g = 0
        _g1 = self.systems
        while (_g < len(_g1)):
            system = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.refreshSystem(system)
        return self.processSystems()

    def processSystems(self,ui = None):
        _g = 0
        _g1 = self.systems
        while (_g < len(_g1)):
            system = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            system.process(self,ui)
        return None

    def createEntry(self,initializer):
        e = nat_Entry()
        if kiss_Prelude.truthy(self.defaultInitializer):
            self.defaultInitializer(e)
        initializer(e)
        self.entries.h[e.id] = e
        self.refreshEntry(e)
        return e

    def refreshEntry(self,e):
        self._saveEntry(e)
        _g = 0
        _g1 = self.systems
        while (_g < len(_g1)):
            system = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            system.checkEntryInOrOut(self,e)
        return None

    def gitSync(self):
        _gthis = self
        _msenbrmHapUgB8UeWKVKqF = self.gitDir
        if kiss_Prelude.truthy(_msenbrmHapUgB8UeWKVKqF):
            _m5nx9apeMYUvVixpAKPFGJ = _msenbrmHapUgB8UeWKVKqF
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_m5nx9apeMYUvVixpAKPFGJ)):
                return None
            elif (_msenbrmHapUgB8UeWKVKqF.index == 0):
                gitDir = _msenbrmHapUgB8UeWKVKqF.params[0]
                def _hx_local_0(gitArgs):
                    return kiss_Prelude.assertProcess("git",gitArgs,[],True,_gthis.archiveDir)
                _thoDtrsg1u5mfiMjVRTVt8 = _hx_local_0
                if kiss_Prelude.truthy(_thoDtrsg1u5mfiMjVRTVt8):
                    _2UfUywWX5xt9WthYq2jnwS = _thoDtrsg1u5mfiMjVRTVt8
                    if kiss_Prelude.truthy(kiss_Prelude.isNull(_2UfUywWX5xt9WthYq2jnwS)):
                        return None
                    else:
                        gitDo = _thoDtrsg1u5mfiMjVRTVt8
                        gitDo(["add", "playgrounds.json"])
                        gitDo(["add", "entries"])
                        gitDo(["add", "files"])
                        gitDo(["commit", "--no-verify", "--allow-empty", "-m", kiss_Prelude.add("",Std.string(Date.now()),"")])
                        return gitDo(["push"])
                else:
                    return None
            else:
                return None
        else:
            return None

    def _saveEntry(self,e):
        sys_io_File.saveContent(kiss_Prelude.joinPath(self.archiveDir,"entries",haxe_io_Path.withExtension(e.id,"json")),tink_json_Writer1().write(e))
        return self.gitSync()

    def fullString(self,e):
        return haxe_format_JsonPrinter.print(e,None,"\t")

    def filePath(self,file):
        return kiss_Prelude.joinPath(self.archiveDir,"files",file)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.systems = None
        _hx_o.gitDir = None
        _hx_o.entries = None
        _hx_o.playgrounds = None
        _hx_o.archiveDir = None
        _hx_o.defaultInitializer = None
nat_Archive._hx_class = nat_Archive
_hx_classes["nat.Archive"] = nat_Archive

class nat_CommandArgType(Enum):
    __slots__ = ()
    _hx_class_name = "nat.CommandArgType"
    _hx_constructs = ["SelectedEntry", "SelectedEntries", "Text", "VarText", "Number", "Numbers", "OneEntry", "Entries", "TagsFromAll", "TagsFromSelected", "Position"]

    @staticmethod
    def SelectedEntries(min,max):
        return nat_CommandArgType("SelectedEntries", 1, (min,max))

    @staticmethod
    def Text(maxLength):
        return nat_CommandArgType("Text", 2, (maxLength,))

    @staticmethod
    def VarText(maxLength):
        return nat_CommandArgType("VarText", 3, (maxLength,))

    @staticmethod
    def Number(min,max,inStepsOf):
        return nat_CommandArgType("Number", 4, (min,max,inStepsOf))

    @staticmethod
    def Numbers(min,max,inStepsOf):
        return nat_CommandArgType("Numbers", 5, (min,max,inStepsOf))

    @staticmethod
    def Entries(min,max):
        return nat_CommandArgType("Entries", 7, (min,max))
nat_CommandArgType.SelectedEntry = nat_CommandArgType("SelectedEntry", 0, ())
nat_CommandArgType.OneEntry = nat_CommandArgType("OneEntry", 6, ())
nat_CommandArgType.TagsFromAll = nat_CommandArgType("TagsFromAll", 8, ())
nat_CommandArgType.TagsFromSelected = nat_CommandArgType("TagsFromSelected", 9, ())
nat_CommandArgType.Position = nat_CommandArgType("Position", 10, ())
nat_CommandArgType._hx_class = nat_CommandArgType
_hx_classes["nat.CommandArgType"] = nat_CommandArgType


class nat_ArchiveController:
    _hx_class_name = "nat.ArchiveController"
    _hx_is_interface = "False"
    __slots__ = ("playgroundSystem", "_selectedEntries", "lastChangeSet", "commands", "nameSystem", "archive", "ui")
    _hx_fields = ["playgroundSystem", "_selectedEntries", "lastChangeSet", "commands", "nameSystem", "archive", "ui"]
    _hx_methods = ["_collectAndValidateArg", "allTags", "allSelectedTags", "chooseFromTags", "_composeArgCollector", "tryRunCommand", "tryRunCommands", "_runCommand", "isSelected", "getSelectedEntries", "typeCommand", "Help", "selectionCommand", "addSelectionCommand", "deSelectionCommand", "toggleSelectionCommand", "SelectEntry", "AddSelectEntry", "DeSelectEntry", "ToggleSelectEntry", "SelectEntries", "AddSelectEntries", "DeSelectEntries", "ToggleSelectEntries", "SelectAllEntries", "AddSelectAllEntries", "DeSelectAllEntries", "ToggleSelectAllEntries", "SelectById", "AddSelectById", "DeSelectById", "ToggleSelectById", "SelectLastChangeSet", "AddSelectLastChangeSet", "DeSelectLastChangeSet", "ToggleSelectLastChangeSet", "SelectByTags", "AddSelectByTags", "DeSelectByTags", "ToggleSelectByTags", "SelectByComponents", "AddSelectByComponents", "DeSelectByComponents", "ToggleSelectByComponents", "SelectByName", "AddSelectByName", "DeSelectByName", "ToggleSelectByName", "Rename", "PrintSelectedEntries", "PrintComponent", "RemoveComponent", "CreateEntry", "CreateEntries", "CreateTaggedEntry", "CreateTaggedEntries", "CreateCircleEntry", "AddTags", "RemoveTags", "AddRectangle", "CreateRectangleEntry", "AddDLURL", "AddYoutubeMusic", "AddKeyShortcut", "AddNATCommand", "AddNATCommands", "CreateShortcutEntry", "CreateMultiCommandShortcut", "AddFiles", "adjustImagePins", "PinNextImage", "PinPreviousImage", "SetScale", "CreatePlayground", "SwitchPlayground", "ChoosePlayground", "AddConnections", "RemoveConnections", "AddColorFRGBA", "AddColorIRGBA", "VibeCheck"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry", "readString", "readNumber", "commandNames"]

    def __init__(self,archive,ui):
        self.ui = None
        self.archive = None
        self.nameSystem = None
        self.commands = None
        self.lastChangeSet = None
        self._selectedEntries = None
        self.playgroundSystem = None
        _gthis = self
        self._selectedEntries = []
        self.lastChangeSet = []
        self.commands = haxe_ds_StringMap()
        self.nameSystem = nat_systems_NameSystem()
        self.archive = archive
        self.ui = ui
        ui.controller = self
        archive.addAndProcessSystem(self.nameSystem,ui)
        archive.addSystem(nat_systems_RemarkableAPISystem())
        archive.addSystem(nat_systems_WikipediaImageSystem())
        archive.addSystem(nat_systems_ImageAttachmentSystem())
        archive.addAndProcessSystem(nat_systems_KeyShortcutSystem(self),ui)
        archive.addSystem(nat_systems_DLSystem())
        archive.addSystem(nat_systems_AutoStepperSystem())
        def _hx_local_0(c1,c2):
            _2oZsiybntiqrTPviXrTLBr = kiss_Prelude.areEqual(c1.r,c2.r)
            if kiss_Prelude.truthy(_2oZsiybntiqrTPviXrTLBr):
                _uZDbQGtBYqt6C9Xz9LLmFn = kiss_Prelude.areEqual(c1.g,c2.g)
                if kiss_Prelude.truthy(_uZDbQGtBYqt6C9Xz9LLmFn):
                    _ePFCkBHAiCi7vRkqB7Njts = kiss_Prelude.areEqual(c1.b,c2.b)
                    if kiss_Prelude.truthy(_ePFCkBHAiCi7vRkqB7Njts):
                        _jpMQHJKHqAVAuPHC3jn9uB = kiss_Prelude.areEqual(c1.a,c2.a)
                        return _jpMQHJKHqAVAuPHC3jn9uB
                    else:
                        return _ePFCkBHAiCi7vRkqB7Njts
                else:
                    return _uZDbQGtBYqt6C9Xz9LLmFn
            else:
                return _2oZsiybntiqrTPviXrTLBr
        colorEqual = _hx_local_0
        def _hx_local_2(cs,c1):
            _g = 0
            while (_g < len(cs)):
                c2 = (cs[_g] if _g >= 0 and _g < len(cs) else None)
                _g = (_g + 1)
                if kiss_Prelude.truthy(colorEqual(c2,c1)):
                    return True
            return False
        colorsContain = _hx_local_2
        def _hx_local_5(info):
            _g = []
            elem = info.iterator()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            colors = _g
            _hx_map = info
            _g_map = _hx_map
            _g_keys = _hx_map.keys()
            while _g_keys.hasNext():
                key = _g_keys.next()
                _g_value = _g_map.get(key)
                _g_key = key
                tagExp = _g_key
                color = [_g_value]
                def _hx_local_4(color):
                    def _hx_local_3(archive,e,ui = None):
                        addColorTagSystems = kiss_Prelude.truthy
                        _834o7gxidHE44HRqjTjUTy = (not kiss_Prelude.truthy(("ColorI" in e.components.h)))
                        addColorTagSystems1 = None
                        if kiss_Prelude.truthy(_834o7gxidHE44HRqjTjUTy):
                            addColorTagSystems1 = _834o7gxidHE44HRqjTjUTy
                        else:
                            colorsContain1 = colorsContain
                            colors1 = colors
                            componentData = e.components.h.get("ColorI",None)
                            _rj3jBdcWon86rzLo1oxdZd = colorsContain1(colors1,tink_json_Parser6().parse(componentData))
                            addColorTagSystems1 = _rj3jBdcWon86rzLo1oxdZd
                        if addColorTagSystems(addColorTagSystems1):
                            return _gthis.AddColorIRGBA([e],(color[0] if 0 < len(color) else None).r,(color[0] if 0 < len(color) else None).g,(color[0] if 0 < len(color) else None).b,(color[0] if 0 < len(color) else None).a)
                        else:
                            return None
                    return _hx_local_3
                archive.addSystem(nat_systems_TagSystem(kiss_Prelude.add("ColorTagSystem{",Std.string(tagExp),"}"),tagExp,_hx_local_4(color)))
            return None
        addColorTagSystems = _hx_local_5
        addColorTagSystems1 = addColorTagSystems
        _g = haxe_ds_StringMap()
        _g.h["(or active enabled)"] = _hx_AnonObject({'r': 0, 'g': 255, 'b': 0, 'a': 255})
        _g.h["(or inactive disabled)"] = _hx_AnonObject({'r': 128, 'g': 128, 'b': 128, 'a': 255})
        _g.h["todo"] = _hx_AnonObject({'r': 255, 'g': 128, 'b': 0, 'a': 255})
        addColorTagSystems1(_g)
        _g4FJ6wAJgjkS71cekHqqq2 = ui.playgroundSystem()
        if kiss_Prelude.truthy(_g4FJ6wAJgjkS71cekHqqq2):
            _hZpT2MszjvDpuhwyCxZfvv = _g4FJ6wAJgjkS71cekHqqq2
            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_hZpT2MszjvDpuhwyCxZfvv))):
                ps = _g4FJ6wAJgjkS71cekHqqq2
                self.playgroundSystem = ps
                ps.setupProcess = True
                archive.addAndProcessSystem(ps)
                ps.switchPlaygroundKey(Reflect.field(archive.playgrounds,"default"))
        _this = nat_ArchiveController.commandNames
        _this.append("Help")
        v = _hx_AnonObject({'args': [], 'handler': self.Help})
        self.commands.h["help"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.OneEntry})], 'handler': self.SelectEntry})
        self.commands.h["selectentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.OneEntry})], 'handler': self.AddSelectEntry})
        self.commands.h["addselectentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.OneEntry})], 'handler': self.DeSelectEntry})
        self.commands.h["deselectentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.OneEntry})], 'handler': self.ToggleSelectEntry})
        self.commands.h["toggleselectentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.Entries(None,None)})], 'handler': self.SelectEntries})
        self.commands.h["selectentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.Entries(None,None)})], 'handler': self.AddSelectEntries})
        self.commands.h["addselectentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.Entries(None,None)})], 'handler': self.DeSelectEntries})
        self.commands.h["deselectentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.Entries(None,None)})], 'handler': self.ToggleSelectEntries})
        self.commands.h["toggleselectentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectAllEntries")
        v = _hx_AnonObject({'args': [], 'handler': self.SelectAllEntries})
        self.commands.h["selectallentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectAllEntries")
        v = _hx_AnonObject({'args': [], 'handler': self.AddSelectAllEntries})
        self.commands.h["addselectallentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectAllEntries")
        v = _hx_AnonObject({'args': [], 'handler': self.DeSelectAllEntries})
        self.commands.h["deselectallentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectAllEntries")
        v = _hx_AnonObject({'args': [], 'handler': self.ToggleSelectAllEntries})
        self.commands.h["toggleselectallentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectById")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "id", 'type': nat_CommandArgType.Text(None)})], 'handler': self.SelectById})
        self.commands.h["selectbyid"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectById")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "id", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddSelectById})
        self.commands.h["addselectbyid"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectById")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "id", 'type': nat_CommandArgType.Text(None)})], 'handler': self.DeSelectById})
        self.commands.h["deselectbyid"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectById")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "id", 'type': nat_CommandArgType.Text(None)})], 'handler': self.ToggleSelectById})
        self.commands.h["toggleselectbyid"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectLastChangeSet")
        v = _hx_AnonObject({'args': [], 'handler': self.SelectLastChangeSet})
        self.commands.h["selectlastchangeset"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectLastChangeSet")
        v = _hx_AnonObject({'args': [], 'handler': self.AddSelectLastChangeSet})
        self.commands.h["addselectlastchangeset"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectLastChangeSet")
        v = _hx_AnonObject({'args': [], 'handler': self.DeSelectLastChangeSet})
        self.commands.h["deselectlastchangeset"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectLastChangeSet")
        v = _hx_AnonObject({'args': [], 'handler': self.ToggleSelectLastChangeSet})
        self.commands.h["toggleselectlastchangeset"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectByTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tagsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.SelectByTags})
        self.commands.h["selectbytags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectByTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tagsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddSelectByTags})
        self.commands.h["addselectbytags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectByTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tagsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.DeSelectByTags})
        self.commands.h["deselectbytags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectByTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tagsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.ToggleSelectByTags})
        self.commands.h["toggleselectbytags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectByComponents")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "componentsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.SelectByComponents})
        self.commands.h["selectbycomponents"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectByComponents")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "componentsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddSelectByComponents})
        self.commands.h["addselectbycomponents"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectByComponents")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "componentsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.DeSelectByComponents})
        self.commands.h["deselectbycomponents"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectByComponents")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "componentsBoolExp", 'type': nat_CommandArgType.Text(None)})], 'handler': self.ToggleSelectByComponents})
        self.commands.h["toggleselectbycomponents"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SelectByName")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.SelectByName})
        self.commands.h["selectbyname"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddSelectByName")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddSelectByName})
        self.commands.h["addselectbyname"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("DeSelectByName")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.DeSelectByName})
        self.commands.h["deselectbyname"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ToggleSelectByName")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.ToggleSelectByName})
        self.commands.h["toggleselectbyname"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("Rename")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.SelectedEntry}), _hx_AnonObject({'name': "newName", 'type': nat_CommandArgType.Text(None)})], 'handler': self.Rename})
        self.commands.h["rename"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("PrintSelectedEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)})], 'handler': self.PrintSelectedEntries})
        self.commands.h["printselectedentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("PrintComponent")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "componentType", 'type': nat_CommandArgType.Text(None)})], 'handler': self.PrintComponent})
        self.commands.h["printcomponent"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("RemoveComponent")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "componentType", 'type': nat_CommandArgType.Text(None)})], 'handler': self.RemoveComponent})
        self.commands.h["removecomponent"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.CreateEntry})
        self.commands.h["createentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "names", 'type': nat_CommandArgType.VarText(None)})], 'handler': self.CreateEntries})
        self.commands.h["createentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateTaggedEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tags", 'type': nat_CommandArgType.TagsFromAll}), _hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.CreateTaggedEntry})
        self.commands.h["createtaggedentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateTaggedEntries")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tags", 'type': nat_CommandArgType.TagsFromAll}), _hx_AnonObject({'name': "names", 'type': nat_CommandArgType.VarText(None)})], 'handler': self.CreateTaggedEntries})
        self.commands.h["createtaggedentries"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateCircleEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "tags", 'type': nat_CommandArgType.VarText(None)}), _hx_AnonObject({'name': "radius", 'type': nat_CommandArgType.Number(0,None,None)})], 'handler': self.CreateCircleEntry})
        self.commands.h["createcircleentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "tagsToAdd", 'type': nat_CommandArgType.TagsFromAll})], 'handler': self.AddTags})
        self.commands.h["addtags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("RemoveTags")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "tagsToRemove", 'type': nat_CommandArgType.TagsFromSelected})], 'handler': self.RemoveTags})
        self.commands.h["removetags"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddRectangle")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "width", 'type': nat_CommandArgType.Number(0,None,None)}), _hx_AnonObject({'name': "height", 'type': nat_CommandArgType.Number(0,None,None)})], 'handler': self.AddRectangle})
        self.commands.h["addrectangle"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateRectangleEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "p1", 'type': nat_CommandArgType.Position}), _hx_AnonObject({'name': "p2", 'type': nat_CommandArgType.Position})], 'handler': self.CreateRectangleEntry})
        self.commands.h["createrectangleentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddDLURL")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.SelectedEntry}), _hx_AnonObject({'name': "url", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddDLURL})
        self.commands.h["adddlurl"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddYoutubeMusic")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)}), _hx_AnonObject({'name': "url", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddYoutubeMusic})
        self.commands.h["addyoutubemusic"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddKeyShortcut")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.SelectedEntry}), _hx_AnonObject({'name': "description", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddKeyShortcut})
        self.commands.h["addkeyshortcut"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddNATCommand")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.SelectedEntries(None,None)}), _hx_AnonObject({'name': "command", 'type': nat_CommandArgType.Text(None)})], 'handler': self.AddNATCommand})
        self.commands.h["addnatcommand"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddNATCommands")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "e", 'type': nat_CommandArgType.SelectedEntries(None,None)}), _hx_AnonObject({'name': "commands", 'type': nat_CommandArgType.VarText(None)})], 'handler': self.AddNATCommands})
        self.commands.h["addnatcommands"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateShortcutEntry")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "description", 'type': nat_CommandArgType.Text(None)}), _hx_AnonObject({'name': "command", 'type': nat_CommandArgType.Text(None)})], 'handler': self.CreateShortcutEntry})
        self.commands.h["createshortcutentry"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreateMultiCommandShortcut")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "description", 'type': nat_CommandArgType.Text(None)}), _hx_AnonObject({'name': "commands", 'type': nat_CommandArgType.VarText(None)})], 'handler': self.CreateMultiCommandShortcut})
        self.commands.h["createmulticommandshortcut"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddFiles")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "files", 'type': nat_CommandArgType.VarText(None)})], 'handler': self.AddFiles})
        self.commands.h["addfiles"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("PinNextImage")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)})], 'handler': self.PinNextImage})
        self.commands.h["pinnextimage"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("PinPreviousImage")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)})], 'handler': self.PinPreviousImage})
        self.commands.h["pinpreviousimage"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SetScale")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "scale", 'type': nat_CommandArgType.Number(0,None,None)})], 'handler': self.SetScale})
        self.commands.h["setscale"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("CreatePlayground")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)}), _hx_AnonObject({'name': "catsMatchExp", 'type': nat_CommandArgType.Text(None)}), _hx_AnonObject({'name': "defaultTags", 'type': nat_CommandArgType.TagsFromAll})], 'handler': self.CreatePlayground})
        self.commands.h["createplayground"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("SwitchPlayground")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "name", 'type': nat_CommandArgType.Text(None)})], 'handler': self.SwitchPlayground})
        self.commands.h["switchplayground"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("ChoosePlayground")
        v = _hx_AnonObject({'args': [], 'handler': self.ChoosePlayground})
        self.commands.h["chooseplayground"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddConnections")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "entriesToConnect", 'type': nat_CommandArgType.Entries(1,None)})], 'handler': self.AddConnections})
        self.commands.h["addconnections"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("RemoveConnections")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "entriesToRemove", 'type': nat_CommandArgType.Entries(1,None)})], 'handler': self.RemoveConnections})
        self.commands.h["removeconnections"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddColorFRGBA")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "r", 'type': nat_CommandArgType.Number(0,1,None)}), _hx_AnonObject({'name': "g", 'type': nat_CommandArgType.Number(0,1,None)}), _hx_AnonObject({'name': "b", 'type': nat_CommandArgType.Number(0,1,None)}), _hx_AnonObject({'name': "a", 'type': nat_CommandArgType.Number(0,1,None)})], 'handler': self.AddColorFRGBA})
        self.commands.h["addcolorfrgba"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("AddColorIRGBA")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "entries", 'type': nat_CommandArgType.SelectedEntries(1,None)}), _hx_AnonObject({'name': "r", 'type': nat_CommandArgType.Number(0,255,1)}), _hx_AnonObject({'name': "g", 'type': nat_CommandArgType.Number(0,255,1)}), _hx_AnonObject({'name': "b", 'type': nat_CommandArgType.Number(0,255,1)}), _hx_AnonObject({'name': "a", 'type': nat_CommandArgType.Number(0,255,1)})], 'handler': self.AddColorIRGBA})
        self.commands.h["addcolorirgba"] = v
        _this = nat_ArchiveController.commandNames
        _this.append("VibeCheck")
        v = _hx_AnonObject({'args': [_hx_AnonObject({'name': "accounts", 'type': nat_CommandArgType.Numbers(None,None,None)}), _hx_AnonObject({'name': "monthlyExpenses", 'type': nat_CommandArgType.Numbers(None,None,None)}), _hx_AnonObject({'name': "energy", 'type': nat_CommandArgType.Number(1,10,1)}), _hx_AnonObject({'name': "hope", 'type': nat_CommandArgType.Number(1,10,1)}), _hx_AnonObject({'name': "note", 'type': nat_CommandArgType.Text(None)})], 'handler': self.VibeCheck})
        self.commands.h["vibecheck"] = v

    def _collectAndValidateArg(self,arg,stream,continuation):
        _gthis = self
        _g = arg.type
        _vwk4yB3mmPy7rBhFuPhoDP = _g
        if kiss_Prelude.truthy(kiss_Prelude.isNull(_vwk4yB3mmPy7rBhFuPhoDP)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("case should never match pattern null","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:152:9: Assertion failed: \nFrom:[(never null)]",4))
        else:
            tmp = _g.index
            if (tmp == 0):
                if kiss_Prelude.truthy(kiss_Prelude.areEqual(1,len(self._selectedEntries))):
                    continuation(python_internal_ArrayImpl._get(self.getSelectedEntries(), 0))
                else:
                    self.ui.reportError(kiss_Prelude.add("The requested command expects 1 entry to be selected. You have selected: ",Std.string(len(self._selectedEntries)),""))
            elif (tmp == 1):
                _hx_min = _g.params[0]
                _hx_max = _g.params[1]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(_hx_min))):
                    _hx_min = 0
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(_hx_max))):
                    _hx_max = Lambda.count(self.archive.entries)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.lesserEqual(_hx_min,len(self._selectedEntries),_hx_max)))):
                    self.ui.reportError(kiss_Prelude.add("The requested command expects between ",Std.string(_hx_min)," and ",Std.string(_hx_max)," entries to be selected. You have selected: ",Std.string(len(self._selectedEntries)),""))
                else:
                    continuation(self.getSelectedEntries())
            elif (tmp == 2):
                maxLength = _g.params[0]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(maxLength))):
                    maxLength = Math.POSITIVE_INFINITY
                stream.dropWhitespace()
                def _hx_local_0(text):
                    stream.dropWhitespace()
                    if kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.lesserEqual(HxOverrides.length(text),maxLength)))):
                        _gthis.ui.reportError(kiss_Prelude.add("The requested command expected a string up to ",Std.string(maxLength)," characters long. You entered: ",Std.string(HxOverrides.length(text))," characters"))
                    else:
                        continuation(text)
                trySubmit = _hx_local_0
                tmp = kiss_Prelude.truthy
                _qxqKgMuV2EFQYEzQdzPKYc = stream.isEmpty()
                tmp1 = None
                if kiss_Prelude.truthy(_qxqKgMuV2EFQYEzQdzPKYc):
                    tmp1 = _qxqKgMuV2EFQYEzQdzPKYc
                else:
                    _mmRDVxez7LSiLHnYKRed61 = stream.dropStringIf("_")
                    tmp1 = _mmRDVxez7LSiLHnYKRed61
                if tmp(tmp1):
                    self.ui.enterText(kiss_Prelude.add("",Std.string(arg.name)," (up to ",Std.string(maxLength)," characters):"),trySubmit,maxLength)
                else:
                    trySubmit(nat_ArchiveController.readString(stream))
            elif (tmp == 3):
                maxLength1 = _g.params[0]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(maxLength1))):
                    maxLength1 = Math.POSITIVE_INFINITY
                stream.dropWhitespace()
                collectedText = []
                enterTextAgain = None
                def _hx_local_2():
                    def _hx_local_1(text):
                        stream.dropWhitespace()
                        if kiss_Prelude.truthy((not kiss_Prelude.truthy(text))):
                            continuation(collectedText)
                        elif kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.lesserEqual(HxOverrides.length(text),maxLength1)))):
                            _gthis.ui.reportError(kiss_Prelude.add("The requested command expected a list of strings up to ",Std.string(maxLength1)," characters long. You entered: ",Std.string(HxOverrides.length(text))," characters"))
                        else:
                            collectedText.append(text)
                            enterTextAgain()
                    trySubmit = _hx_local_1
                    enterTextAgain1 = kiss_Prelude.truthy
                    _mvyz1yQ9GZE8PhkS1E39iX = stream.isEmpty()
                    enterTextAgain2 = None
                    if kiss_Prelude.truthy(_mvyz1yQ9GZE8PhkS1E39iX):
                        enterTextAgain2 = _mvyz1yQ9GZE8PhkS1E39iX
                    else:
                        _3cdr1sgMHRpGsSqHwWVSZQ = stream.dropStringIf("_")
                        enterTextAgain2 = _3cdr1sgMHRpGsSqHwWVSZQ
                    if enterTextAgain1(enterTextAgain2):
                        _gthis.ui.enterText(kiss_Prelude.add("",Std.string(arg.name)," (up to ",Std.string(maxLength1)," characters):"),trySubmit,maxLength1)
                    else:
                        trySubmit(nat_ArchiveController.readString(stream))
                enterTextAgain = _hx_local_2
                enterTextAgain()
            elif (tmp == 4):
                _hx_min = _g.params[0]
                _hx_max = _g.params[1]
                inStepsOf = _g.params[2]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(_hx_min))):
                    _hx_min = Math.NEGATIVE_INFINITY
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(_hx_max))):
                    _hx_max = Math.POSITIVE_INFINITY
                stream.dropWhitespace()
                prompt = kiss_Prelude.add("",Std.string(arg.name)," (",Std.string(_hx_min),"-",Std.string(_hx_max),"")
                if kiss_Prelude.truthy(inStepsOf):
                    prompt = kiss_Prelude.add(prompt,kiss_Prelude.add(" in steps of ",Std.string(inStepsOf),""))
                prompt = kiss_Prelude.add(prompt,"):")
                def _hx_local_3(number):
                    stream.dropWhitespace()
                    minMaxError = kiss_Prelude.add("The requested command expected a number between ",Std.string(_hx_min)," and ",Std.string(_hx_max),"")
                    stepError = kiss_Prelude.add("",Std.string(minMaxError)," in steps of ",Std.string(inStepsOf),"")
                    youEntered = kiss_Prelude.add(". You entered: ",Std.string(number),"")
                    trySubmit = kiss_Prelude.truthy
                    _sPVZhJnufnG7dv52HfpXH1 = (not kiss_Prelude.truthy(kiss_Prelude.lesserEqual(_hx_min,number,_hx_max)))
                    trySubmit1 = None
                    if kiss_Prelude.truthy(_sPVZhJnufnG7dv52HfpXH1):
                        trySubmit1 = _sPVZhJnufnG7dv52HfpXH1
                    else:
                        _x9TcDwp3z3YGmnUx5x79tp = inStepsOf
                        _6QEcb4H1f9cte8r9U1YrCx = None
                        if kiss_Prelude.truthy(_x9TcDwp3z3YGmnUx5x79tp):
                            _9rYVGL4sgPY5sYHerPg9sX = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(0,kiss_Prelude.mod(kiss_Prelude.subtract(number,_hx_min),inStepsOf))))
                            _6QEcb4H1f9cte8r9U1YrCx = _9rYVGL4sgPY5sYHerPg9sX
                        else:
                            _6QEcb4H1f9cte8r9U1YrCx = _x9TcDwp3z3YGmnUx5x79tp
                        trySubmit1 = _6QEcb4H1f9cte8r9U1YrCx
                    if trySubmit(trySubmit1):
                        if kiss_Prelude.truthy(inStepsOf):
                            _gthis.ui.reportError(kiss_Prelude.add("",Std.string(stepError),"",Std.string(youEntered),""))
                        else:
                            _gthis.ui.reportError(kiss_Prelude.add("",Std.string(minMaxError),"",Std.string(youEntered),""))
                    else:
                        continuation(number)
                trySubmit1 = _hx_local_3
                tmp = kiss_Prelude.truthy
                _9imyn52hnvPK4aVLLurS55 = stream.isEmpty()
                tmp1 = None
                if kiss_Prelude.truthy(_9imyn52hnvPK4aVLLurS55):
                    tmp1 = _9imyn52hnvPK4aVLLurS55
                else:
                    _gcxcBThEnmTJGo6ss43hg2 = stream.dropStringIf("_")
                    tmp1 = _gcxcBThEnmTJGo6ss43hg2
                if tmp(tmp1):
                    self.ui.enterNumber(prompt,trySubmit1,_hx_min,_hx_max,inStepsOf)
                else:
                    trySubmit1(nat_ArchiveController.readNumber(stream))
            elif (tmp == 5):
                min1 = _g.params[0]
                max1 = _g.params[1]
                inStepsOf1 = _g.params[2]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(min1))):
                    min1 = Math.NEGATIVE_INFINITY
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(max1))):
                    max1 = Math.POSITIVE_INFINITY
                stream.dropWhitespace()
                prompt = kiss_Prelude.add("",Std.string(arg.name)," (",Std.string(min1),"-",Std.string(max1),"")
                collectedNumbers = []
                if kiss_Prelude.truthy(inStepsOf1):
                    prompt = kiss_Prelude.add(prompt,kiss_Prelude.add(" in steps of ",Std.string(inStepsOf1),""))
                prompt = kiss_Prelude.add(prompt,"):")
                enterNumAgain = None
                def _hx_local_5():
                    def _hx_local_4(number):
                        stream.dropWhitespace()
                        minMaxError = kiss_Prelude.add("The requested command expected numbers between ",Std.string(min1)," and ",Std.string(max1),"")
                        stepError = kiss_Prelude.add("",Std.string(minMaxError)," in steps of ",Std.string(inStepsOf1),"")
                        youEntered = kiss_Prelude.add(". You entered: ",Std.string(number),"")
                        if kiss_Prelude.truthy(python_lib_Math.isnan(number)):
                            continuation(collectedNumbers)
                        else:
                            trySubmit = kiss_Prelude.truthy
                            _p53YQRx8gQCFUBeKSLEKd3 = (not kiss_Prelude.truthy(kiss_Prelude.lesserEqual(min1,number,max1)))
                            trySubmit1 = None
                            if kiss_Prelude.truthy(_p53YQRx8gQCFUBeKSLEKd3):
                                trySubmit1 = _p53YQRx8gQCFUBeKSLEKd3
                            else:
                                _qvfgnFDpGMy55jhpvgREmW = inStepsOf1
                                _7rBbFEy3TaSF9VS1oDZG1z = None
                                if kiss_Prelude.truthy(_qvfgnFDpGMy55jhpvgREmW):
                                    _3gVjcKbBtGRkbtkKf8cwAu = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(0,kiss_Prelude.mod(kiss_Prelude.subtract(number,min1),inStepsOf1))))
                                    _7rBbFEy3TaSF9VS1oDZG1z = _3gVjcKbBtGRkbtkKf8cwAu
                                else:
                                    _7rBbFEy3TaSF9VS1oDZG1z = _qvfgnFDpGMy55jhpvgREmW
                                trySubmit1 = _7rBbFEy3TaSF9VS1oDZG1z
                            if trySubmit(trySubmit1):
                                if kiss_Prelude.truthy(inStepsOf1):
                                    _gthis.ui.reportError(kiss_Prelude.add("",Std.string(stepError),"",Std.string(youEntered),""))
                                else:
                                    _gthis.ui.reportError(kiss_Prelude.add("",Std.string(minMaxError),"",Std.string(youEntered),""))
                            else:
                                collectedNumbers.append(number)
                                enterNumAgain()
                    trySubmit = _hx_local_4
                    enterNumAgain1 = kiss_Prelude.truthy
                    _uKd8Z8hWYj6PUz47pWm62U = stream.isEmpty()
                    enterNumAgain2 = None
                    if kiss_Prelude.truthy(_uKd8Z8hWYj6PUz47pWm62U):
                        enterNumAgain2 = _uKd8Z8hWYj6PUz47pWm62U
                    else:
                        _sfazDhtexQTK9JpucGiJHV = stream.dropStringIf("_")
                        enterNumAgain2 = _sfazDhtexQTK9JpucGiJHV
                    if enterNumAgain1(enterNumAgain2):
                        _gthis.ui.enterNumber(prompt,trySubmit,min1,max1,inStepsOf1,True)
                    else:
                        trySubmit(nat_ArchiveController.readNumber(stream))
                enterNumAgain = _hx_local_5
                enterNumAgain()
            elif (tmp == 6):
                self.ui.chooseEntry(kiss_Prelude.add("",Std.string(arg.name),":"),self.archive,continuation)
            elif (tmp == 7):
                min2 = _g.params[0]
                max2 = _g.params[1]
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(min2))):
                    min2 = 1
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(max2))):
                    max2 = Lambda.count(self.archive.entries)
                def _hx_local_6(entries):
                    tmp = kiss_Prelude.truthy
                    _7yGsqZP2PCet4zDDJc1tuq = kiss_Prelude.greaterThan(min2,len(entries))
                    tmp1 = None
                    if kiss_Prelude.truthy(_7yGsqZP2PCet4zDDJc1tuq):
                        tmp1 = _7yGsqZP2PCet4zDDJc1tuq
                    else:
                        _69WenWFFzE53MPzmVUu6b4 = kiss_Prelude.lessThan(max2,len(entries))
                        tmp1 = _69WenWFFzE53MPzmVUu6b4
                    if tmp(tmp1):
                        _gthis.ui.reportError(kiss_Prelude.add("The requested command expects between ",Std.string(min2)," and ",Std.string(max2)," entries. You chose: ",Std.string(len(entries)),""))
                    else:
                        continuation(entries)
                self.ui.chooseEntries(kiss_Prelude.add("",Std.string(arg.name),":"),self.archive,_hx_local_6,min2,max2)
            elif ((tmp == 9) or ((tmp == 8))):
                self.chooseFromTags(arg.type,continuation)
            elif (tmp == 10):
                self.ui.choosePosition(kiss_Prelude.add("",Std.string(arg.name),":"),continuation)
            else:
                pass

    def allTags(self,entries = None):
        _8wvNDccnkz3ERM5FHxZBk9 = entries
        entries = None
        if kiss_Prelude.truthy(_8wvNDccnkz3ERM5FHxZBk9):
            entries = _8wvNDccnkz3ERM5FHxZBk9
        else:
            _g = []
            elem = self.archive.entries.iterator()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            _hYB2GMSMPC7kbPk58rNhcc = _g
            entries = _hYB2GMSMPC7kbPk58rNhcc
        tags = haxe_ds_StringMap()
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy(("Tags" in e.components.h)):
                componentData = e.components.h.get("Tags",None)
                _hx_map = tink_json_Parser1().parse(componentData)
                _g_map = _hx_map
                _g_keys = _hx_map.keys()
                while _g_keys.hasNext():
                    key = _g_keys.next()
                    _g_value = _g_map.get(key)
                    _g_key = key
                    tag = _g_key
                    _ = _g_value
                    tags.h[tag] = 1
        _g = []
        elem = tags.keys()
        while elem.hasNext():
            elem1 = elem.next()
            _g.append(elem1)
        return kiss_Prelude.sort(_g)

    def allSelectedTags(self):
        return self.allTags(self._selectedEntries)

    def chooseFromTags(self,_hx_type,cc,tagsToChooseFrom = None,tagsChosen = None):
        _gthis = self
        _s7jM3CnuESSfWCgXRBWZAf = tagsToChooseFrom
        tagsToChooseFrom = None
        if kiss_Prelude.truthy(_s7jM3CnuESSfWCgXRBWZAf):
            tagsToChooseFrom = _s7jM3CnuESSfWCgXRBWZAf
        else:
            _37kUdS71f5eJ9GVK3PpYsc = kiss_Prelude.concat
            _37kUdS71f5eJ9GVK3PpYsc1 = ["CONFIRM"]
            _6q3oZgC4snJkpeQkJzKsGF = _hx_type
            _37kUdS71f5eJ9GVK3PpYsc2 = None
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_6q3oZgC4snJkpeQkJzKsGF)):
                raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("case should never match pattern otherwise","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:173:29: Assertion failed: \nFrom:[(never otherwise)]",4))
            else:
                _37kUdS71f5eJ9GVK3PpYsc3 = _hx_type.index
                if (_37kUdS71f5eJ9GVK3PpYsc3 == 8):
                    _37kUdS71f5eJ9GVK3PpYsc2 = kiss_Prelude.concat(["DEFINE NEW TAG"],self.allTags())
                elif (_37kUdS71f5eJ9GVK3PpYsc3 == 9):
                    _37kUdS71f5eJ9GVK3PpYsc2 = self.allSelectedTags()
                else:
                    raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("case should never match pattern otherwise","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:173:29: Assertion failed: \nFrom:[(never otherwise)]",4))
            _37kUdS71f5eJ9GVK3PpYsc3 = _37kUdS71f5eJ9GVK3PpYsc(_37kUdS71f5eJ9GVK3PpYsc1,_37kUdS71f5eJ9GVK3PpYsc2)
            tagsToChooseFrom = _37kUdS71f5eJ9GVK3PpYsc3
        _uiSH9vG54KtQp3Ums34TKW = tagsChosen
        tagsChosen = None
        if kiss_Prelude.truthy(_uiSH9vG54KtQp3Ums34TKW):
            tagsChosen = _uiSH9vG54KtQp3Ums34TKW
        else:
            _uZKkTP17q3SCEQ6usRaRw3 = []
            tagsChosen = _uZKkTP17q3SCEQ6usRaRw3
        def _hx_local_2(choice):
            _uTg8RK7SPpnmB419KRcjAx = choice
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_uTg8RK7SPpnmB419KRcjAx)):
                raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("case should never match pattern null","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:189:17: Assertion failed: \nFrom:[(never null)]",4))
            else:
                choice1 = choice
                _hx_local_0 = len(choice1)
                if (_hx_local_0 == 7):
                    if (choice1 == "CONFIRM"):
                        cc(tagsChosen)
                    else:
                        other = choice
                        python_internal_ArrayImpl.remove(tagsToChooseFrom,other)
                        HxOverrides.push(tagsChosen, other)
                        _gthis.chooseFromTags(_hx_type,cc,tagsToChooseFrom,tagsChosen)
                elif (_hx_local_0 == 14):
                    if (choice1 == "DEFINE NEW TAG"):
                        def _hx_local_1(newTag):
                            HxOverrides.push(tagsChosen, newTag)
                            _gthis.chooseFromTags(_hx_type,cc,tagsToChooseFrom,tagsChosen)
                        _gthis.ui.enterText("New tag (must be legal as a haxe var name):",_hx_local_1,Math.POSITIVE_INFINITY)
                    else:
                        other = choice
                        python_internal_ArrayImpl.remove(tagsToChooseFrom,other)
                        HxOverrides.push(tagsChosen, other)
                        _gthis.chooseFromTags(_hx_type,cc,tagsToChooseFrom,tagsChosen)
                else:
                    other = choice
                    python_internal_ArrayImpl.remove(tagsToChooseFrom,other)
                    HxOverrides.push(tagsChosen, other)
                    _gthis.chooseFromTags(_hx_type,cc,tagsToChooseFrom,tagsChosen)
        self.ui.chooseBetweenStrings("Tags:",tagsToChooseFrom,_hx_local_2)

    def _composeArgCollector(self,collectedArgs,arg,stream,lastCollector):
        _gthis = self
        def _hx_local_0():
            def _hx_local_1(argValue):
                collectedArgs.append(argValue)
                lastCollector()
            _gthis._collectAndValidateArg(arg,stream,_hx_local_1)
        return _hx_local_0

    def tryRunCommand(self,command,doAfter = None):
        parts = command.split(" ")
        commandName = (None if ((len(parts) == 0)) else parts.pop(0))
        stream = kiss_Stream.fromString(" ".join([python_Boot.toString1(x1,'') for x1 in parts]))
        lowerCommandName = commandName.lower()
        if kiss_Prelude.truthy((lowerCommandName in self.commands.h)):
            self._runCommand(self.commands.h.get(lowerCommandName,None),stream,doAfter)
        else:
            self.ui.reportError(kiss_Prelude.add("",Std.string(commandName)," is not a valid command"))

    def tryRunCommands(self,commands):
        _gthis = self
        if kiss_Prelude.truthy(commands):
            def _hx_local_0():
                _gthis.tryRunCommands(commands)
            self.tryRunCommand((None if ((len(commands) == 0)) else commands.pop(0)),_hx_local_0)

    def _runCommand(self,command,stream,doAfter = None):
        _gthis = self
        collectedArgs = []
        def _hx_local_2():
            result = Reflect.callMethod(None,command.handler,collectedArgs)
            _akLZcVxjKGJj4373Vm8rrN = (not kiss_Prelude.truthy(kiss_Prelude.isNull(result)))
            if (not kiss_Prelude.truthy(_akLZcVxjKGJj4373Vm8rrN)):
                raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("Command implementation forgot to return a ChangeSet","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:230:25: Assertion failed: \nFrom:[(assert (not (Prelude.isNull result)) \"Command implementation forgot to return a ChangeSet\")]",4))
            _gthis.lastChangeSet = result
            if kiss_Prelude.truthy(_gthis.lastChangeSet):
                _g = 0
                _g1 = _gthis.lastChangeSet
                while (_g < len(_g1)):
                    e = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    _8WbyTCHUMGb9GDAN2UdF77 = e
                    _sybt9naSt12jycRoiw1g14 = None
                    if kiss_Prelude.truthy(_8WbyTCHUMGb9GDAN2UdF77):
                        _emuUvqUp5Cyu8pakgH6qbw = nat_ArchiveController.isEntry(e)
                        _sybt9naSt12jycRoiw1g14 = _emuUvqUp5Cyu8pakgH6qbw
                    else:
                        _sybt9naSt12jycRoiw1g14 = _8WbyTCHUMGb9GDAN2UdF77
                    if (not kiss_Prelude.truthy(_sybt9naSt12jycRoiw1g14)):
                        raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("Lib function forgot to return the Entry that was modified","/home/nat/repos/kisslang/projects/nat-archive-tool/src/nat/ArchiveController.kiss:235:33: Assertion failed: \nFrom:[(assert (and e (isEntry e)) \"Lib function forgot to return the Entry that was modified\")]",4))
                _g = 0
                _g1 = _gthis.lastChangeSet
                while (_g < len(_g1)):
                    e = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    _gthis.archive.refreshEntry(e)
                _gthis.ui.handleChanges(_gthis.archive,_gthis.lastChangeSet)
                _gthis.archive.processSystems()
                if kiss_Prelude.truthy(doAfter):
                    doAfter()
        lastCollector = _hx_local_2
        _g = 0
        _g1 = kiss_Prelude.reverse(command.args)
        while (_g < len(_g1)):
            arg = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            lastCollector = self._composeArgCollector(collectedArgs,arg,stream,lastCollector)
        lastCollector()

    def isSelected(self,e):
        return (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(self._selectedEntries,e,None))))

    def getSelectedEntries(self):
        return list(self._selectedEntries)

    def typeCommand(self):
        _gthis = self
        if kiss_Prelude.truthy(self.ui.shortcutHandler):
            self.ui.shortcutHandler.cancel()
        def _hx_local_0(command):
            _gthis.tryRunCommand(command)
        self.ui.enterText("Command:",_hx_local_0,Math.POSITIVE_INFINITY)

    def Help(self):
        self.ui.displayMessage(kiss_Prelude.add("Available commands:\n","\n".join([python_Boot.toString1(x1,'') for x1 in nat_ArchiveController.commandNames])))
        return []

    def selectionCommand(self,entries):
        lastSelectedEntries = self._selectedEntries
        self._selectedEntries = entries
        self.ui.onSelectionChanged(entries,lastSelectedEntries)
        return []

    def addSelectionCommand(self,entries):
        lastSelectedEntries = list(self._selectedEntries)
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((e in self._selectedEntries)))):
                _this = self._selectedEntries
                _this.append(e)
        self.ui.onSelectionChanged(self._selectedEntries,lastSelectedEntries)
        return []

    def deSelectionCommand(self,entries):
        lastSelectedEntries = list(self._selectedEntries)
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(self._selectedEntries,e)
        self.ui.onSelectionChanged(self._selectedEntries,lastSelectedEntries)
        return []

    def toggleSelectionCommand(self,entries):
        lastSelectedEntries = list(self._selectedEntries)
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy(python_internal_ArrayImpl.remove(self._selectedEntries,e)))):
                _this = self._selectedEntries
                _this.append(e)
        self.ui.onSelectionChanged(self._selectedEntries,lastSelectedEntries)
        return []

    def SelectEntry(self,e):
        return self.selectionCommand([e])

    def AddSelectEntry(self,e):
        return self.addSelectionCommand([e])

    def DeSelectEntry(self,e):
        return self.deSelectionCommand([e])

    def ToggleSelectEntry(self,e):
        return self.toggleSelectionCommand([e])

    def SelectEntries(self,entries):
        return self.selectionCommand(entries)

    def AddSelectEntries(self,entries):
        return self.addSelectionCommand(entries)

    def DeSelectEntries(self,entries):
        return self.deSelectionCommand(entries)

    def ToggleSelectEntries(self,entries):
        return self.toggleSelectionCommand(entries)

    def SelectAllEntries(self):
        _g = []
        _hx_map = self.archive.entries
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            id = _g_key
            e = _g_value
            _g.append(e)
        return self.selectionCommand(_g)

    def AddSelectAllEntries(self):
        _g = []
        _hx_map = self.archive.entries
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            id = _g_key
            e = _g_value
            _g.append(e)
        return self.addSelectionCommand(_g)

    def DeSelectAllEntries(self):
        _g = []
        _hx_map = self.archive.entries
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            id = _g_key
            e = _g_value
            _g.append(e)
        return self.deSelectionCommand(_g)

    def ToggleSelectAllEntries(self):
        _g = []
        _hx_map = self.archive.entries
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            id = _g_key
            e = _g_value
            _g.append(e)
        return self.toggleSelectionCommand(_g)

    def SelectById(self,id):
        return self.selectionCommand(kiss_Prelude.filter([self.archive.entries.h.get(id,None)]))

    def AddSelectById(self,id):
        return self.addSelectionCommand(kiss_Prelude.filter([self.archive.entries.h.get(id,None)]))

    def DeSelectById(self,id):
        return self.deSelectionCommand(kiss_Prelude.filter([self.archive.entries.h.get(id,None)]))

    def ToggleSelectById(self,id):
        return self.toggleSelectionCommand(kiss_Prelude.filter([self.archive.entries.h.get(id,None)]))

    def SelectLastChangeSet(self):
        return self.selectionCommand(self.lastChangeSet)

    def AddSelectLastChangeSet(self):
        return self.addSelectionCommand(self.lastChangeSet)

    def DeSelectLastChangeSet(self):
        return self.deSelectionCommand(self.lastChangeSet)

    def ToggleSelectLastChangeSet(self):
        return self.toggleSelectionCommand(self.lastChangeSet)

    def SelectByTags(self,tagsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.tagsMatch(e,tagsBoolExp)
            return self.selectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def AddSelectByTags(self,tagsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.tagsMatch(e,tagsBoolExp)
            return self.addSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def DeSelectByTags(self,tagsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.tagsMatch(e,tagsBoolExp)
            return self.deSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def ToggleSelectByTags(self,tagsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.tagsMatch(e,tagsBoolExp)
            return self.toggleSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def SelectByComponents(self,componentsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.componentsMatch(e,componentsBoolExp)
            return self.selectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def AddSelectByComponents(self,componentsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.componentsMatch(e,componentsBoolExp)
            return self.addSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def DeSelectByComponents(self,componentsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.componentsMatch(e,componentsBoolExp)
            return self.deSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def ToggleSelectByComponents(self,componentsBoolExp):
        def _hx_local_1():
            def _hx_local_0(e):
                return nat_ArchiveController.componentsMatch(e,componentsBoolExp)
            return self.toggleSelectionCommand(kiss_Prelude.filter(self.archive.entries,_hx_local_0))
        return _hx_local_1()

    def SelectByName(self,name):
        return self.selectionCommand(self.nameSystem.getEntries(name))

    def AddSelectByName(self,name):
        return self.addSelectionCommand(self.nameSystem.getEntries(name))

    def DeSelectByName(self,name):
        return self.deSelectionCommand(self.nameSystem.getEntries(name))

    def ToggleSelectByName(self,name):
        return self.toggleSelectionCommand(self.nameSystem.getEntries(name))

    def Rename(self,e,newName):
        componentData = e.components.h.get("Name",None)
        name = tink_json_Parser2().parse(componentData)
        name = newName
        _pAgsVVybRBkQ3jKejF75Qc = name
        this1 = e.components
        v = tink_json_Writer0().write(name)
        this1.h["Name"] = v
        self.archive.refreshEntry(e)
        return [e]

    def PrintSelectedEntries(self,entries):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            self.ui.displayMessage(self.archive.fullString(e))
        return []

    def PrintComponent(self,entries,componentType):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy((componentType in e.components.h)):
                self.ui.displayMessage(e.components.h.get(componentType,None))
            else:
                self.ui.displayMessage(kiss_Prelude.add("Entry ",Std.string(e.id)," has no ",Std.string(componentType)," component"))
        return []

    def RemoveComponent(self,entries,componentType):
        _g = []
        _g1 = 0
        while (_g1 < len(entries)):
            e = (entries[_g1] if _g1 >= 0 and _g1 < len(entries) else None)
            _g1 = (_g1 + 1)
            e.components.remove(componentType)
            _2GzcftK5TvDvtz7GC5R3Hs = e
            self.archive.refreshEntry(e)
            _g.append(_2GzcftK5TvDvtz7GC5R3Hs)
        return _g

    def CreateEntry(self,name):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                archive = _gthis.archive
                e1 = e
                c = name
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Name"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer0().write(c)
                this1.h["Name"] = v
                _wQ6ykDUhxm9tk5ZRRKQhuv = e1
                archive.refreshEntry(e1)
                return _wQ6ykDUhxm9tk5ZRRKQhuv
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def CreateEntries(self,names):
        _g = []
        _g1 = 0
        while (_g1 < len(names)):
            name = (names[_g1] if _g1 >= 0 and _g1 < len(names) else None)
            _g1 = (_g1 + 1)
            x = self.CreateEntry(name)
            _g.append(x)
        _g1 = []
        e = HxOverrides.iterator(_g)
        while e.hasNext():
            e1 = e.next()
            x = HxOverrides.iterator(e1)
            while x.hasNext():
                x1 = x.next()
                _g1.append(x1)
        return _g1

    def CreateTaggedEntry(self,tags,name):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                archive = _gthis.archive
                e1 = e
                c = name
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Name"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer0().write(c)
                this1.h["Name"] = v
                _6myPAQpfDKmKgGrY5gbgz4 = e1
                archive.refreshEntry(e1)
                return nat_ArchiveController.addTags(_gthis.archive,e,tags)
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def CreateTaggedEntries(self,tags,names):
        _g = []
        _g1 = 0
        while (_g1 < len(names)):
            name = (names[_g1] if _g1 >= 0 and _g1 < len(names) else None)
            _g1 = (_g1 + 1)
            x = self.CreateTaggedEntry(tags,name)
            _g.append(x)
        _g1 = []
        e = HxOverrides.iterator(_g)
        while e.hasNext():
            e1 = e.next()
            x = HxOverrides.iterator(e1)
            while x.hasNext():
                x1 = x.next()
                _g1.append(x1)
        return _g1

    def CreateCircleEntry(self,tags,radius):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                nat_ArchiveController.addTags(_gthis.archive,e,tags)
                archive = _gthis.archive
                e1 = e
                c = _hx_AnonObject({'radius': radius})
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Circle"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer9().write(c)
                this1.h["Circle"] = v
                _ayzFUtfU1JJkoPkdaFZueA = e1
                archive.refreshEntry(e1)
                return _ayzFUtfU1JJkoPkdaFZueA
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def AddTags(self,entries,tagsToAdd):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            nat_ArchiveController.addTags(self.archive,e,tagsToAdd)
        return entries

    def RemoveTags(self,entries,tagsToRemove):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            nat_ArchiveController.removeTags(self.archive,e,tagsToRemove)
        return entries

    def AddRectangle(self,entries,width,height):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            archive = self.archive
            e1 = e
            c = _hx_AnonObject({'width': width, 'height': height})
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Rectangle"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_ArchiveController._log(msg)
            this1 = e1.components
            v = tink_json_Writer10().write(c)
            this1.h["Rectangle"] = v
            _hdPxFXfv6C7wJva3j4JEoe = e1
            archive.refreshEntry(e1)
        return entries

    def CreateRectangleEntry(self,p1,p2):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                x = kiss_Prelude.min(p1.x,p2.x)
                y = kiss_Prelude.min(p1.y,p2.y)
                w = kiss_Prelude.subtract(kiss_Prelude.max(p1.x,p2.x),x)
                h = kiss_Prelude.subtract(kiss_Prelude.max(p1.y,p2.y),y)
                archive = _gthis.archive
                e1 = e
                _g = haxe_ds_StringMap()
                key = archive.currentPlayground()
                _g.h[key] = _hx_AnonObject({'z': 0.0, 'x': x, 'y': y})
                c = _g
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Positions"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer8().write(c)
                this1.h["Positions"] = v
                _pQzHdiammjcwtbiWKobYps = e1
                archive.refreshEntry(e1)
                archive = _gthis.archive
                e1 = e
                c = _hx_AnonObject({'width': w, 'height': h})
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Rectangle"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer10().write(c)
                this1.h["Rectangle"] = v
                _jDYqPb2xtJJdHkbNPg5Z2A = e1
                archive.refreshEntry(e1)
                return _jDYqPb2xtJJdHkbNPg5Z2A
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def AddDLURL(self,e,url):
        archive = self.archive
        e1 = e
        c = url
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","DLURL"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer0().write(c)
        this1.h["DLURL"] = v
        _8YYgjpDvfgGDXcP7gunWHR = e1
        archive.refreshEntry(e1)
        return [_8YYgjpDvfgGDXcP7gunWHR]

    def AddYoutubeMusic(self,name,url):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                archive = _gthis.archive
                e1 = e
                c = name
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Name"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer0().write(c)
                this1.h["Name"] = v
                _dXdmde9qbYstVqSGFuomLK = e1
                archive.refreshEntry(e1)
                nat_ArchiveController.addTags(_gthis.archive,e,["music"])
                return _gthis.AddDLURL(e,url)
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def AddKeyShortcut(self,e,description):
        archive = self.archive
        e1 = e
        c = description
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","KeyShortcut"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer0().write(c)
        this1.h["KeyShortcut"] = v
        _4PJJAvWE1h66RocdUoHhuw = e1
        archive.refreshEntry(e1)
        return _4PJJAvWE1h66RocdUoHhuw

    def AddNATCommand(self,e,command):
        _g = 0
        while (_g < len(e)):
            e1 = (e[_g] if _g >= 0 and _g < len(e) else None)
            _g = (_g + 1)
            archive = self.archive
            e2 = e1
            c = command
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","NATCommand"," for ",e2.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_ArchiveController._log(msg)
            this1 = e2.components
            v = tink_json_Writer0().write(c)
            this1.h["NATCommand"] = v
            _tAB8yaa5wohHBm97Ygq8Z9 = e2
            archive.refreshEntry(e2)
        return None

    def AddNATCommands(self,e,commands):
        _g = 0
        while (_g < len(e)):
            e1 = (e[_g] if _g >= 0 and _g < len(e) else None)
            _g = (_g + 1)
            archive = self.archive
            e2 = e1
            c = commands
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","NATCommands"," for ",e2.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_ArchiveController._log(msg)
            this1 = e2.components
            v = tink_json_Writer11().write(c)
            this1.h["NATCommands"] = v
            _uYWav7yYL7nLJ1nuF8WS51 = e2
            archive.refreshEntry(e2)
        return None

    def CreateShortcutEntry(self,description,command):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                archive = _gthis.archive
                e1 = e
                c = description
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Name"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer0().write(c)
                this1.h["Name"] = v
                _mT6QExH29m2EoVdaXRPyzR = e1
                archive.refreshEntry(e1)
                _gthis.AddKeyShortcut(e,description)
                return _gthis.AddNATCommand([e],command)
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def CreateMultiCommandShortcut(self,description,commands):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                archive = _gthis.archive
                e1 = e
                c = description
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Name"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer0().write(c)
                this1.h["Name"] = v
                _sLsw1sgwrMewsAZxyePRkS = e1
                archive.refreshEntry(e1)
                _gthis.AddKeyShortcut(e,description)
                return _gthis.AddNATCommands([e],commands)
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    def AddFiles(self,entries,files):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            nat_ArchiveController.addFiles(self.archive,e,files)
        return entries

    def adjustImagePins(self,entries,increment):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy(("Images2" in e.components.h)):
                componentData = e.components.h.get("Images2",None)
                images = tink_json_Parser9().parse(componentData)
                def _hx_local_1():
                    images.pinnedImageIndex = kiss_Prelude.max(0,kiss_Prelude.min(kiss_Prelude.subtract(len(images.imageFiles),1),kiss_Prelude.add(increment,images.pinnedImageIndex)))
                    return images.pinnedImageIndex
                _3jHacYtuX7ot2puF8vhr6G = _hx_local_1()
                this1 = e.components
                v = tink_json_Writer5().write(images)
                this1.h["Images2"] = v
                self.archive.refreshEntry(e)
            else:
                self.ui.reportError(kiss_Prelude.add("Entry ",Std.string(e)," has no Images2 component"))
        return entries

    def PinNextImage(self,entries):
        return self.adjustImagePins(entries,1)

    def PinPreviousImage(self,entries):
        return self.adjustImagePins(entries,-1)

    def SetScale(self,entries,scale):
        _g = 0
        while (_g < len(entries)):
            e = (entries[_g] if _g >= 0 and _g < len(entries) else None)
            _g = (_g + 1)
            if kiss_Prelude.truthy(("Images2" in e.components.h)):
                componentData = e.components.h.get("Images2",None)
                i2 = tink_json_Parser9().parse(componentData)
                def _hx_local_1():
                    python_internal_ArrayImpl._set(i2.imageScales, i2.pinnedImageIndex, scale)
                    return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
                _6ieCqViwz4Mw1jJW6p4jKb = _hx_local_1()
                this1 = e.components
                v = tink_json_Writer5().write(i2)
                this1.h["Images2"] = v
                self.archive.refreshEntry(e)
            elif kiss_Prelude.truthy(("Scale" in e.components.h)):
                componentData1 = e.components.h.get("Scale",None)
                scaleComponent = tink_json_Parser4().parse(componentData1)
                scaleComponent = scale
                _j15YucsGzA3u5NTQrHBia = scaleComponent
                this2 = e.components
                v1 = tink_json_Writer12().write(scaleComponent)
                this2.h["Scale"] = v1
                self.archive.refreshEntry(e)
            elif kiss_Prelude.truthy(True):
                archive = self.archive
                e1 = e
                c = scale
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Scale"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this3 = e1.components
                v2 = tink_json_Writer12().write(c)
                this3.h["Scale"] = v2
                _8acgb6BCW8ZQve3hBQBeui = e1
                archive.refreshEntry(e1)
        return entries

    def CreatePlayground(self,name,catsMatchExp,defaultTags):
        def _hx_local_0(p):
            value = _hx_AnonObject({'catsMatch': catsMatchExp})
            setattr(p,(("_hx_" + name) if ((name in python_Boot.keywords)) else (("_hx_" + name) if (((((len(name) > 2) and ((ord(name[0]) == 95))) and ((ord(name[1]) == 95))) and ((ord(name[(len(name) - 1)]) != 95)))) else name)),value)
        self.archive.changePlaygrounds(_hx_local_0)
        _3XehDSz2xpm5Uea8mZLE4e = self.CreateTaggedEntry(["playground"],name)
        e = python_internal_ArrayImpl._get(_3XehDSz2xpm5Uea8mZLE4e, 0)
        archive = self.archive
        e1 = e
        c = catsMatchExp
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","CatsMatchExp"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer0().write(c)
        this1.h["CatsMatchExp"] = v
        _nfNZjuexztk8LV3znf6HuU = e1
        archive.refreshEntry(e1)
        archive = self.archive
        e1 = e
        c = defaultTags
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","TagList"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer13().write(c)
        this1.h["TagList"] = v
        _wkYwD2xmSDbT55CPQfjJ3B = e1
        archive.refreshEntry(e1)
        return [e]

    def SwitchPlayground(self,name):
        def _hx_local_0(p):
            setattr(p,(("_hx_" + "default") if (("default" in python_Boot.keywords)) else (("_hx_" + "default") if (((((len("default") > 2) and ((ord("default"[0]) == 95))) and ((ord("default"[1]) == 95))) and ((ord("default"[(len("default") - 1)]) != 95)))) else "default")),name)
        self.archive.changePlaygrounds(_hx_local_0)
        self.SelectEntries([])
        if kiss_Prelude.truthy(self.playgroundSystem):
            self.playgroundSystem.switchPlaygroundKey(name)
        return []

    def ChoosePlayground(self):
        _gthis = self
        tmp = self.ui
        _g = []
        access = self.archive.playgrounds
        _g_access = access
        _g_keys = python_Boot.fields(access)
        _g_index = 0
        while (_g_index < len(_g_keys)):
            key = _g_index
            _g_index = (_g_index + 1)
            key1 = (_g_keys[key] if key >= 0 and key < len(_g_keys) else None)
            _g_value = Reflect.field(_g_access,key1)
            _g_key = key1
            key2 = _g_key
            _ = _g_value
            if kiss_Prelude.truthy(kiss_Prelude.areEqual(key2,"default")):
                continue
            else:
                _g.append(key2)
        def _hx_local_0(pg):
            return _gthis.SwitchPlayground(pg)
        tmp.chooseBetweenStrings("Choose a playground:",kiss_Prelude.sort(_g),_hx_local_0)
        return []

    def AddConnections(self,entries,entriesToConnect):
        _g = []
        _g1 = 0
        while (_g1 < len(entries)):
            e = (entries[_g1] if _g1 >= 0 and _g1 < len(entries) else None)
            _g1 = (_g1 + 1)
            x = nat_ArchiveController.addConnections(self.archive,e,entriesToConnect)
            _g.append(x)
        return _g

    def RemoveConnections(self,entries,entriesToRemove):
        _g = []
        _g1 = 0
        while (_g1 < len(entries)):
            e = (entries[_g1] if _g1 >= 0 and _g1 < len(entries) else None)
            _g1 = (_g1 + 1)
            x = nat_ArchiveController.addConnections(self.archive,e,entriesToRemove)
            _g.append(x)
        return _g

    def AddColorFRGBA(self,entries,r,g,b,a):
        _g = []
        _g1 = 0
        while (_g1 < len(entries)):
            e = (entries[_g1] if _g1 >= 0 and _g1 < len(entries) else None)
            _g1 = (_g1 + 1)
            x = nat_ArchiveController.addColorFRGBA(self.archive,e,r,g,b,a)
            _g.append(x)
        return _g

    def AddColorIRGBA(self,entries,r,g,b,a):
        _g = []
        _g1 = 0
        while (_g1 < len(entries)):
            e = (entries[_g1] if _g1 >= 0 and _g1 < len(entries) else None)
            _g1 = (_g1 + 1)
            x = self.archive
            x1 = None
            try:
                x1 = int(r)
            except BaseException as _g2:
                None
                x1 = None
            x2 = x1
            x3 = None
            try:
                x3 = int(g)
            except BaseException as _g3:
                None
                x3 = None
            x4 = x3
            x5 = None
            try:
                x5 = int(b)
            except BaseException as _g4:
                None
                x5 = None
            x6 = x5
            x7 = None
            try:
                x7 = int(a)
            except BaseException as _g5:
                None
                x7 = None
            x8 = nat_ArchiveController.addColorIRGBA(x,e,x2,x4,x6,x7)
            _g.append(x8)
        return _g

    def VibeCheck(self,accounts,monthlyExpenses,energy,hope,note):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(e):
                nw = Reflect.callMethod(None,kiss_Prelude.add,accounts)
                me = Reflect.callMethod(None,kiss_Prelude.add,monthlyExpenses)
                runway = kiss_Prelude.divide(nw,me)
                _gthis.ui.displayMessage(kiss_Prelude.add("Your net worth is $",Std.string(nw),""))
                if kiss_Prelude.truthy(kiss_Prelude.lessThan(nw,0)):
                    _gthis.ui.displayMessage(kiss_Prelude.add("You are in debt and spending $",Std.string(me)," per month."))
                else:
                    _gthis.ui.displayMessage(kiss_Prelude.add("It will last for roughly ",Std.string(runway)," months!"))
                archive = _gthis.archive
                e1 = e
                c = None
                try:
                    c = int(energy)
                except BaseException as _g:
                    None
                    c = None
                c1 = c
                c = None
                try:
                    c = int(hope)
                except BaseException as _g:
                    None
                    c = None
                c2 = _hx_AnonObject({'energy': c1, 'hope': c, 'accounts': accounts, 'monthlyExpenses': monthlyExpenses, 'note': note})
                ui = None
                msg = kiss_Prelude.add("adding ",c2," as ","VibeCheck"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer15().write(c2)
                this1.h["VibeCheck"] = v
                _4E34Tbtnj5RnTeUj41yhjA = e1
                archive.refreshEntry(e1)
                archive = _gthis.archive
                e1 = e
                _g = haxe_ds_StringMap()
                value = Date.now()
                _g.h["Created"] = value
                c = _g
                ui = None
                msg = kiss_Prelude.add("adding ",c," as ","Dates"," for ",e1.id)
                if kiss_Prelude.truthy(ui):
                    ui.displayMessage(msg)
                nat_ArchiveController._log(msg)
                this1 = e1.components
                v = tink_json_Writer16().write(c)
                this1.h["Dates"] = v
                _cmDwkemRVw6KvQQp9jNgaY = e1
                archive.refreshEntry(e1)
                return _cmDwkemRVw6KvQQp9jNgaY
            return [self.archive.createEntry(_hx_local_0)]
        return _hx_local_1()

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_ArchiveController.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_ArchiveController.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_ArchiveController.tagList(e),nat_ArchiveController.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _c7TEXcqv1rF79XfQqch4Nk = None
        archive.refreshEntry(e)
        return _c7TEXcqv1rF79XfQqch4Nk

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _tnov5qfVHk2idWCronNuV3 = None
        archive.refreshEntry(e)
        return _tnov5qfVHk2idWCronNuV3

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _gAU8CoXEBTwZigbzAQFR87 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _gAU8CoXEBTwZigbzAQFR87
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_ArchiveController._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _3kBDfQaTJeWhJWWy4wz6WK = e1
            archive1.refreshEntry(e1)
            return _3kBDfQaTJeWhJWWy4wz6WK

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _bVZAwZfpjxC3mGCwH85aW4 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _bVZAwZfpjxC3mGCwH85aW4
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _51NfAKSU6HmSLMdoDQCCiV = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_ArchiveController._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _7t2GVAiShA1nFyFb2C4Ygu = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _f1KNLwYBgYWVFphwt8kbc6 = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _qFatbFN8Sbe5JRpZey88LV = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_ArchiveController.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _pK6WjrvGsu6Ggj1aFHxFos = e1
        archive1.refreshEntry(e1)
        return _pK6WjrvGsu6Ggj1aFHxFos

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _moLtad2V8wh3zzQeedFPTU = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_ArchiveController.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_ArchiveController._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _kuRUDnH4ARJuHQNShbWFh5 = e1
        archive1.refreshEntry(e1)
        return _kuRUDnH4ARJuHQNShbWFh5

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _oevw7CseMKbR8wc6AHfw1e = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_oevw7CseMKbR8wc6AHfw1e):
            _ajFwnzZxJ2TcJACTuxZcsZ = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _ajFwnzZxJ2TcJACTuxZcsZ1 = Reflect.callMethod(None,_ajFwnzZxJ2TcJACTuxZcsZ,_g)
            return _ajFwnzZxJ2TcJACTuxZcsZ1
        else:
            return _oevw7CseMKbR8wc6AHfw1e

    @staticmethod
    def readString(stream):
        terminator = None
        _g = stream.takeChars(1)
        _stQNHanrBN4dmx4gvJB8PL = _g
        if kiss_Prelude.truthy(kiss_Prelude.isNull(_stQNHanrBN4dmx4gvJB8PL)):
            raise haxe_Exception.thrown("string arg must start with \" or '")
        elif (_g.index == 0):
            _g1 = _g.params[0]
            if (_g1 == "\""):
                terminator = "\""
            elif (_g1 == "'"):
                terminator = "'"
            else:
                raise haxe_Exception.thrown("string arg must start with \" or '")
        else:
            raise haxe_Exception.thrown("string arg must start with \" or '")
        _g = stream.takeUntilAndDrop(terminator)
        _3bSGWGJUHw8w63c3ibqfsp = _g
        if kiss_Prelude.truthy(kiss_Prelude.isNull(_3bSGWGJUHw8w63c3ibqfsp)):
            raise haxe_Exception.thrown(kiss_Prelude.add("string arg must end with ",Std.string(terminator),""))
        elif (_g.index == 0):
            s = _g.params[0]
            return s
        else:
            raise haxe_Exception.thrown(kiss_Prelude.add("string arg must end with ",Std.string(terminator),""))

    @staticmethod
    def readNumber(stream):
        _g = stream.takeUntilOneOf([" "],True)
        _7nsHWYcQ3omXNt5F3LSR4i = _g
        tmp = None
        if kiss_Prelude.truthy(kiss_Prelude.isNull(_7nsHWYcQ3omXNt5F3LSR4i)):
            tmp = ""
        elif (_g.index == 0):
            f = _g.params[0]
            tmp = f
        else:
            tmp = ""
        return Std.parseFloat(tmp)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.playgroundSystem = None
        _hx_o._selectedEntries = None
        _hx_o.lastChangeSet = None
        _hx_o.commands = None
        _hx_o.nameSystem = None
        _hx_o.archive = None
        _hx_o.ui = None
nat_ArchiveController._hx_class = nat_ArchiveController
_hx_classes["nat.ArchiveController"] = nat_ArchiveController


class nat_ArchiveUI:
    _hx_class_name = "nat.ArchiveUI"
    _hx_is_interface = "True"
    __slots__ = ("controller", "shortcutHandler")
    _hx_fields = ["controller", "shortcutHandler"]
    _hx_methods = ["showPrefixMap", "hidePrefixMap", "playgroundSystem", "enterText", "enterNumber", "chooseEntry", "chooseEntries", "handleChanges", "displayMessage", "reportError", "onSelectionChanged", "choosePosition", "cursorPosition", "chooseBetweenStrings"]
nat_ArchiveUI._hx_class = nat_ArchiveUI
_hx_classes["nat.ArchiveUI"] = nat_ArchiveUI


class nat_BoolExpInterp(kiss_KissInterp):
    _hx_class_name = "nat.BoolExpInterp"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["resolve"]
    _hx_statics = ["eval"]
    _hx_interfaces = []
    _hx_super = kiss_KissInterp


    def __init__(self):
        super().__init__()

    def resolve(self,id):
        try:
            return super().resolve(id)
        except BaseException as _g:
            None
            return False

    @staticmethod
    def eval(expStr,activeConditions):
        interp = nat_BoolExpInterp()
        _g = 0
        while (_g < len(activeConditions)):
            condition = (activeConditions[_g] if _g >= 0 and _g < len(activeConditions) else None)
            _g = (_g + 1)
            interp.variables.h[condition] = True
        return kiss_Prelude.truthy(interp.evalKiss(expStr))

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
nat_BoolExpInterp._hx_class = nat_BoolExpInterp
_hx_classes["nat.BoolExpInterp"] = nat_BoolExpInterp


class nat_Entry:
    _hx_class_name = "nat.Entry"
    _hx_is_interface = "False"
    __slots__ = ("id", "components", "files")
    _hx_fields = ["id", "components", "files"]
    _hx_methods = ["toString"]

    def __init__(self,id = None,components = None,files = None):
        self.files = []
        self.components = haxe_ds_StringMap()
        self.id = (id if ((id is not None)) else uuid_Uuid.v4())
        if (components is not None):
            self.components = components
        if (files is not None):
            self.files = files

    def toString(self):
        if ("Name" in self.components.h):
            return self.components.h.get("Name",None)
        else:
            return ("entry " + HxOverrides.stringOrNull(self.id))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.id = None
        _hx_o.components = None
        _hx_o.files = None
nat_Entry._hx_class = nat_Entry
_hx_classes["nat.Entry"] = nat_Entry


class nat_Lib:
    _hx_class_name = "nat.Lib"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_Lib.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_Lib.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_Lib.tagList(e),nat_Lib.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _pXakjbB7oEP7NMSTLJkQvm = None
        archive.refreshEntry(e)
        return _pXakjbB7oEP7NMSTLJkQvm

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _9NJRB7xmm7oT8DcXLGdbHS = None
        archive.refreshEntry(e)
        return _9NJRB7xmm7oT8DcXLGdbHS

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _buqF7KLY6s56rp2ZRe763j = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _buqF7KLY6s56rp2ZRe763j
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_Lib._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _5EkHqc7RjmVT9uVKVgpAzQ = e1
            archive1.refreshEntry(e1)
            return _5EkHqc7RjmVT9uVKVgpAzQ

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _vXceRgwtjA7TeTsKrmARK5 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _vXceRgwtjA7TeTsKrmARK5
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _9nBXSD7b2WfS4NiziDwd7K = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_Lib._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _tRq3THGhAJNrPThgSKE2S5 = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _rfuYQRvuW3zHtWpYPQwHFK = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_Lib._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _udzZiNaS9QPpixQer6u5p9 = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_Lib.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_Lib._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _9HxKZdZwVpJAEqUvttsuka = e1
        archive1.refreshEntry(e1)
        return _9HxKZdZwVpJAEqUvttsuka

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_Lib._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _71fb7c2A2cDDr6wH199CoG = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_Lib.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_Lib._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _9otC1rn5KBNHgV6k8YV2yK = e1
        archive1.refreshEntry(e1)
        return _9otC1rn5KBNHgV6k8YV2yK

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _acfPEDTD5Xy2XYLC7qGsbs = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_acfPEDTD5Xy2XYLC7qGsbs):
            _qaGVnmZTjVP6o54Nxgh6S7 = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _qaGVnmZTjVP6o54Nxgh6S71 = Reflect.callMethod(None,_qaGVnmZTjVP6o54Nxgh6S7,_g)
            return _qaGVnmZTjVP6o54Nxgh6S71
        else:
            return _acfPEDTD5Xy2XYLC7qGsbs
nat_Lib._hx_class = nat_Lib
_hx_classes["nat.Lib"] = nat_Lib


class nat_System:
    _hx_class_name = "nat.System"
    _hx_is_interface = "False"
    __slots__ = ("entries", "name", "canProcessEntry", "processEntry", "onRemoveEntry")
    _hx_fields = ["entries", "name", "canProcessEntry", "processEntry", "onRemoveEntry"]
    _hx_methods = ["process", "checkEntryInOrOut"]

    def __init__(self,name,canProcessEntry,processEntry):
        self.onRemoveEntry = None
        self.entries = haxe_ds_StringMap()
        self.name = name
        self.canProcessEntry = canProcessEntry
        self.processEntry = processEntry

    def process(self,archive,ui = None):
        e = self.entries.iterator()
        while e.hasNext():
            e1 = e.next()
            kiss_Prelude.print(kiss_Prelude.add("",Std.string(self.name)," processing ",Std.string(e1.id),""))
            self.processEntry(archive,e1,ui)

    def checkEntryInOrOut(self,archive,e):
        if kiss_Prelude.truthy(self.canProcessEntry(archive,e)):
            self.entries.h[e.id] = e
        elif kiss_Prelude.truthy((e.id in self.entries.h)):
            self.entries.remove(e.id)
            if kiss_Prelude.truthy(self.onRemoveEntry):
                self.onRemoveEntry(archive,e)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.entries = None
        _hx_o.name = None
        _hx_o.canProcessEntry = None
        _hx_o.processEntry = None
        _hx_o.onRemoveEntry = None
nat_System._hx_class = nat_System
_hx_classes["nat.System"] = nat_System


class nat_systems_AttachmentSystem(nat_System):
    _hx_class_name = "nat.systems.AttachmentSystem"
    _hx_is_interface = "False"
    __slots__ = ("extensions",)
    _hx_fields = ["extensions"]
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self,name,_extensions,processor):
        self.extensions = None
        _gthis = self
        _g = []
        _g1 = 0
        while (_g1 < len(_extensions)):
            extension = (_extensions[_g1] if _g1 >= 0 and _g1 < len(_extensions) else None)
            _g1 = (_g1 + 1)
            x = extension.lower()
            _g.append(x)
        self.extensions = _g
        def _hx_local_2(archive,e):
            _g = 0
            _g1 = e.files
            while (_g < len(_g1)):
                file = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(_gthis.extensions,haxe_io_Path.extension(file).lower(),None))))):
                    return True
            return False
        def _hx_local_5(archive,e,ui = None):
            def _hx_local_4():
                def _hx_local_3(file):
                    return (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(_gthis.extensions,haxe_io_Path.extension(file),None))))
                return processor(archive,e,kiss_Prelude.filter(e.files,_hx_local_3),ui)
            return _hx_local_4()
        super().__init__(name,_hx_local_2,_hx_local_5)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_AttachmentSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_AttachmentSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_AttachmentSystem.tagList(e),nat_systems_AttachmentSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _7jQNEwvFPHFCuGBPxchP1S = None
        archive.refreshEntry(e)
        return _7jQNEwvFPHFCuGBPxchP1S

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _eya3Sb5TqA7NBu89uEZhrH = None
        archive.refreshEntry(e)
        return _eya3Sb5TqA7NBu89uEZhrH

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _gL6UZuDpkkZmyaoBW25H27 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _gL6UZuDpkkZmyaoBW25H27
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_AttachmentSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _kFtjh4HfuVEKGJk9StVkzZ = e1
            archive1.refreshEntry(e1)
            return _kFtjh4HfuVEKGJk9StVkzZ

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _egwiwUypc4nSsqYn6ed8b4 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _egwiwUypc4nSsqYn6ed8b4
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _tqgHDTh6hPxpgCcezhtciH = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_AttachmentSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _sE6gNGFtkmhXg8xo8u6wuP = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _izBk4guiRS646JH3LK7wWw = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _b6Ne1wsRNxay4muhU9Zg1J = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_AttachmentSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _7YDDLSAF7auYbk2hC86NB = e1
        archive1.refreshEntry(e1)
        return _7YDDLSAF7auYbk2hC86NB

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _gGL2zJ1DrdBzvV3JNrxqTW = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_AttachmentSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _5bcFVkdr8uqR5aS1TSmuLa = e1
        archive1.refreshEntry(e1)
        return _5bcFVkdr8uqR5aS1TSmuLa

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _4J7ndtnBJ2hHxD8n7CA3qZ = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_4J7ndtnBJ2hHxD8n7CA3qZ):
            _rBtRoCCVxHNeDDVRVEPWAW = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _rBtRoCCVxHNeDDVRVEPWAW1 = Reflect.callMethod(None,_rBtRoCCVxHNeDDVRVEPWAW,_g)
            return _rBtRoCCVxHNeDDVRVEPWAW1
        else:
            return _4J7ndtnBJ2hHxD8n7CA3qZ

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.extensions = None
nat_systems_AttachmentSystem._hx_class = nat_systems_AttachmentSystem
_hx_classes["nat.systems.AttachmentSystem"] = nat_systems_AttachmentSystem


class nat_systems_AutoStepperSystem(nat_systems_AttachmentSystem):
    _hx_class_name = "nat.systems.AutoStepperSystem"
    _hx_is_interface = "False"
    __slots__ = ("jarPath",)
    _hx_fields = ["jarPath"]
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_systems_AttachmentSystem


    def __init__(self):
        self.jarPath = None
        _gthis = self
        self.jarPath = kiss_Prelude.joinPath(kiss_Prelude.libPath("nat-archive-tool"),"apps/autostepper/AutoStepper.jar")
        def _hx_local_3(archive,e,mp3Files,ui = None):
            if kiss_Prelude.truthy((not kiss_Prelude.truthy(nat_systems_AutoStepperSystem.tagsMatch(e,"stepperProcessed")))):
                _g = 0
                while (_g < len(mp3Files)):
                    file = [(mp3Files[_g] if _g >= 0 and _g < len(mp3Files) else None)]
                    _g = (_g + 1)
                    def _hx_local_2(file):
                        def _hx_local_1():
                            try:
                                ui.displayMessage(kiss_Prelude.add("autoStepping ",Std.string((file[0] if 0 < len(file) else None)),""))
                                kiss_Prelude.shellExecute(kiss_Prelude.add("                                java -jar \"",Std.string(_gthis.jarPath),"\" input=\"",Std.string(archive.filePath((file[0] if 0 < len(file) else None))),"\" duration=130 hard=true\n                                "),"")
                                ui.displayMessage(kiss_Prelude.add("done autostepping ",Std.string((file[0] if 0 < len(file) else None)),""))
                                nat_systems_AutoStepperSystem.addTags(archive,e,["stepperProcessed"])
                            except BaseException as _g:
                                ui.displayMessage(kiss_Prelude.add("failed autostepping ",Std.string((file[0] if 0 < len(file) else None)),""))
                        return _hx_local_1
                    runAutoStepper = _hx_local_2(file)
                    sys_thread__Thread_HxThread.create(runAutoStepper,False)
                return None
            else:
                return None
        super().__init__("AutoStepperSystem",["mp3"],_hx_local_3)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_AutoStepperSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_AutoStepperSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_AutoStepperSystem.tagList(e),nat_systems_AutoStepperSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _k7SxUssi5Dme4jk9WPiep3 = None
        archive.refreshEntry(e)
        return _k7SxUssi5Dme4jk9WPiep3

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _nQ7MxCBsgW3KjK99CCf8Bh = None
        archive.refreshEntry(e)
        return _nQ7MxCBsgW3KjK99CCf8Bh

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _j8ozNHxuWyBoFqfrdfa2Bf = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _j8ozNHxuWyBoFqfrdfa2Bf
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_AutoStepperSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _m62w1raRvt1bVtuuE2ZMyq = e1
            archive1.refreshEntry(e1)
            return _m62w1raRvt1bVtuuE2ZMyq

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _rzXW4cq29NBjDtZ752yE94 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _rzXW4cq29NBjDtZ752yE94
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _r8PBbETarx7AgUH9ER2UfT = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_AutoStepperSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _iTtGsjHKjbBeM8aTcmrW65 = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _dK5LhuPZfnbzEWkF9AYzjB = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AutoStepperSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _cYen7A8h62n93g2Eaww26s = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_AutoStepperSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AutoStepperSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _xgmqsshMGDsi9oh89n2hZK = e1
        archive1.refreshEntry(e1)
        return _xgmqsshMGDsi9oh89n2hZK

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AutoStepperSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _95jy4osM6okgmsxqJ27BB6 = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_AutoStepperSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_AutoStepperSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _fqDZp2CJen9rdKYjFrv3F5 = e1
        archive1.refreshEntry(e1)
        return _fqDZp2CJen9rdKYjFrv3F5

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _s2Dkq85FoVfXLrhbRLmCSj = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_s2Dkq85FoVfXLrhbRLmCSj):
            _kdoDQsoqUassULJ4rqvvSg = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _kdoDQsoqUassULJ4rqvvSg1 = Reflect.callMethod(None,_kdoDQsoqUassULJ4rqvvSg,_g)
            return _kdoDQsoqUassULJ4rqvvSg1
        else:
            return _s2Dkq85FoVfXLrhbRLmCSj

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.jarPath = None
nat_systems_AutoStepperSystem._hx_class = nat_systems_AutoStepperSystem
_hx_classes["nat.systems.AutoStepperSystem"] = nat_systems_AutoStepperSystem


class nat_systems_DLSystem(nat_System):
    _hx_class_name = "nat.systems.DLSystem"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self):
        hasYTDL = False
        def _hx_local_0(error):
            nonlocal hasYTDL
            startIndex = None
            if kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,(error.find("You must provide at least one URL") if ((startIndex is None)) else HxString.indexOfImpl(error,"You must provide at least one URL",startIndex)))))):
                hasYTDL = True
                return hasYTDL
            else:
                return None
        kiss_Prelude.tryProcess("youtube-dl",[],_hx_local_0)
        def _hx_local_1(archive,e):
            _j18SzcTVkfK6aXf84CYPMW = hasYTDL
            if kiss_Prelude.truthy(_j18SzcTVkfK6aXf84CYPMW):
                _5ccc6T4CvHyHgS1QACb1KA = nat_systems_DLSystem.componentsAndTagsMatch(e,"(unless dlProcessed DLURL)")
                return _5ccc6T4CvHyHgS1QACb1KA
            else:
                return _j18SzcTVkfK6aXf84CYPMW
        def _hx_local_3(archive,e,ui = None):
            basename = kiss_Prelude.add
            e1 = e
            basename1 = None
            if kiss_Prelude.truthy(("Name" in e1.components.h)):
                componentData = e1.components.h.get("Name",None)
                basename1 = tink_json_Parser2().parse(componentData)
            else:
                basename1 = kiss_Prelude.uuid()
            basename2 = basename("",Std.string(basename1),"-DL")
            o = kiss_Prelude.add("\"",Std.string(basename2),".%(ext)s\"")
            o1 = (StringTools.replace(o,"%","%%") if (kiss_Prelude.truthy(kiss_Prelude.areEqual(Sys.systemName(),"Windows"))) else o)
            componentData = e.components.h.get("DLURL",None)
            url = tink_json_Parser2().parse(componentData)
            if kiss_Prelude.truthy(nat_systems_DLSystem.tagsMatch(e,"music")):
                def _hx_local_2():
                    try:
                        ui.displayMessage(kiss_Prelude.add("downloading ",Std.string(url)," as ",Std.string(basename2),""))
                        kiss_Prelude.shellExecute(kiss_Prelude.add("                                        youtube-dl -x --audio-format mp3 -o ",Std.string(o1)," ",Std.string(url),"\n                                        "),"")
                        ui.displayMessage(kiss_Prelude.add("done downloading ",Std.string(basename2),""))
                        nat_systems_DLSystem.addFiles(archive,e,[kiss_Prelude.add("",Std.string(basename2),".mp3")])
                    except BaseException as _g:
                        ui.displayMessage(kiss_Prelude.add("failed downloading ",Std.string(basename2),""))
                downloadMp3 = _hx_local_2
                return sys_thread__Thread_HxThread.create(downloadMp3,False)
            elif kiss_Prelude.truthy(True):
                ui1 = ui
                msg = kiss_Prelude.add
                msg1 = None
                this1 = e.components
                componentData = this1.get("Tags")
                if (tink_json_Parser1().parse(componentData) is None):
                    msg1 = "null"
                else:
                    this1 = e.components
                    componentData = this1.get("Tags")
                    msg1 = tink_json_Parser1().parse(componentData).toString()
                msg2 = msg("DLSystem doesn't know what to do with ",msg1,"")
                if kiss_Prelude.truthy(ui1):
                    ui1.displayMessage(msg2)
                nat_systems_DLSystem._log(msg2)
                return None
            else:
                return None
        super().__init__("DLSystem",_hx_local_1,_hx_local_3)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_DLSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_DLSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_DLSystem.tagList(e),nat_systems_DLSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _3AJxcigCZUS8kKEnZ9pRSX = None
        archive.refreshEntry(e)
        return _3AJxcigCZUS8kKEnZ9pRSX

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _kpXLx69bfZSV1fgDfNi5gs = None
        archive.refreshEntry(e)
        return _kpXLx69bfZSV1fgDfNi5gs

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _bN9Zxtpr3QBw8D7PpMF9uX = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _bN9Zxtpr3QBw8D7PpMF9uX
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_DLSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _bLTANoj24fuYRjHHascisd = e1
            archive1.refreshEntry(e1)
            return _bLTANoj24fuYRjHHascisd

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _wgvXNPMXCZE1zFK3Zd6PiM = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _wgvXNPMXCZE1zFK3Zd6PiM
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _3QmKttvN5NumXxXjNrVZyd = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_DLSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _atcjoXB4w4EKk2ERWFABuP = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _4GLmUHxKikUfM4y6krueCP = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_DLSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _nXtRWCXTKpy2zeuRySPiEQ = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_DLSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_DLSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _bYxiLdvNaRHSDA31QKwswG = e1
        archive1.refreshEntry(e1)
        return _bYxiLdvNaRHSDA31QKwswG

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_DLSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _412ktNmgYxTF5PNZFcjc2z = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_DLSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_DLSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _wvXHDKibX8XHFdQWHkSD6R = e1
        archive1.refreshEntry(e1)
        return _wvXHDKibX8XHFdQWHkSD6R

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _6GjfhHpm7S7Z44TV7ersXZ = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_6GjfhHpm7S7Z44TV7ersXZ):
            _9eLYHMY5cLGDsLfGGpdpfp = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _9eLYHMY5cLGDsLfGGpdpfp1 = Reflect.callMethod(None,_9eLYHMY5cLGDsLfGGpdpfp,_g)
            return _9eLYHMY5cLGDsLfGGpdpfp1
        else:
            return _6GjfhHpm7S7Z44TV7ersXZ
nat_systems_DLSystem._hx_class = nat_systems_DLSystem
_hx_classes["nat.systems.DLSystem"] = nat_systems_DLSystem


class nat_systems_ImageAttachmentSystem(nat_systems_AttachmentSystem):
    _hx_class_name = "nat.systems.ImageAttachmentSystem"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry", "upgradeToVersion2"]
    _hx_interfaces = []
    _hx_super = nat_systems_AttachmentSystem


    def __init__(self):
        def _hx_local_0(archive,e,imageFiles,ui = None):
            if kiss_Prelude.truthy((not kiss_Prelude.truthy(nat_systems_ImageAttachmentSystem.upgradeToVersion2(archive,e)))):
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(("Images2" in e.components.h)))):
                    archive1 = archive
                    e1 = e
                    _g = []
                    _ = kiss_Prelude.range(0,len(imageFiles),1)
                    while _.hasNext():
                        _1 = _.next()
                        _g.append(1.0)
                    c = _hx_AnonObject({'imageFiles': imageFiles, 'imageScales': _g, 'pinnedImageIndex': 0})
                    ui = None
                    msg = kiss_Prelude.add("adding ",c," as ","Images2"," for ",e1.id)
                    if kiss_Prelude.truthy(ui):
                        ui.displayMessage(msg)
                    nat_systems_ImageAttachmentSystem._log(msg)
                    this1 = e1.components
                    v = tink_json_Writer5().write(c)
                    this1.h["Images2"] = v
                    _7uGxiM8Jv2GNvn1e4cFXFg = e1
                    archive1.refreshEntry(e1)
                    return _7uGxiM8Jv2GNvn1e4cFXFg
                else:
                    return None
            else:
                return None
        super().__init__("ImageAttachmentSystem",["jpg", "jpeg", "png", "svg"],_hx_local_0)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_ImageAttachmentSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_ImageAttachmentSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_ImageAttachmentSystem.tagList(e),nat_systems_ImageAttachmentSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _iHL5pUh24vqzU2EgT22Agj = None
        archive.refreshEntry(e)
        return _iHL5pUh24vqzU2EgT22Agj

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _eePEFdoZ8Vdiwp9dL52Ks4 = None
        archive.refreshEntry(e)
        return _eePEFdoZ8Vdiwp9dL52Ks4

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _q7VifM3ksPAekiFEy2pqP5 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _q7VifM3ksPAekiFEy2pqP5
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_ImageAttachmentSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _g28W8LkNbY2svBET4wcfFx = e1
            archive1.refreshEntry(e1)
            return _g28W8LkNbY2svBET4wcfFx

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _ip6QdKN1EH14xiZK3XHLvL = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _ip6QdKN1EH14xiZK3XHLvL
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _qfmYzu6gxLkLiPXyvTV653 = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_ImageAttachmentSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _itfzrc5Xt74a5FezakF74J = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _iTZzBALCvm2abqKWwK5n2G = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_ImageAttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _9CRCypLRbGfbbcx62hUCkg = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_ImageAttachmentSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_ImageAttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _r6epGGhrTcptXu6SYcHCb2 = e1
        archive1.refreshEntry(e1)
        return _r6epGGhrTcptXu6SYcHCb2

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_ImageAttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _v3jD3Kpz5wjYgsz9ZkVNDn = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_ImageAttachmentSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_ImageAttachmentSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _8JFuwgmGZWLBgXqtCGZ49v = e1
        archive1.refreshEntry(e1)
        return _8JFuwgmGZWLBgXqtCGZ49v

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _sJ3BLfttwv3gxLgaSB6RVK = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_sJ3BLfttwv3gxLgaSB6RVK):
            _jBXacoZ5KNpErzyX7G49r3 = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _jBXacoZ5KNpErzyX7G49r31 = Reflect.callMethod(None,_jBXacoZ5KNpErzyX7G49r3,_g)
            return _jBXacoZ5KNpErzyX7G49r31
        else:
            return _sJ3BLfttwv3gxLgaSB6RVK

    @staticmethod
    def upgradeToVersion2(archive,e):
        if kiss_Prelude.truthy(("Images" in e.components.h)):
            componentData = e.components.h.get("Images",None)
            images1 = tink_json_Parser3().parse(componentData)
            e1 = e
            scale = None
            if kiss_Prelude.truthy(("Scale" in e1.components.h)):
                componentData = e1.components.h.get("Scale",None)
                scale = tink_json_Parser4().parse(componentData)
            else:
                scale = 1.0
            pIdx = images1.pinnedImageIndex
            def _hx_local_0(f):
                return f.startswith("textImage")
            textImageFiles = kiss_Prelude.filter(images1.imageFiles,_hx_local_0)
            archive1 = archive
            e1 = e
            ui = None
            msg = kiss_Prelude.add("removing ","Images"," component from ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_ImageAttachmentSystem._log(msg)
            e1.components.remove("Images")
            _6Dmu73RucdYUWZW4wSysUq = e1
            archive1.refreshEntry(e1)
            nat_systems_ImageAttachmentSystem.removeFiles(archive,e,textImageFiles)
            _g = 0
            _g1 = textImageFiles
            while (_g < len(_g1)):
                f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                python_internal_ArrayImpl.remove(images1.imageFiles,f)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy(images1.imageFiles))):
                return True
            archive1 = archive
            e1 = e
            images11 = images1.imageFiles
            c = kiss_Prelude.concat
            _g = []
            _ = kiss_Prelude.range(0,pIdx,1)
            while _.hasNext():
                _1 = _.next()
                _g.append(1.0)
            c1 = _g
            c2 = [scale]
            _g = []
            _ = kiss_Prelude.range(0,kiss_Prelude.subtract(len(images1.imageFiles),1,pIdx),1)
            while _.hasNext():
                _1 = _.next()
                _g.append(1.0)
            c3 = _hx_AnonObject({'imageFiles': images11, 'imageScales': c(c1,c2,_g), 'pinnedImageIndex': pIdx})
            ui = None
            msg = kiss_Prelude.add("adding ",c3," as ","Images2"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_ImageAttachmentSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer5().write(c3)
            this1.h["Images2"] = v
            _6CpY3HPYhSPYTe95PsxnYa = e1
            archive1.refreshEntry(e1)
            archive1 = archive
            e1 = e
            ui = None
            msg = kiss_Prelude.add("removing ","Scale"," component from ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_ImageAttachmentSystem._log(msg)
            e1.components.remove("Scale")
            _mum4nF2eiUjbnCb9ySbKWX = e1
            archive1.refreshEntry(e1)
            return True
        else:
            return False
nat_systems_ImageAttachmentSystem._hx_class = nat_systems_ImageAttachmentSystem
_hx_classes["nat.systems.ImageAttachmentSystem"] = nat_systems_ImageAttachmentSystem


class nat_systems_KeyShortcutSystem(nat_System):
    _hx_class_name = "nat.systems.KeyShortcutSystem"
    _hx_is_interface = "False"
    __slots__ = ("descriptions", "setup", "controller")
    _hx_fields = ["descriptions", "setup", "controller"]
    _hx_methods = ["invokeEntry"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self,controller):
        self.controller = None
        self.setup = None
        self.descriptions = haxe_ds_StringMap()
        _gthis = self
        self.setup = False
        self.controller = controller
        def _hx_local_0(archive,e):
            return ("KeyShortcut" in e.components.h)
        def _hx_local_4(archive,e,ui = None):
            tmp = kiss_Prelude.truthy
            _79UdVSrsfvAgFAG3kPHoGb = ui
            tmp1 = None
            if kiss_Prelude.truthy(_79UdVSrsfvAgFAG3kPHoGb):
                _mBMQt8f9gmKSVdB8BU1BWw = ui.shortcutHandler
                tmp1 = _mBMQt8f9gmKSVdB8BU1BWw
            else:
                tmp1 = _79UdVSrsfvAgFAG3kPHoGb
            if tmp(tmp1):
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(_gthis.setup))):
                    def _hx_local_1(_,_hx_map):
                        ui.showPrefixMap(_hx_map)
                    ui.shortcutHandler.onSelectPrefixMap = _hx_local_1
                    def _hx_local_2(e):
                        ui.hidePrefixMap()
                        return _gthis.invokeEntry(archive,ui,e)
                    ui.shortcutHandler.onSelectItem = _hx_local_2
                    def _hx_local_3(key,_hx_map):
                        ui.displayMessage(kiss_Prelude.add("",Std.string(key)," is not mapped to a shortcut in this context: ",("null" if ((_hx_map is None)) else _hx_map.toString()),""))
                    ui.shortcutHandler.onBadKey = _hx_local_3
                    _gthis.setup = True
                tmp = kiss_Prelude.truthy
                tmp1 = kiss_Prelude.truthy
                this1 = _gthis.descriptions
                componentData = e.components.h.get("KeyShortcut",None)
                if tmp((not tmp1((tink_json_Parser2().parse(componentData) in this1.h)))):
                    ui1 = ui.shortcutHandler
                    componentData = e.components.h.get("KeyShortcut",None)
                    ui1.registerItem(tink_json_Parser2().parse(componentData),e)
                    this1 = _gthis.descriptions
                    componentData = e.components.h.get("KeyShortcut",None)
                    k = tink_json_Parser2().parse(componentData)
                    this1.h[k] = True
            return 0
        super().__init__("KeyShortcutSystem",_hx_local_0,_hx_local_4)

    def invokeEntry(self,archive,ui,e):
        if kiss_Prelude.truthy(("NATCommand" in e.components.h)):
            tmp = self.controller
            componentData = e.components.h.get("NATCommand",None)
            tmp.tryRunCommand(tink_json_Parser2().parse(componentData))
        elif kiss_Prelude.truthy(("NATCommands" in e.components.h)):
            tmp = self.controller
            componentData = e.components.h.get("NATCommands",None)
            tmp.tryRunCommands(tink_json_Parser5().parse(componentData))
        elif kiss_Prelude.truthy(True):
            tmp = kiss_Prelude.add
            tmp1 = Std.string(e.id)
            ui.displayMessage(tmp("tried to invoke ",tmp1," but it has no available actions"))
        return 0

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_KeyShortcutSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_KeyShortcutSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_KeyShortcutSystem.tagList(e),nat_systems_KeyShortcutSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _kHySaNjLh6vfmaDn79EYz9 = None
        archive.refreshEntry(e)
        return _kHySaNjLh6vfmaDn79EYz9

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _q7q8Nr1VoeDoXz8Exqxrho = None
        archive.refreshEntry(e)
        return _q7q8Nr1VoeDoXz8Exqxrho

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _rXnJHk1K6ffNS6BFoZAU8Y = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _rXnJHk1K6ffNS6BFoZAU8Y
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_KeyShortcutSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _d2kTnSgEMpcocN5eNwZoij = e1
            archive1.refreshEntry(e1)
            return _d2kTnSgEMpcocN5eNwZoij

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _vkxxBQVj3L884vafuZ8qaG = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _vkxxBQVj3L884vafuZ8qaG
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _nVxSeEYgXYp3Rv9uov86Vf = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_KeyShortcutSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _6wKArv2qqi14DC9SSQtusH = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _dimD4dTyKA1iy5zruqpj6y = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_KeyShortcutSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _nV9FRea8Fk8D4kr2CtynwN = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_KeyShortcutSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_KeyShortcutSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _jPGgkSGKzVSzdmVkPLeWtD = e1
        archive1.refreshEntry(e1)
        return _jPGgkSGKzVSzdmVkPLeWtD

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_KeyShortcutSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _5gZEC39CpXtvybkuZsTHj1 = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_KeyShortcutSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_KeyShortcutSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _aQjvPKT6mnPGp1xA6gdWju = e1
        archive1.refreshEntry(e1)
        return _aQjvPKT6mnPGp1xA6gdWju

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _aZEg3Z7X94hWniquoZ1NMZ = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_aZEg3Z7X94hWniquoZ1NMZ):
            _hy16h9iGq4DfPCN9ZivqVf = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _hy16h9iGq4DfPCN9ZivqVf1 = Reflect.callMethod(None,_hy16h9iGq4DfPCN9ZivqVf,_g)
            return _hy16h9iGq4DfPCN9ZivqVf1
        else:
            return _aZEg3Z7X94hWniquoZ1NMZ

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.descriptions = None
        _hx_o.setup = None
        _hx_o.controller = None
nat_systems_KeyShortcutSystem._hx_class = nat_systems_KeyShortcutSystem
_hx_classes["nat.systems.KeyShortcutSystem"] = nat_systems_KeyShortcutSystem


class nat_systems_MediaWikiSystem(nat_System):
    _hx_class_name = "nat.systems.MediaWikiSystem"
    _hx_is_interface = "False"
    __slots__ = ("mediaWikiUrl", "maxLag")
    _hx_fields = ["mediaWikiUrl", "maxLag"]
    _hx_methods = ["query", "queryImageTitles", "queryImageUrls"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry", "headers"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self,name,mediaWikiUrl,canProcess,processor,maxLag):
        self.mediaWikiUrl = mediaWikiUrl
        self.maxLag = maxLag
        super().__init__(name,canProcess,processor)

    def query(self,params):
        text = tink_json_Parser2()
        inputLines = [tink_json_Writer2().write(params), tink_json_Writer0().write(self.mediaWikiUrl), tink_json_Writer0().write((Std.string(self.maxLag) if (kiss_Prelude.truthy(self.maxLag)) else "1")), tink_json_Writer3().write(nat_systems_MediaWikiSystem.headers)]
        if (inputLines is None):
            inputLines = []
        data = python_lib_Json.loads(text.parse(kiss_Prelude.assertProcess("bin/_kissScript0-env/bin/python",([haxe_io_Path.join(["bin/_kissScript0", "ExternMain.py"])] + inputLines))),**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
        if kiss_Prelude.truthy(data.query):
            return haxe_ds_Option.Some(data.query)
        else:
            return haxe_ds_Option._hx_None

    def queryImageTitles(self,pageTitles):
        _g = haxe_ds_StringMap()
        _g.h["titles"] = pageTitles
        _g.h["prop"] = ["images"]
        _23xWkxCUYSqeDsz2MxRjCw = self.query(_g)
        if kiss_Prelude.truthy(_23xWkxCUYSqeDsz2MxRjCw):
            _gxpWRqpzoyB6UfGqPcKioT = _23xWkxCUYSqeDsz2MxRjCw
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_gxpWRqpzoyB6UfGqPcKioT)):
                return []
            elif (_23xWkxCUYSqeDsz2MxRjCw.index == 0):
                queryResult = _23xWkxCUYSqeDsz2MxRjCw.params[0]
                _g = []
                access = queryResult.pages
                _g_access = access
                _g_keys = python_Boot.fields(access)
                _g_index = 0
                while (_g_index < len(_g_keys)):
                    key = _g_index
                    _g_index = (_g_index + 1)
                    key1 = (_g_keys[key] if key >= 0 and key < len(_g_keys) else None)
                    _g_value = Reflect.field(_g_access,key1)
                    _g_key = key1
                    _id = _g_key
                    page = _g_value
                    if kiss_Prelude.truthy(Reflect.field(page,"images")):
                        def _hx_local_0(image):
                            return image.title
                        x = Reflect.field(Reflect.field(page,"images"),"map")(_hx_local_0)
                        _g.append(x)
                    else:
                        _g.append([])
                _g1 = []
                e = HxOverrides.iterator(_g)
                while e.hasNext():
                    e1 = e.next()
                    x = HxOverrides.iterator(e1)
                    while x.hasNext():
                        x1 = x.next()
                        _g1.append(x1)
                return _g1
            else:
                return []
        else:
            return []

    def queryImageUrls(self,imageTitles):
        _g = haxe_ds_StringMap()
        _g.h["titles"] = imageTitles
        _g.h["prop"] = ["imageinfo"]
        _g.h["iiprop"] = ["url"]
        _74tdmsskB3wQs1wefB95E = self.query(_g)
        if kiss_Prelude.truthy(_74tdmsskB3wQs1wefB95E):
            _81yF2g8Guh9iacBnYXkyr9 = _74tdmsskB3wQs1wefB95E
            if kiss_Prelude.truthy(kiss_Prelude.isNull(_81yF2g8Guh9iacBnYXkyr9)):
                return []
            elif (_74tdmsskB3wQs1wefB95E.index == 0):
                queryResult = _74tdmsskB3wQs1wefB95E.params[0]
                _g = []
                access = queryResult.pages
                _g_access = access
                _g_keys = python_Boot.fields(access)
                _g_index = 0
                while (_g_index < len(_g_keys)):
                    key = _g_index
                    _g_index = (_g_index + 1)
                    key1 = (_g_keys[key] if key >= 0 and key < len(_g_keys) else None)
                    _g_value = Reflect.field(_g_access,key1)
                    _g_key = key1
                    _id = _g_key
                    image = _g_value
                    if kiss_Prelude.truthy(Reflect.field(image,"imageinfo")):
                        def _hx_local_0(image):
                            return image.url
                        x = Reflect.field(Reflect.field(image,"imageinfo"),"map")(_hx_local_0)
                        _g.append(x)
                    else:
                        _g.append([])
                _g1 = []
                e = HxOverrides.iterator(_g)
                while e.hasNext():
                    e1 = e.next()
                    x = HxOverrides.iterator(e1)
                    while x.hasNext():
                        x1 = x.next()
                        _g1.append(x1)
                return _g1
            else:
                return []
        else:
            return []

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_MediaWikiSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_MediaWikiSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_MediaWikiSystem.tagList(e),nat_systems_MediaWikiSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _ba6JnYHCBTVnDiZhKTQDN2 = None
        archive.refreshEntry(e)
        return _ba6JnYHCBTVnDiZhKTQDN2

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _snkJJzvpTMCRsPrrdiXfDq = None
        archive.refreshEntry(e)
        return _snkJJzvpTMCRsPrrdiXfDq

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _4XvuyYHucQ3oKdJjHdqgFY = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _4XvuyYHucQ3oKdJjHdqgFY
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_MediaWikiSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _8if7hFKDg3zMRv1iyPyrJ3 = e1
            archive1.refreshEntry(e1)
            return _8if7hFKDg3zMRv1iyPyrJ3

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _3Xv9dKbYnAttmdpFuqfiHo = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _3Xv9dKbYnAttmdpFuqfiHo
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _gwhdeJ3HnU42GkbrsUjrGa = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_MediaWikiSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _25GGzxp9kjZ7pLpEtpinVp = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _fhHguu8AeRN4LEmkUYyJZ6 = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_MediaWikiSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _rymB8TTsGZPf5A6EDzrcNZ = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_MediaWikiSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_MediaWikiSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _5ruSjVFoHXi8mfe98ZvCd3 = e1
        archive1.refreshEntry(e1)
        return _5ruSjVFoHXi8mfe98ZvCd3

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_MediaWikiSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _nf96oJ3b1makXnmT2w8Prd = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_MediaWikiSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_MediaWikiSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _mczpvxBcTzRA75TCdG37Lq = e1
        archive1.refreshEntry(e1)
        return _mczpvxBcTzRA75TCdG37Lq

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _8xmWuk1VwdQ8ZEWWSfJJoS = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_8xmWuk1VwdQ8ZEWWSfJJoS):
            _sN5ophofiLwsMckoD65Fnu = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _sN5ophofiLwsMckoD65Fnu1 = Reflect.callMethod(None,_sN5ophofiLwsMckoD65Fnu,_g)
            return _sN5ophofiLwsMckoD65Fnu1
        else:
            return _8xmWuk1VwdQ8ZEWWSfJJoS

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.mediaWikiUrl = None
        _hx_o.maxLag = None
nat_systems_MediaWikiSystem._hx_class = nat_systems_MediaWikiSystem
_hx_classes["nat.systems.MediaWikiSystem"] = nat_systems_MediaWikiSystem


class nat_systems_NameSystem(nat_System):
    _hx_class_name = "nat.systems.NameSystem"
    _hx_is_interface = "False"
    __slots__ = ("entriesByName",)
    _hx_fields = ["entriesByName"]
    _hx_methods = ["getEntries"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self):
        self.entriesByName = haxe_ds_StringMap()
        _gthis = self
        def _hx_local_0(archive,e):
            return ("Name" in e.components.h)
        def _hx_local_1(archive,e,ui = None):
            componentData = e.components.h.get("Name",None)
            name = tink_json_Parser2().parse(componentData)
            this1 = _gthis.entriesByName
            if kiss_Prelude.truthy((name.lower() in this1.h)):
                this1 = _gthis.entriesByName
                key = name.lower()
                _this = this1.h.get(key,None)
                _this.append(e)
            else:
                this1 = _gthis.entriesByName
                k = name.lower()
                v = [e]
                this1.h[k] = v
            return None
        super().__init__("NameSystem",_hx_local_0,_hx_local_1)

    def getEntries(self,name):
        this1 = self.entriesByName
        key = HxOverrides.toLowerCase(name)
        entries = this1.h.get(key,None)
        if kiss_Prelude.truthy(entries):
            return entries
        else:
            return []

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_NameSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_NameSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_NameSystem.tagList(e),nat_systems_NameSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _javYJH2y4VicZ4FoK6JAZ7 = None
        archive.refreshEntry(e)
        return _javYJH2y4VicZ4FoK6JAZ7

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _cduJZ8ZKEiUpxioB3L3yWE = None
        archive.refreshEntry(e)
        return _cduJZ8ZKEiUpxioB3L3yWE

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _uDsrRD3db76gAAN5hQVPFS = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _uDsrRD3db76gAAN5hQVPFS
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_NameSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _wRSLJXh8NzVsrRJwgKqJBk = e1
            archive1.refreshEntry(e1)
            return _wRSLJXh8NzVsrRJwgKqJBk

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _cCqpeYAKVgxXZA9xi5MVhJ = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _cCqpeYAKVgxXZA9xi5MVhJ
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _7KCLKC1Cgk1fi8QVhdmUFi = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_NameSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _kusi5Uep2DXpTT6PPt3fGu = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _2enhb24teSLee2GQHHkHGw = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_NameSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _axDq3nzVztibC689ubkBoq = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_NameSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_NameSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _3FB3rTC6xHhGQetwjb3aFz = e1
        archive1.refreshEntry(e1)
        return _3FB3rTC6xHhGQetwjb3aFz

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_NameSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _dYQybKib8jLbHyKbopiK8t = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_NameSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_NameSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _9oFZiGTpzfajTXhhiQBHa = e1
        archive1.refreshEntry(e1)
        return _9oFZiGTpzfajTXhhiQBHa

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _wdnm3VC2Xn8TGC73s94TUS = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_wdnm3VC2Xn8TGC73s94TUS):
            _pKdEvp47vMYxSUtsuKpXrP = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _pKdEvp47vMYxSUtsuKpXrP1 = Reflect.callMethod(None,_pKdEvp47vMYxSUtsuKpXrP,_g)
            return _pKdEvp47vMYxSUtsuKpXrP1
        else:
            return _wdnm3VC2Xn8TGC73s94TUS

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.entriesByName = None
nat_systems_NameSystem._hx_class = nat_systems_NameSystem
_hx_classes["nat.systems.NameSystem"] = nat_systems_NameSystem


class nat_systems_PlaygroundSystem(nat_System):
    _hx_class_name = "nat.systems.PlaygroundSystem"
    _hx_is_interface = "False"
    __slots__ = ("_playgroundKey", "playgroundDefaultTags", "playgroundBGColors", "entryReps", "processor", "ui", "createEntryRep", "connectionProcessor", "setupProcess")
    _hx_fields = ["_playgroundKey", "playgroundDefaultTags", "playgroundBGColors", "entryReps", "processor", "ui", "createEntryRep", "connectionProcessor", "setupProcess"]
    _hx_methods = ["currentDefaultTags", "getPlaygroundKey", "switchPlaygroundKey", "clear", "process", "savePosition", "defaultPosition", "getSelectedReps"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self,name,ui,canProcess,createEntryRep,connectionProcessor,onRemoveEntry):
        self.connectionProcessor = None
        self.createEntryRep = None
        self.ui = None
        self.processor = None
        self.setupProcess = False
        self.entryReps = haxe_ds_StringMap()
        self.playgroundBGColors = haxe_ds_StringMap()
        self.playgroundDefaultTags = haxe_ds_StringMap()
        self._playgroundKey = ""
        _gthis = self
        def _hx_local_0(archive,e,pos,ui = None):
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((e.id in _gthis.entryReps.h)))):
                eRep = createEntryRep(archive,e,pos,ui)
                _gthis.entryReps.h[e.id] = eRep
                return eRep
            else:
                return None
        self.processor = _hx_local_0
        self.ui = ui
        self.createEntryRep = createEntryRep
        self.connectionProcessor = connectionProcessor
        def _hx_local_1(archive,e):
            _6Q5NAn4BpKfbxmztxDV8wC = nat_systems_PlaygroundSystem.tagsMatch(e,"playground")
            if kiss_Prelude.truthy(_6Q5NAn4BpKfbxmztxDV8wC):
                return _6Q5NAn4BpKfbxmztxDV8wC
            else:
                _42QY3twybpaCZEytUjRfC = nat_systems_PlaygroundSystem.tagsMatch(e,"!(or done hidden)")
                _jmzJ1yDwmJjoHQXqQfm5ce = None
                if kiss_Prelude.truthy(_42QY3twybpaCZEytUjRfC):
                    _r6XfHeF5JMqTRhnFkKXtpD = canProcess(archive,e)
                    _jmzJ1yDwmJjoHQXqQfm5ce = _r6XfHeF5JMqTRhnFkKXtpD
                else:
                    _jmzJ1yDwmJjoHQXqQfm5ce = _42QY3twybpaCZEytUjRfC
                return _jmzJ1yDwmJjoHQXqQfm5ce
        def _hx_local_3(archive,e,ui = None):
            if kiss_Prelude.truthy(_gthis.setupProcess):
                if kiss_Prelude.truthy(nat_systems_PlaygroundSystem.componentsAndTagsMatch(e,"(and playground Name)")):
                    componentData = e.components.h.get("Name",None)
                    name = tink_json_Parser2().parse(componentData)
                    if kiss_Prelude.truthy(("CatsMatchExp" in e.components.h)):
                        def _hx_local_2(p):
                            componentData = e.components.h.get("CatsMatchExp",None)
                            tmp = tink_json_Parser2().parse(componentData)
                            Reflect.setField(Reflect.field(p,name),"catsMatch",tmp)
                        archive.changePlaygrounds(_hx_local_2)
                    else:
                        archive1 = archive
                        e1 = e
                        c = Reflect.field(Reflect.field(archive1.playgrounds,name),"catsMatch")
                        ui1 = None
                        msg = kiss_Prelude.add("adding ",c," as ","CatsMatchExp"," for ",e1.id)
                        if kiss_Prelude.truthy(ui1):
                            ui1.displayMessage(msg)
                        nat_systems_PlaygroundSystem._log(msg)
                        this1 = e1.components
                        v = tink_json_Writer0().write(c)
                        this1.h["CatsMatchExp"] = v
                        _vgPM5gyBkwoPW1DKYL6Ac1 = e1
                        archive1.refreshEntry(e1)
                    this1 = _gthis.playgroundBGColors
                    e1 = e
                    v = None
                    if kiss_Prelude.truthy(("ColorF" in e1.components.h)):
                        componentData = e1.components.h.get("ColorF",None)
                        v = tink_json_Parser10().parse(componentData)
                    else:
                        v = _hx_AnonObject({'r': 0.0, 'g': 0.0, 'b': 0.0, 'a': 1.0})
                    this1.h[name] = v
                    this1 = _gthis.playgroundDefaultTags
                    e1 = e
                    v = None
                    if kiss_Prelude.truthy(("TagList" in e1.components.h)):
                        componentData = e1.components.h.get("TagList",None)
                        v = tink_json_Parser11().parse(componentData)
                    else:
                        v = []
                    this1.h[name] = v
                    return v
                else:
                    return None
            elif kiss_Prelude.truthy(nat_systems_PlaygroundSystem.componentsAndTagsMatch(e,Reflect.field(Reflect.field(archive.playgrounds,_gthis._playgroundKey),"catsMatch"))):
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(("Positions" in e.components.h)))):
                    archive1 = archive
                    e1 = e
                    c = haxe_ds_StringMap()
                    ui1 = None
                    msg = kiss_Prelude.add("adding ",c," as ","Positions"," for ",e1.id)
                    if kiss_Prelude.truthy(ui1):
                        ui1.displayMessage(msg)
                    nat_systems_PlaygroundSystem._log(msg)
                    this1 = e1.components
                    v = tink_json_Writer8().write(c)
                    this1.h["Positions"] = v
                    _rVw35MUYPMjcNgapXb27Lf = e1
                    archive1.refreshEntry(e1)
                componentData = e.components.h.get("Positions",None)
                positions = tink_json_Parser7().parse(componentData)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy((_gthis._playgroundKey in positions.h)))):
                    componentData = e.components.h.get("Positions",None)
                    positions = tink_json_Parser7().parse(componentData)
                    k = _gthis._playgroundKey
                    v = _gthis.defaultPosition(e)
                    positions.h[k] = v
                    _apiTrdaqsf3SLntgp5A318 = v
                    this1 = e.components
                    v = tink_json_Writer8().write(positions)
                    this1.h["Positions"] = v
                    archive.refreshEntry(e)
                componentData = e.components.h.get("Positions",None)
                pos = tink_json_Parser7().parse(componentData).h.get(_gthis._playgroundKey,None)
                return _gthis.processor(archive,e,pos,ui)
            else:
                return None
        super().__init__(name,_hx_local_1,_hx_local_3)
        def _hx_local_4(archive,e,ui = None):
            onRemoveEntry(archive,e,ui)
            return _gthis.entryReps.remove(e.id)
        self.onRemoveEntry = _hx_local_4

    def currentDefaultTags(self):
        _wanHcxW1aa9A5q4FC4s2LU = self.playgroundDefaultTags.h.get(self._playgroundKey,None)
        if kiss_Prelude.truthy(_wanHcxW1aa9A5q4FC4s2LU):
            return _wanHcxW1aa9A5q4FC4s2LU
        else:
            _uu9xWM1ZK2P5GNyeKi28u5 = list()
            return _uu9xWM1ZK2P5GNyeKi28u5

    def getPlaygroundKey(self):
        return self._playgroundKey

    def switchPlaygroundKey(self,key):
        _gthis = self
        self._playgroundKey = key
        _xs7PzrTzEvQUPjguFz2apQ = self.playgroundBGColors.h.get(self._playgroundKey,None)
        tmp = None
        if kiss_Prelude.truthy(_xs7PzrTzEvQUPjguFz2apQ):
            tmp = _xs7PzrTzEvQUPjguFz2apQ
        else:
            _86f4CuMVMHzKV49QUQRsAX = _hx_AnonObject({'r': 0.0, 'g': 0.0, 'b': 0.0, 'a': 1.0})
            tmp = _86f4CuMVMHzKV49QUQRsAX
        self.clear(tmp)
        def _hx_local_0(e):
            if kiss_Prelude.truthy(_gthis.currentDefaultTags()):
                nat_systems_PlaygroundSystem.addTags(_gthis.ui.controller.archive,e,_gthis.currentDefaultTags())
            _dZQvGJLKMfe2VUCFNQRsRB = _gthis.ui.cursorPosition()
            if kiss_Prelude.truthy(_dZQvGJLKMfe2VUCFNQRsRB):
                _unRF6WMTYDrZPxunk2EeQQ = _dZQvGJLKMfe2VUCFNQRsRB
                if kiss_Prelude.truthy(kiss_Prelude.isNull(_unRF6WMTYDrZPxunk2EeQQ)):
                    return None
                elif (_dZQvGJLKMfe2VUCFNQRsRB.index == 0):
                    position = _dZQvGJLKMfe2VUCFNQRsRB.params[0]
                    archive = _gthis.ui.controller.archive
                    e1 = e
                    _g = haxe_ds_StringMap()
                    _g.h[_gthis._playgroundKey] = position
                    c = _g
                    ui = None
                    msg = kiss_Prelude.add("adding ",c," as ","Positions"," for ",e1.id)
                    if kiss_Prelude.truthy(ui):
                        ui.displayMessage(msg)
                    nat_systems_PlaygroundSystem._log(msg)
                    this1 = e1.components
                    v = tink_json_Writer8().write(c)
                    this1.h["Positions"] = v
                    _8LgNikgmdaqR1dXeLvqLJk = e1
                    archive.refreshEntry(e1)
                    return _8LgNikgmdaqR1dXeLvqLJk
                else:
                    return None
            else:
                return None
        self.ui.controller.archive.defaultInitializer = _hx_local_0
        self.process(self.ui.controller.archive,self.ui)

    def clear(self,color):
        raise haxe_Exception.thrown("(PlaygroundSystem.clear <color>) not implemented")

    def process(self,archive,ui = None):
        if kiss_Prelude.truthy(self.setupProcess):
            super().process(archive,ui)
            self.setupProcess = False
            return
        if kiss_Prelude.truthy(self._playgroundKey):
            super().process(archive,ui)
            e = self.entries.iterator()
            while e.hasNext():
                e1 = e.next()
                if kiss_Prelude.truthy(("Positions" in e1.components.h)):
                    componentData = e1.components.h.get("Positions",None)
                    pos = tink_json_Parser7().parse(componentData).h.get(self._playgroundKey,None)
                    e2 = e1
                    this1 = None
                    if kiss_Prelude.truthy(("Connections" in e2.components.h)):
                        componentData1 = e2.components.h.get("Connections",None)
                        this1 = tink_json_Parser8().parse(componentData1)
                    else:
                        this1 = haxe_ds_StringMap()
                    _hx_map = this1
                    _g_map = _hx_map
                    _g_keys = _hx_map.keys()
                    while _g_keys.hasNext():
                        key = _g_keys.next()
                        _g_value = _g_map.get(key)
                        _g_key = key
                        e2id = _g_key
                        _ = _g_value
                        _dfrAxaXEMDEaawDH9ejqrM = archive.entries.h.get(e2id,None)
                        if kiss_Prelude.truthy(_dfrAxaXEMDEaawDH9ejqrM):
                            _wAAt7Mb2FVMkkQQK4RA9Ce = _dfrAxaXEMDEaawDH9ejqrM
                            if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_wAAt7Mb2FVMkkQQK4RA9Ce))):
                                e21 = _dfrAxaXEMDEaawDH9ejqrM
                                componentData2 = e21.components.h.get("Positions",None)
                                _8KVpnQSWovEjzeQVWdUqSZ = tink_json_Parser7().parse(componentData2).h.get(self._playgroundKey,None)
                                if kiss_Prelude.truthy(_8KVpnQSWovEjzeQVWdUqSZ):
                                    _pwJH3KfyrVNtc8AcURSayK = _8KVpnQSWovEjzeQVWdUqSZ
                                    if (not kiss_Prelude.truthy(kiss_Prelude.isNull(_pwJH3KfyrVNtc8AcURSayK))):
                                        pos2 = _8KVpnQSWovEjzeQVWdUqSZ
                                        self.connectionProcessor(archive,e1,pos,e21,pos2,ui)

    def savePosition(self,e,x,y,z = None):
        componentData = e.components.h.get("Positions",None)
        positions = tink_json_Parser7().parse(componentData)
        oldPos = positions.h.get(self._playgroundKey,None)
        k = self._playgroundKey
        _8SNTJBh1UGZcMTyr4iMs76 = z
        v = None
        if kiss_Prelude.truthy(_8SNTJBh1UGZcMTyr4iMs76):
            v = _8SNTJBh1UGZcMTyr4iMs76
        else:
            _5q1J6qEy5JpQwYn2grbXzF = oldPos.z
            v = _5q1J6qEy5JpQwYn2grbXzF
        v1 = _hx_AnonObject({'z': v, 'x': x, 'y': y})
        positions.h[k] = v1
        _5mAJd4R7KaQ2vAZ6Kwvzym = v1
        this1 = e.components
        v = tink_json_Writer8().write(positions)
        this1.h["Positions"] = v
        self.ui.controller.archive.refreshEntry(e)
        return _5mAJd4R7KaQ2vAZ6Kwvzym

    def defaultPosition(self,e):
        return _hx_AnonObject({'x': 0.0, 'y': 0.0, 'z': 0.0})

    def getSelectedReps(self):
        _g = []
        _g1 = 0
        _g2 = self.ui.controller.getSelectedEntries()
        while (_g1 < len(_g2)):
            e = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            x = self.entryReps.h.get(e.id,None)
            _g.append(x)
        return kiss_Prelude.filter(_g)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_PlaygroundSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_PlaygroundSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_PlaygroundSystem.tagList(e),nat_systems_PlaygroundSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _g9J7ZVoPFXcj1X2HcyQLBG = None
        archive.refreshEntry(e)
        return _g9J7ZVoPFXcj1X2HcyQLBG

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _vb76DgZku1HZsV3idpSNn6 = None
        archive.refreshEntry(e)
        return _vb76DgZku1HZsV3idpSNn6

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _4Ej4A2kaJp6gMC35hGywo7 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _4Ej4A2kaJp6gMC35hGywo7
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_PlaygroundSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _ipD9SSg4kYoyq89k6qywzw = e1
            archive1.refreshEntry(e1)
            return _ipD9SSg4kYoyq89k6qywzw

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _gBYCzgGDWb2Yekhg75HgY6 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _gBYCzgGDWb2Yekhg75HgY6
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _ebSxvfnLWPkuDDhqGtXpK1 = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_PlaygroundSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _vnoQf1qTzP4DcLie18H5Mb = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _gVES1A9xDU4Mkc4uf1rrBF = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_PlaygroundSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _2CJciPphmwdiH4CRX6W9gE = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_PlaygroundSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_PlaygroundSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _oa6GPW92TLBmYTUSmMLgPw = e1
        archive1.refreshEntry(e1)
        return _oa6GPW92TLBmYTUSmMLgPw

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_PlaygroundSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _fuy4kGd4wyokgUep6n2nVE = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_PlaygroundSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_PlaygroundSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _fexYNTgBzJrqoJU27U7tJB = e1
        archive1.refreshEntry(e1)
        return _fexYNTgBzJrqoJU27U7tJB

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _eLKGSwihE4fpxMXDwPcX3 = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_eLKGSwihE4fpxMXDwPcX3):
            _i7aXrVurtd4JvnA1X52og2 = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _i7aXrVurtd4JvnA1X52og21 = Reflect.callMethod(None,_i7aXrVurtd4JvnA1X52og2,_g)
            return _i7aXrVurtd4JvnA1X52og21
        else:
            return _eLKGSwihE4fpxMXDwPcX3

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._playgroundKey = None
        _hx_o.playgroundDefaultTags = None
        _hx_o.playgroundBGColors = None
        _hx_o.entryReps = None
        _hx_o.processor = None
        _hx_o.ui = None
        _hx_o.createEntryRep = None
        _hx_o.connectionProcessor = None
        _hx_o.setupProcess = None
nat_systems_PlaygroundSystem._hx_class = nat_systems_PlaygroundSystem
_hx_classes["nat.systems.PlaygroundSystem"] = nat_systems_PlaygroundSystem


class nat_systems_RemarkableAPISystem(nat_System):
    _hx_class_name = "nat.systems.RemarkableAPISystem"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self):
        def _hx_local_0(archive,e):
            return False
        def _hx_local_1(archive,e,ui = None):
            return None
        super().__init__("RemarkableAPISystem",_hx_local_0,_hx_local_1)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_RemarkableAPISystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_RemarkableAPISystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_RemarkableAPISystem.tagList(e),nat_systems_RemarkableAPISystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _6bM3j2iFbtH2e5GKPNF5fc = None
        archive.refreshEntry(e)
        return _6bM3j2iFbtH2e5GKPNF5fc

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _p6r3RR3USNjo8uW3mGdJwc = None
        archive.refreshEntry(e)
        return _p6r3RR3USNjo8uW3mGdJwc

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _bxbnVrRMUW5Ujw7QUKdMzq = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _bxbnVrRMUW5Ujw7QUKdMzq
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_RemarkableAPISystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _cGTgYLhf4SziEVSkSTCyiL = e1
            archive1.refreshEntry(e1)
            return _cGTgYLhf4SziEVSkSTCyiL

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _wRGbcUcaT471z7X4segzVr = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _wRGbcUcaT471z7X4segzVr
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _5yS5vEghvgkUFWPLcTvBGQ = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_RemarkableAPISystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _Zd2h71b9XTp1eRaVZoFVH = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _mcnmgV1JxSq9SjjCMoHBms = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_RemarkableAPISystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _dwV2zUA3smntjmVihfwkKB = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_RemarkableAPISystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_RemarkableAPISystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _wnmWcEcsfLwXycM5TcfSc7 = e1
        archive1.refreshEntry(e1)
        return _wnmWcEcsfLwXycM5TcfSc7

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_RemarkableAPISystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _txAueWNM2hfnNBazNpZase = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_RemarkableAPISystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_RemarkableAPISystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _xi1ewhxFq61J4SHzoJXfqr = e1
        archive1.refreshEntry(e1)
        return _xi1ewhxFq61J4SHzoJXfqr

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _mft67FJjXefANQPhdMdaQo = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_mft67FJjXefANQPhdMdaQo):
            _oYPo4VKBVZMudmV6G6hXxj = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _oYPo4VKBVZMudmV6G6hXxj1 = Reflect.callMethod(None,_oYPo4VKBVZMudmV6G6hXxj,_g)
            return _oYPo4VKBVZMudmV6G6hXxj1
        else:
            return _mft67FJjXefANQPhdMdaQo
nat_systems_RemarkableAPISystem._hx_class = nat_systems_RemarkableAPISystem
_hx_classes["nat.systems.RemarkableAPISystem"] = nat_systems_RemarkableAPISystem


class nat_systems_TagSystem(nat_System):
    _hx_class_name = "nat.systems.TagSystem"
    _hx_is_interface = "False"
    __slots__ = ("tagFilterString",)
    _hx_fields = ["tagFilterString"]
    _hx_methods = []
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_System


    def __init__(self,name,tagFilterString,processor):
        self.tagFilterString = tagFilterString
        def _hx_local_0(archive,e):
            return nat_systems_TagSystem.tagsMatch(e,tagFilterString)
        super().__init__(name,_hx_local_0,processor)

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_TagSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_TagSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_TagSystem.tagList(e),nat_systems_TagSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _9TR88UBANWoZGSxBfxGkv4 = None
        archive.refreshEntry(e)
        return _9TR88UBANWoZGSxBfxGkv4

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _dvhFaEycCRNY2BTBnmtE4F = None
        archive.refreshEntry(e)
        return _dvhFaEycCRNY2BTBnmtE4F

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _x2Wr5Lk8zXebFrsK1Ni2C4 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _x2Wr5Lk8zXebFrsK1Ni2C4
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_TagSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _fs6zj13Vh2DL6SQQTcuvbB = e1
            archive1.refreshEntry(e1)
            return _fs6zj13Vh2DL6SQQTcuvbB

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _nyiF5BBDGriMqJuUenVbZW = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _nyiF5BBDGriMqJuUenVbZW
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _jearhmH3wA7tCJa31HDbpD = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_TagSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _5ZbparTgBTin1Qr8171eeZ = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _tz495XWF9aefSHapEa4G9f = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_TagSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _3AohPqtwxWqrZYT3nTgc85 = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_TagSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_TagSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _o7YvZ4ugccEXAY7RuzoQUw = e1
        archive1.refreshEntry(e1)
        return _o7YvZ4ugccEXAY7RuzoQUw

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_TagSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _pzc4pa5bbs8ChouyS5BmSQ = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_TagSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_TagSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _9CfrVJZG6bPPsdrHpmEbjS = e1
        archive1.refreshEntry(e1)
        return _9CfrVJZG6bPPsdrHpmEbjS

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _3oJnWkRrASqM6vVoBq3ir2 = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_3oJnWkRrASqM6vVoBq3ir2):
            _wvG64LntiMFR874EZgToXJ = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _wvG64LntiMFR874EZgToXJ1 = Reflect.callMethod(None,_wvG64LntiMFR874EZgToXJ,_g)
            return _wvG64LntiMFR874EZgToXJ1
        else:
            return _3oJnWkRrASqM6vVoBq3ir2

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.tagFilterString = None
nat_systems_TagSystem._hx_class = nat_systems_TagSystem
_hx_classes["nat.systems.TagSystem"] = nat_systems_TagSystem


class nat_systems_WikipediaImageSystem(nat_systems_MediaWikiSystem):
    _hx_class_name = "nat.systems.WikipediaImageSystem"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["scrapeForImages"]
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry"]
    _hx_interfaces = []
    _hx_super = nat_systems_MediaWikiSystem


    def __init__(self):
        def _hx_local_0(archive,e):
            return nat_systems_WikipediaImageSystem.tagsMatch(e,"(and media !wikipediaProcessed)")
        super().__init__("WikipediaImageSystem","https://en.wikipedia.org/w/api.php",_hx_local_0,self.scrapeForImages,1)

    def scrapeForImages(self,archive,e,ui = None):
        componentData = e.components.h.get("Name",None)
        title = tink_json_Parser2().parse(componentData)
        wikipediaImageUrls = self.queryImageUrls(self.queryImageTitles([title]))
        _g = []
        _g1 = 0
        while (_g1 < len(wikipediaImageUrls)):
            url = (wikipediaImageUrls[_g1] if _g1 >= 0 and _g1 < len(wikipediaImageUrls) else None)
            _g1 = (_g1 + 1)
            filePath = kiss_Prelude.joinPath(archive.archiveDir,kiss_Prelude.print(StringTools.replace(python_lib_urllib_Parse.unquote(haxe_io_Path.withoutDirectory(url)),"\"","%22"),"(.replace (.urlDecode (url.withoutDirectory)) \"\"\" \"%22\")"))
            ui1 = ui
            msg = kiss_Prelude.add("Downloading ",Std.string(title)," image: ",Std.string(url),"")
            if kiss_Prelude.truthy(ui1):
                ui1.displayMessage(msg)
            nat_systems_WikipediaImageSystem._log(msg)
            kiss_Prelude.assertProcess("curl",["--output", filePath, url])
            _g.append(filePath)
        nat_systems_WikipediaImageSystem.addFiles(archive,e,_g)
        archive1 = archive
        e1 = e
        ui = None
        msg = kiss_Prelude.add("removing ","Images"," component from ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        e1.components.remove("Images")
        _9tVozZZWvGxnMqWxoh6iVn = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        ui = None
        msg = kiss_Prelude.add("removing ","Images2"," component from ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        e1.components.remove("Images2")
        _vX8a6GysNZ8pK8KdWVC7WG = e1
        archive1.refreshEntry(e1)
        return nat_systems_WikipediaImageSystem.addTags(archive,e,["wikipediaProcessed"])

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,nat_systems_WikipediaImageSystem.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,nat_systems_WikipediaImageSystem.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(nat_systems_WikipediaImageSystem.tagList(e),nat_systems_WikipediaImageSystem.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _8HEGZNqGFmc8646y1Un5yS = None
        archive.refreshEntry(e)
        return _8HEGZNqGFmc8646y1Un5yS

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _gvRuVhNhtTPbto3GB6q843 = None
        archive.refreshEntry(e)
        return _gvRuVhNhtTPbto3GB6q843

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _kxSHTkqtuXVpim9s7qvKQ8 = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _kxSHTkqtuXVpim9s7qvKQ8
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_WikipediaImageSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _gehEEvuYmkPP7TvNW7Nrxx = e1
            archive1.refreshEntry(e1)
            return _gehEEvuYmkPP7TvNW7Nrxx

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _cTRfxJ4Mscg9Jo6JgcCamN = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _cTRfxJ4Mscg9Jo6JgcCamN
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _ninVSzCbZ7TYfPPkupDvpd = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            nat_systems_WikipediaImageSystem._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _gcMZPgYxTtJXM833Spdt9D = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _5WKnFiA7em6qNk6RYbmL3d = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _jpSkbozSUALAH7UgC4CcZv = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_WikipediaImageSystem.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _sb2MCw4uy3fXANtzcEcSuV = e1
        archive1.refreshEntry(e1)
        return _sb2MCw4uy3fXANtzcEcSuV

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _fvm6WxzDvALNe1AyLaKoVB = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = nat_systems_WikipediaImageSystem.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        nat_systems_WikipediaImageSystem._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _oHFnzCRZdvAqVYCDp2tbgP = e1
        archive1.refreshEntry(e1)
        return _oHFnzCRZdvAqVYCDp2tbgP

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _vVWnCKjnxjiyC9RJLFEWdn = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_vVWnCKjnxjiyC9RJLFEWdn):
            _bbXnPs98myZk81y1kZatNM = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _bbXnPs98myZk81y1kZatNM1 = Reflect.callMethod(None,_bbXnPs98myZk81y1kZatNM,_g)
            return _bbXnPs98myZk81y1kZatNM1
        else:
            return _vVWnCKjnxjiyC9RJLFEWdn

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
nat_systems_WikipediaImageSystem._hx_class = nat_systems_WikipediaImageSystem
_hx_classes["nat.systems.WikipediaImageSystem"] = nat_systems_WikipediaImageSystem


class HxOverrides:
    _hx_class_name = "HxOverrides"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["iterator", "eq", "stringOrNull", "shift", "push", "map", "toLowerCase", "length", "rshift", "modf", "mod", "arrayGet", "arraySet", "mapKwArgs"]

    @staticmethod
    def iterator(x):
        if isinstance(x,list):
            return haxe_iterators_ArrayIterator(x)
        return x.iterator()

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def shift(x):
        if isinstance(x,list):
            _this = x
            return (None if ((len(_this) == 0)) else _this.pop(0))
        return x.shift()

    @staticmethod
    def push(x,e):
        if isinstance(x,list):
            _this = x
            _this.append(e)
            return len(_this)
        return x.push(e)

    @staticmethod
    def map(x,f):
        if isinstance(x,list):
            return list(map(f,x))
        return x.map(f)

    @staticmethod
    def toLowerCase(x):
        if isinstance(x,str):
            return x.lower()
        return x.toLowerCase()

    @staticmethod
    def length(x):
        if isinstance(x,str):
            return len(x)
        elif isinstance(x,list):
            return len(x)
        return x.length

    @staticmethod
    def rshift(val,n):
        return ((val % 0x100000000) >> n)

    @staticmethod
    def modf(a,b):
        if (b == 0.0):
            return float('nan')
        elif (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mod(a,b):
        if (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def arrayGet(a,i):
        if isinstance(a,list):
            x = a
            if ((i > -1) and ((i < len(x)))):
                return x[i]
            else:
                return None
        else:
            return a[i]

    @staticmethod
    def arraySet(a,i,v):
        if isinstance(a,list):
            x = a
            v1 = v
            l = len(x)
            while (l < i):
                x.append(None)
                l = (l + 1)
            if (l == i):
                x.append(v1)
            else:
                x[i] = v1
            return v1
        else:
            a[i] = v
            return v

    @staticmethod
    def mapKwArgs(a,v):
        a1 = _hx_AnonObject(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if a1._hx_hasattr(k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1
HxOverrides._hx_class = HxOverrides
_hx_classes["HxOverrides"] = HxOverrides


class sys_net_Socket:
    _hx_class_name = "sys.net.Socket"
    _hx_is_interface = "False"
    __slots__ = ("_hx___s", "input", "output")
    _hx_fields = ["__s", "input", "output"]
    _hx_methods = ["__initSocket", "fileno"]

    def __init__(self):
        self.output = None
        self.input = None
        self._hx___s = None
        self._hx___initSocket()
        self.input = sys_net__Socket_SocketInput(self._hx___s)
        self.output = sys_net__Socket_SocketOutput(self._hx___s)

    def _hx___initSocket(self):
        self._hx___s = python_lib_socket_Socket()

    def fileno(self):
        return self._hx___s.fileno()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._hx___s = None
        _hx_o.input = None
        _hx_o.output = None
sys_net_Socket._hx_class = sys_net_Socket
_hx_classes["sys.net.Socket"] = sys_net_Socket


class python_net_SslSocket(sys_net_Socket):
    _hx_class_name = "python.net.SslSocket"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = sys_net_Socket


    def __init__(self):
        super().__init__()
python_net_SslSocket._hx_class = python_net_SslSocket
_hx_classes["python.net.SslSocket"] = python_net_SslSocket


class sys_Http(haxe_http_HttpBase):
    _hx_class_name = "sys.Http"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_http_HttpBase

sys_Http._hx_class = sys_Http
_hx_classes["sys.Http"] = sys_Http


class sys_io_Process:
    _hx_class_name = "sys.io.Process"
    _hx_is_interface = "False"
    __slots__ = ()
sys_io_Process._hx_class = sys_io_Process
_hx_classes["sys.io.Process"] = sys_io_Process


class sys_net__Socket_SocketInput(haxe_io_Input):
    _hx_class_name = "sys.net._Socket.SocketInput"
    _hx_is_interface = "False"
    __slots__ = ("_hx___s",)
    _hx_fields = ["__s"]
    _hx_methods = ["readByte"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self._hx___s = s

    def readByte(self):
        r = None
        try:
            r = self._hx___s.recv(1,0)
        except BaseException as _g:
            None
            if Std.isOfType(haxe_Exception.caught(_g).unwrap(),BlockingIOError):
                raise haxe_Exception.thrown(haxe_io_Error.Blocked)
            else:
                raise _g
        if (len(r) == 0):
            raise haxe_Exception.thrown(haxe_io_Eof())
        return r[0]

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._hx___s = None
sys_net__Socket_SocketInput._hx_class = sys_net__Socket_SocketInput
_hx_classes["sys.net._Socket.SocketInput"] = sys_net__Socket_SocketInput


class sys_net__Socket_SocketOutput(haxe_io_Output):
    _hx_class_name = "sys.net._Socket.SocketOutput"
    _hx_is_interface = "False"
    __slots__ = ("_hx___s",)
    _hx_fields = ["__s"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,s):
        self._hx___s = s

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._hx___s = None
sys_net__Socket_SocketOutput._hx_class = sys_net__Socket_SocketOutput
_hx_classes["sys.net._Socket.SocketOutput"] = sys_net__Socket_SocketOutput


class sys_thread__EventLoop_RegularEvent:
    _hx_class_name = "sys.thread._EventLoop.RegularEvent"
    _hx_is_interface = "False"
    __slots__ = ("nextRunTime", "interval", "run", "next", "previous", "cancelled")
    _hx_fields = ["nextRunTime", "interval", "run", "next", "previous", "cancelled"]

    def __init__(self,run,nextRunTime,interval):
        self.previous = None
        self.next = None
        self.cancelled = False
        self.run = run
        self.nextRunTime = nextRunTime
        self.interval = interval

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.nextRunTime = None
        _hx_o.interval = None
        _hx_o.run = None
        _hx_o.next = None
        _hx_o.previous = None
        _hx_o.cancelled = None
sys_thread__EventLoop_RegularEvent._hx_class = sys_thread__EventLoop_RegularEvent
_hx_classes["sys.thread._EventLoop.RegularEvent"] = sys_thread__EventLoop_RegularEvent


class sys_thread_Lock:
    _hx_class_name = "sys.thread.Lock"
    _hx_is_interface = "False"
    __slots__ = ("semaphore",)
    _hx_fields = ["semaphore"]

    def __init__(self):
        self.semaphore = python_lib_threading_Semaphore(0)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.semaphore = None
sys_thread_Lock._hx_class = sys_thread_Lock
_hx_classes["sys.thread.Lock"] = sys_thread_Lock


class sys_thread_NoEventLoopException(haxe_Exception):
    _hx_class_name = "sys.thread.NoEventLoopException"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,msg = None,previous = None):
        if (msg is None):
            msg = "Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop."
        super().__init__(msg,previous)
sys_thread_NoEventLoopException._hx_class = sys_thread_NoEventLoopException
_hx_classes["sys.thread.NoEventLoopException"] = sys_thread_NoEventLoopException


class sys_thread__Thread_Thread_Impl_:
    _hx_class_name = "sys.thread._Thread.Thread_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["get_events", "processEvents"]
    events = None

    @staticmethod
    def get_events(this1):
        if (this1.events is None):
            raise sys_thread_NoEventLoopException()
        return this1.events

    @staticmethod
    def processEvents():
        sys_thread__Thread_HxThread.current().events.loop()
sys_thread__Thread_Thread_Impl_._hx_class = sys_thread__Thread_Thread_Impl_
_hx_classes["sys.thread._Thread.Thread_Impl_"] = sys_thread__Thread_Thread_Impl_


class test_DummyUI:
    _hx_class_name = "test.DummyUI"
    _hx_is_interface = "False"
    __slots__ = ("controller", "shortcutHandler")
    _hx_fields = ["controller", "shortcutHandler"]
    _hx_methods = ["enterText", "enterNumber", "chooseEntry", "chooseEntries", "chooseBetweenStrings", "handleChanges", "displayMessage", "reportError", "onSelectionChanged", "showPrefixMap", "hidePrefixMap", "cursorPosition", "choosePosition", "playgroundSystem"]
    _hx_interfaces = [nat_ArchiveUI]

    def __init__(self):
        self.shortcutHandler = None
        self.controller = None

    def enterText(self,prompt,resolve,maxLength):
        resolve("")

    def enterNumber(self,prompt,resolve,_hx_min,_hx_max,inStepsOf = None,allowNaN = None):
        resolve(_hx_min)

    def chooseEntry(self,prompt,archive,resolve):
        resolve(None)

    def chooseEntries(self,prompt,archive,resolve,_hx_min,_hx_max):
        resolve([])

    def chooseBetweenStrings(self,prompt,choices,resolve):
        resolve((choices[0] if 0 < len(choices) else None))

    def handleChanges(self,archive,changeSet):
        pass

    def displayMessage(self,message):
        pass

    def reportError(self,error):
        pass

    def onSelectionChanged(self,selectedEntries,lastSelectedEntries):
        pass

    def showPrefixMap(self,_hx_map):
        pass

    def hidePrefixMap(self):
        pass

    def cursorPosition(self):
        return haxe_ds_Option._hx_None

    def choosePosition(self,prompt,resolve):
        resolve(_hx_AnonObject({'x': 0, 'y': 0, 'z': 0}))

    def playgroundSystem(self):
        return None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.controller = None
        _hx_o.shortcutHandler = None
test_DummyUI._hx_class = test_DummyUI
_hx_classes["test.DummyUI"] = test_DummyUI


class test_TestMain:
    _hx_class_name = "test.TestMain"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        test__impl_TestMain_.main()
test_TestMain._hx_class = test_TestMain
_hx_classes["test.TestMain"] = test_TestMain


class test__impl_TestMain_:
    _hx_class_name = "test._impl.TestMain_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_log", "tagList", "componentList", "tagsMatch", "componentsMatch", "componentsAndTagsMatch", "addFiles", "removeFiles", "addTags", "removeTags", "getScale", "addConnections", "removeConnections", "colorIFromF", "colorFFromI", "addColorFRGBA", "addColorIRGBA", "isEntry", "main"]

    @staticmethod
    def _log(msg):
        return kiss_Prelude.print(msg)

    @staticmethod
    def tagList(e):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            t = tink_json_Parser1().parse(componentData)
            _g = []
            elem = t.keys()
            while elem.hasNext():
                elem1 = elem.next()
                _g.append(elem1)
            return _g
        else:
            return []

    @staticmethod
    def componentList(e):
        _g = []
        _hx_map = e.components
        _g_map = _hx_map
        _g_keys = _hx_map.keys()
        while _g_keys.hasNext():
            key = _g_keys.next()
            _g_value = _g_map.get(key)
            _g_key = key
            cType = _g_key
            cId = _g_value
            _g.append(cType)
        return _g

    @staticmethod
    def tagsMatch(e,tagsBoolExp):
        return nat_BoolExpInterp.eval(tagsBoolExp,test__impl_TestMain_.tagList(e))

    @staticmethod
    def componentsMatch(e,componentsBoolExp):
        return nat_BoolExpInterp.eval(componentsBoolExp,test__impl_TestMain_.componentList(e))

    @staticmethod
    def componentsAndTagsMatch(e,componentsAndTagsBoolExp):
        return nat_BoolExpInterp.eval(componentsAndTagsBoolExp,kiss_Prelude.concat(test__impl_TestMain_.tagList(e),test__impl_TestMain_.componentList(e)))

    @staticmethod
    def addFiles(archive,e,files,leaveOriginalCopy = None):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            pathWithoutDir = haxe_io_Path.withoutDirectory(file)
            if kiss_Prelude.truthy((not kiss_Prelude.truthy((not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(e.files,pathWithoutDir,None))))))):
                pathInArchive = kiss_Prelude.joinPath(archive.archiveDir,"files",pathWithoutDir)
                if kiss_Prelude.truthy((not kiss_Prelude.truthy(sys_FileSystem.exists(pathInArchive)))):
                    ((sys_io_File.copy if (kiss_Prelude.truthy(leaveOriginalCopy)) else sys_FileSystem.rename))(file,pathInArchive)
                _this = e.files
                _this.append(pathWithoutDir)
        _orzoPVufm8shkfWmXVCMBd = None
        archive.refreshEntry(e)
        return _orzoPVufm8shkfWmXVCMBd

    @staticmethod
    def removeFiles(archive,e,files):
        _g = 0
        while (_g < len(files)):
            file = (files[_g] if _g >= 0 and _g < len(files) else None)
            _g = (_g + 1)
            python_internal_ArrayImpl.remove(e.files,file)
        _6MJ6bJxXc4cZby686jRKsB = None
        archive.refreshEntry(e)
        return _6MJ6bJxXc4cZby686jRKsB

    @staticmethod
    def addTags(archive,e,tagsToAdd):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToAdd)):
                tag = (tagsToAdd[_g] if _g >= 0 and _g < len(tagsToAdd) else None)
                _g = (_g + 1)
                tags.h[tag] = 1
            _qyFUf6qF9N63CWYGjSeUPo = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _qyFUf6qF9N63CWYGjSeUPo
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(tagsToAdd)):
                tag = (tagsToAdd[_g1] if _g1 >= 0 and _g1 < len(tagsToAdd) else None)
                _g1 = (_g1 + 1)
                _g.h[tag] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Tags"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            test__impl_TestMain_._log(msg)
            this1 = e1.components
            v = tink_json_Writer4().write(c)
            this1.h["Tags"] = v
            _6b8wSoURyY2gWdSvjSAHg5 = e1
            archive1.refreshEntry(e1)
            return _6b8wSoURyY2gWdSvjSAHg5

    @staticmethod
    def removeTags(archive,e,tagsToRemove):
        if kiss_Prelude.truthy(("Tags" in e.components.h)):
            componentData = e.components.h.get("Tags",None)
            tags = tink_json_Parser1().parse(componentData)
            _g = 0
            while (_g < len(tagsToRemove)):
                tag = (tagsToRemove[_g] if _g >= 0 and _g < len(tagsToRemove) else None)
                _g = (_g + 1)
                tags.remove(tag)
            _biWFinA77fNCDDA85KJuvH = None
            this1 = e.components
            v = tink_json_Writer4().write(tags)
            this1.h["Tags"] = v
            archive.refreshEntry(e)
            return _biWFinA77fNCDDA85KJuvH
        else:
            return None

    @staticmethod
    def getScale(e):
        if kiss_Prelude.truthy(("Images2" in e.components.h)):
            componentData = e.components.h.get("Images2",None)
            i2 = tink_json_Parser9().parse(componentData)
            return python_internal_ArrayImpl._get(i2.imageScales, i2.pinnedImageIndex)
        elif kiss_Prelude.truthy(("Scale" in e.components.h)):
            componentData = e.components.h.get("Scale",None)
            return tink_json_Parser4().parse(componentData)
        else:
            return 1.0

    @staticmethod
    def addConnections(archive,e,entriesToConnect):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToConnect)):
                e2 = (entriesToConnect[_g] if _g >= 0 and _g < len(entriesToConnect) else None)
                _g = (_g + 1)
                conn.h[e2.id] = 1
            _tWjfYEhwDkxCBKMfkJeT1p = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        else:
            archive1 = archive
            e1 = e
            _g = haxe_ds_StringMap()
            _g1 = 0
            while (_g1 < len(entriesToConnect)):
                e2 = (entriesToConnect[_g1] if _g1 >= 0 and _g1 < len(entriesToConnect) else None)
                _g1 = (_g1 + 1)
                _g.h[e2.id] = 1
            c = _g
            ui = None
            msg = kiss_Prelude.add("adding ",c," as ","Connections"," for ",e1.id)
            if kiss_Prelude.truthy(ui):
                ui.displayMessage(msg)
            test__impl_TestMain_._log(msg)
            this1 = e1.components
            v = tink_json_Writer14().write(c)
            this1.h["Connections"] = v
            _sBiu1RkGK7CtyxwUonvu1k = e1
            archive1.refreshEntry(e1)
        return e

    @staticmethod
    def removeConnections(archive,e,entriesToRemove):
        if kiss_Prelude.truthy(("Connections" in e.components.h)):
            componentData = e.components.h.get("Connections",None)
            conn = tink_json_Parser8().parse(componentData)
            _g = 0
            while (_g < len(entriesToRemove)):
                e2 = (entriesToRemove[_g] if _g >= 0 and _g < len(entriesToRemove) else None)
                _g = (_g + 1)
                conn.remove(e2.id)
            _8CC2X8priN12MqULDVrCSn = None
            this1 = e.components
            v = tink_json_Writer14().write(conn)
            this1.h["Connections"] = v
            archive.refreshEntry(e)
        return e

    @staticmethod
    def colorIFromF(cf):
        x = kiss_Prelude.multiply(255,cf.r)
        tmp = None
        try:
            tmp = int(x)
        except BaseException as _g:
            None
            tmp = None
        x = kiss_Prelude.multiply(255,cf.g)
        tmp1 = None
        try:
            tmp1 = int(x)
        except BaseException as _g:
            None
            tmp1 = None
        x = kiss_Prelude.multiply(255,cf.b)
        tmp2 = None
        try:
            tmp2 = int(x)
        except BaseException as _g:
            None
            tmp2 = None
        x = kiss_Prelude.multiply(255,cf.a)
        tmp3 = None
        try:
            tmp3 = int(x)
        except BaseException as _g:
            None
            tmp3 = None
        return _hx_AnonObject({'r': tmp, 'g': tmp1, 'b': tmp2, 'a': tmp3})

    @staticmethod
    def colorFFromI(ci):
        return _hx_AnonObject({'r': kiss_Prelude.divide(ci.r,255.0), 'g': kiss_Prelude.divide(ci.g,255.0), 'b': kiss_Prelude.divide(ci.b,255.0), 'a': kiss_Prelude.divide(ci.a,255)})

    @staticmethod
    def addColorFRGBA(archive,e,r,g,b,a):
        cf = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = cf
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        test__impl_TestMain_._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _a7t8BvBccM4Yzn9XLNQYZh = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = test__impl_TestMain_.colorIFromF(cf)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        test__impl_TestMain_._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _vpuTqw6nceBqv7qYLufvKd = e1
        archive1.refreshEntry(e1)
        return _vpuTqw6nceBqv7qYLufvKd

    @staticmethod
    def addColorIRGBA(archive,e,r,g,b,a):
        ci = _hx_AnonObject({'r': r, 'g': g, 'b': b, 'a': a})
        archive1 = archive
        e1 = e
        c = ci
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorI"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        test__impl_TestMain_._log(msg)
        this1 = e1.components
        v = tink_json_Writer6().write(c)
        this1.h["ColorI"] = v
        _smrmQtBiB8Vmi4he98eAZk = e1
        archive1.refreshEntry(e1)
        archive1 = archive
        e1 = e
        c = test__impl_TestMain_.colorFFromI(ci)
        ui = None
        msg = kiss_Prelude.add("adding ",c," as ","ColorF"," for ",e1.id)
        if kiss_Prelude.truthy(ui):
            ui.displayMessage(msg)
        test__impl_TestMain_._log(msg)
        this1 = e1.components
        v = tink_json_Writer7().write(c)
        this1.h["ColorF"] = v
        _7GJCY1PgFWCxJw2KgZDgqw = e1
        archive1.refreshEntry(e1)
        return _7GJCY1PgFWCxJw2KgZDgqw

    @staticmethod
    def isEntry(o):
        fields = python_Boot.fields(o)
        _gmQTBBBw1KEY8Pvx79s3Pi = kiss_Prelude.areEqual(len(fields),3)
        if kiss_Prelude.truthy(_gmQTBBBw1KEY8Pvx79s3Pi):
            _5SHKv9oVcHSdozEDxjkoJj = kiss_Prelude._hx_and
            _g = []
            _g1 = 0
            _g2 = ["id", "components", "files"]
            while (_g1 < len(_g2)):
                f = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = (not kiss_Prelude.truthy(kiss_Prelude.areEqual(-1,python_internal_ArrayImpl.indexOf(fields,f,None))))
                _g.append(x)
            _5SHKv9oVcHSdozEDxjkoJj1 = Reflect.callMethod(None,_5SHKv9oVcHSdozEDxjkoJj,_g)
            return _5SHKv9oVcHSdozEDxjkoJj1
        else:
            return _gmQTBBBw1KEY8Pvx79s3Pi

    @staticmethod
    def main():
        _hvZ3b48WroBpQdFpAQLjqs = nat_BoolExpInterp.eval("true",[])
        if (not kiss_Prelude.truthy(_hvZ3b48WroBpQdFpAQLjqs)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:12:1: Assertion failed: \nFrom:[(assert (BoolExpInterp.eval \"true\" []))]",4))
        _d54cq8WwCHAmXim9PZ1wbQ = (not kiss_Prelude.truthy(nat_BoolExpInterp.eval("false",[])))
        if (not kiss_Prelude.truthy(_d54cq8WwCHAmXim9PZ1wbQ)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:13:1: Assertion failed: \nFrom:[(assert (not (BoolExpInterp.eval \"false\" [])))]",4))
        _3nKmtLrFBrCQ2d7kiRTTFs = (not kiss_Prelude.truthy(nat_BoolExpInterp.eval("flag",[])))
        if (not kiss_Prelude.truthy(_3nKmtLrFBrCQ2d7kiRTTFs)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:14:1: Assertion failed: \nFrom:[(assert (not (BoolExpInterp.eval \"flag\" [])))]",4))
        _jHL3Abs5aWTdzs9qQtqbFA = nat_BoolExpInterp.eval("flag",["flag"])
        if (not kiss_Prelude.truthy(_jHL3Abs5aWTdzs9qQtqbFA)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:15:1: Assertion failed: \nFrom:[(assert (BoolExpInterp.eval \"flag\" [\"flag\"]))]",4))
        _ctUB3JeqFBnAdpLc9XfJkv = (not kiss_Prelude.truthy(nat_BoolExpInterp.eval("(and flag false)",["flag"])))
        if (not kiss_Prelude.truthy(_ctUB3JeqFBnAdpLc9XfJkv)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:16:1: Assertion failed: \nFrom:[(assert (not (BoolExpInterp.eval \"(and flag false)\" [\"flag\"])))]",4))
        _dHHY7SNAwegQ7kBy86Rd23 = nat_BoolExpInterp.eval("(or flag otherFlag)",["otherFlag"])
        if (not kiss_Prelude.truthy(_dHHY7SNAwegQ7kBy86Rd23)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:17:1: Assertion failed: \nFrom:[(assert (BoolExpInterp.eval \"(or flag otherFlag)\" [\"otherFlag\"]))]",4))
        archive = nat_Archive("src/test/example-archive")
        song1 = archive.entries.h.get("song1",None)
        song2 = archive.entries.h.get("song2",None)
        _eQN83tJBjcCrPGLidhpHSy = ("Tags" in song1.components.h)
        if (not kiss_Prelude.truthy(_eQN83tJBjcCrPGLidhpHSy)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:26:5: Assertion failed: \nFrom:[(assert (hasComponent song1 Tags))]",4))
        _dCCSuEUDcArZ8beXAMthfF = ("Tags" in song2.components.h)
        if (not kiss_Prelude.truthy(_dCCSuEUDcArZ8beXAMthfF)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:27:5: Assertion failed: \nFrom:[(assert (hasComponent song2 Tags))]",4))
        _udJirJpRqAo6doFGpJwKF3 = test__impl_TestMain_.componentsMatch(song1,"(and Name Author)")
        if (not kiss_Prelude.truthy(_udJirJpRqAo6doFGpJwKF3)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:28:5: Assertion failed: \nFrom:[(assert (componentsMatch song1 \"(and Name Author)\"))]",4))
        _sbvnQiWZgxYi5JUvLxd7vx = test__impl_TestMain_.componentsMatch(song2,"(and Name Author)")
        if (not kiss_Prelude.truthy(_sbvnQiWZgxYi5JUvLxd7vx)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:29:5: Assertion failed: \nFrom:[(assert (componentsMatch song2 \"(and Name Author)\"))]",4))
        _geHZPrHJ52Ghng3qQqX1xS = test__impl_TestMain_.tagsMatch(song1,"(and song western)")
        if (not kiss_Prelude.truthy(_geHZPrHJ52Ghng3qQqX1xS)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:30:5: Assertion failed: \nFrom:[(assert (tagsMatch song1 \"(and song western)\"))]",4))
        _35EeMuZvQkvHhw4quE2dox = (not kiss_Prelude.truthy(test__impl_TestMain_.tagsMatch(song1,"(and song religious)")))
        if (not kiss_Prelude.truthy(_35EeMuZvQkvHhw4quE2dox)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:31:5: Assertion failed: \nFrom:[(assert (not (tagsMatch song1 \"(and song religious)\")))]",4))
        _2EPXoKGRi3D1Zwjir5DCbR = test__impl_TestMain_.tagsMatch(song2,"(and song religious)")
        if (not kiss_Prelude.truthy(_2EPXoKGRi3D1Zwjir5DCbR)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:32:5: Assertion failed: \nFrom:[(assert (tagsMatch song2 \"(and song religious)\"))]",4))
        _sCimkVHrKY6T9o3Jybmro3 = (not kiss_Prelude.truthy(test__impl_TestMain_.tagsMatch(song2,"(and song western)")))
        if (not kiss_Prelude.truthy(_sCimkVHrKY6T9o3Jybmro3)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:33:5: Assertion failed: \nFrom:[(assert (not (tagsMatch song2 \"(and song western)\")))]",4))
        componentData = song1.components.h.get("Author",None)
        author = tink_json_Parser2().parse(componentData)
        componentData = song1.components.h.get("Name",None)
        name = tink_json_Parser2().parse(componentData)
        _hXnXEtxYBnAGwdHgoDzknR = kiss_Prelude.areEqual(author,"Rafael Krux")
        if (not kiss_Prelude.truthy(_hXnXEtxYBnAGwdHgoDzknR)):
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:38:9: Assertion failed: \nFrom:[(assert (= author \"Rafael Krux\"))]",4))
        _2cn5nY4RijAsyjaWHksV9A = kiss_Prelude.areEqual(name,"Adventure")
        _uVRQwDXJGpgdjHKF94sCF = None
        if kiss_Prelude.truthy(_2cn5nY4RijAsyjaWHksV9A):
            _uVRQwDXJGpgdjHKF94sCF = _2cn5nY4RijAsyjaWHksV9A
        else:
            raise haxe_Exception.thrown(kiss_Prelude.runtimeInsertAssertionMessage("","/home/nat/repos/kisslang/projects/nat-archive-tool/src/test/TestMain_.kiss:39:9: Assertion failed: \nFrom:[(assert (= name \"Adventure\"))]",4))
        this1 = song1.components
        v = tink_json_Writer0().write(author)
        this1.h["Author"] = v
        this1 = song1.components
        v = tink_json_Writer0().write(name)
        this1.h["Name"] = v
        archive.refreshEntry(song1)
        wikipedia = nat_systems_MediaWikiSystem("Test Wikipedia system","https://en.wikipedia.org/w/api.php",None,None,1)
        kiss_Prelude.print(wikipedia.queryImageUrls(wikipedia.queryImageTitles(["Phoenix Wright"])),"(wikipedia.queryImageUrls (wikipedia.queryImageTitles [\"Phoenix Wright\"]))")
        controller = nat_ArchiveController(archive,test_DummyUI())
test__impl_TestMain_._hx_class = test__impl_TestMain_
_hx_classes["test._impl.TestMain_"] = test__impl_TestMain_


class tink_Json:
    _hx_class_name = "tink.Json"
    _hx_is_interface = "False"
    __slots__ = ()
tink_Json._hx_class = tink_Json
_hx_classes["tink.Json"] = tink_Json


class tink_core_Annex:
    _hx_class_name = "tink.core.Annex"
    _hx_is_interface = "False"
    __slots__ = ("target", "registry")
    _hx_fields = ["target", "registry"]

    def __init__(self,target):
        self.target = target
        self.registry = haxe_ds_ObjectMap()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.target = None
        _hx_o.registry = None
tink_core_Annex._hx_class = tink_core_Annex
_hx_classes["tink.core.Annex"] = tink_core_Annex


class tink_core__Callback_Callback_Impl_:
    _hx_class_name = "tink.core._Callback.Callback_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "toFunction", "depth", "MAX_DEPTH", "invoke", "fromNiladic", "fromMany", "defer"]

    @staticmethod
    def _new(f):
        return f

    @staticmethod
    def toFunction(this1):
        return this1

    @staticmethod
    def invoke(this1,data):
        if (tink_core__Callback_Callback_Impl_.depth < 100):
            _hx_local_0 = tink_core__Callback_Callback_Impl_
            _hx_local_1 = _hx_local_0.depth
            _hx_local_0.depth = (_hx_local_1 + 1)
            _hx_local_1
            this1(data)
            _hx_local_2 = tink_core__Callback_Callback_Impl_
            _hx_local_3 = _hx_local_2.depth
            _hx_local_2.depth = (_hx_local_3 - 1)
            _hx_local_3
        else:
            def _hx_local_4():
                this1(data)
            tink_core__Callback_Callback_Impl_.defer(_hx_local_4)

    @staticmethod
    def fromNiladic(f):
        def _hx_local_0(_):
            f()
        return _hx_local_0

    @staticmethod
    def fromMany(callbacks):
        def _hx_local_0(v):
            _g = 0
            while (_g < len(callbacks)):
                callback = (callbacks[_g] if _g >= 0 and _g < len(callbacks) else None)
                _g = (_g + 1)
                tink_core__Callback_Callback_Impl_.invoke(callback,v)
        return _hx_local_0

    @staticmethod
    def defer(f):
        haxe_Timer.delay(f,0)
tink_core__Callback_Callback_Impl_._hx_class = tink_core__Callback_Callback_Impl_
_hx_classes["tink.core._Callback.Callback_Impl_"] = tink_core__Callback_Callback_Impl_


class tink_core_LinkObject:
    _hx_class_name = "tink.core.LinkObject"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["cancel"]
tink_core_LinkObject._hx_class = tink_core_LinkObject
_hx_classes["tink.core.LinkObject"] = tink_core_LinkObject


class tink_core_CallbackLinkRef:
    _hx_class_name = "tink.core.CallbackLinkRef"
    _hx_is_interface = "False"
    __slots__ = ("link",)
    _hx_fields = ["link"]
    _hx_methods = ["set_link", "cancel"]
    _hx_interfaces = [tink_core_LinkObject]

    def __init__(self):
        self.link = None

    def set_link(self,param):
        this1 = self.link
        if (this1 is not None):
            this1.cancel()
        def _hx_local_1():
            def _hx_local_0():
                self.link = param
                return self.link
            return _hx_local_0()
        return _hx_local_1()

    def cancel(self):
        this1 = self.link
        if (this1 is not None):
            this1.cancel()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.link = None
tink_core_CallbackLinkRef._hx_class = tink_core_CallbackLinkRef
_hx_classes["tink.core.CallbackLinkRef"] = tink_core_CallbackLinkRef


class tink_core__Callback_CallbackLink_Impl_:
    _hx_class_name = "tink.core._Callback.CallbackLink_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "cancel", "dissolve", "noop", "toFunction", "toCallback", "fromFunction", "join", "fromMany"]

    @staticmethod
    def _new(link):
        return tink_core_SimpleLink(link)

    @staticmethod
    def cancel(this1):
        if (this1 is not None):
            this1.cancel()

    @staticmethod
    def dissolve(this1):
        if (this1 is not None):
            this1.cancel()

    @staticmethod
    def noop():
        pass

    @staticmethod
    def toFunction(this1):
        if (this1 is None):
            return tink_core__Callback_CallbackLink_Impl_.noop
        else:
            return this1.cancel

    @staticmethod
    def toCallback(this1):
        if (this1 is None):
            def _hx_local_1():
                def _hx_local_0(_):
                    tink_core__Callback_CallbackLink_Impl_.noop()
                return _hx_local_0
            return _hx_local_1()
        else:
            f = this1.cancel
            def _hx_local_2(_):
                f()
            return _hx_local_2

    @staticmethod
    def fromFunction(f):
        return tink_core_SimpleLink(f)

    @staticmethod
    def join(this1,b):
        return tink_core__Callback_LinkPair(this1,b)

    @staticmethod
    def fromMany(callbacks):
        def _hx_local_2():
            def _hx_local_1():
                nonlocal callbacks
                if (callbacks is not None):
                    _g = 0
                    while (_g < len(callbacks)):
                        cb = (callbacks[_g] if _g >= 0 and _g < len(callbacks) else None)
                        _g = (_g + 1)
                        if (cb is not None):
                            cb.cancel()
                else:
                    callbacks = None
            return tink_core_SimpleLink(_hx_local_1)
        return _hx_local_2()
tink_core__Callback_CallbackLink_Impl_._hx_class = tink_core__Callback_CallbackLink_Impl_
_hx_classes["tink.core._Callback.CallbackLink_Impl_"] = tink_core__Callback_CallbackLink_Impl_


class tink_core_SimpleLink:
    _hx_class_name = "tink.core.SimpleLink"
    _hx_is_interface = "False"
    __slots__ = ("f",)
    _hx_fields = ["f"]
    _hx_methods = ["cancel"]
    _hx_interfaces = [tink_core_LinkObject]

    def __init__(self,f):
        self.f = f

    def cancel(self):
        if (self.f is not None):
            self.f()
            self.f = None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.f = None
tink_core_SimpleLink._hx_class = tink_core_SimpleLink
_hx_classes["tink.core.SimpleLink"] = tink_core_SimpleLink


class tink_core__Callback_LinkPair:
    _hx_class_name = "tink.core._Callback.LinkPair"
    _hx_is_interface = "False"
    __slots__ = ("a", "b", "dissolved")
    _hx_fields = ["a", "b", "dissolved"]
    _hx_methods = ["cancel"]
    _hx_interfaces = [tink_core_LinkObject]

    def __init__(self,a,b):
        self.dissolved = False
        self.a = a
        self.b = b

    def cancel(self):
        if (not self.dissolved):
            self.dissolved = True
            this1 = self.a
            if (this1 is not None):
                this1.cancel()
            this1 = self.b
            if (this1 is not None):
                this1.cancel()
            self.a = None
            self.b = None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.a = None
        _hx_o.b = None
        _hx_o.dissolved = None
tink_core__Callback_LinkPair._hx_class = tink_core__Callback_LinkPair
_hx_classes["tink.core._Callback.LinkPair"] = tink_core__Callback_LinkPair


class tink_core__Callback_ListCell:
    _hx_class_name = "tink.core._Callback.ListCell"
    _hx_is_interface = "False"
    __slots__ = ("cb", "list")
    _hx_fields = ["cb", "list"]
    _hx_methods = ["invoke", "clear", "cancel"]
    _hx_interfaces = [tink_core_LinkObject]

    def __init__(self,cb,_hx_list):
        if (cb is None):
            raise haxe_Exception.thrown("callback expected but null received")
        self.cb = cb
        self.list = _hx_list

    def invoke(self,data):
        if (self.list is not None):
            self.cb(data)

    def clear(self):
        self.cb = None
        self.list = None

    def cancel(self):
        if (self.list is not None):
            _hx_list = self.list
            self.cb = None
            self.list = None
            def _hx_local_1():
                _hx_list.used = (_hx_list.used - 1)
                return _hx_list.used
            tmp = _hx_local_1()
            if (tmp <= ((len(_hx_list.cells) >> 1))):
                _hx_list.compact()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.cb = None
        _hx_o.list = None
tink_core__Callback_ListCell._hx_class = tink_core__Callback_ListCell
_hx_classes["tink.core._Callback.ListCell"] = tink_core__Callback_ListCell


class tink_core_Disposable:
    _hx_class_name = "tink.core.Disposable"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["get_disposed", "ondispose"]
tink_core_Disposable._hx_class = tink_core_Disposable
_hx_classes["tink.core.Disposable"] = tink_core_Disposable


class tink_core_OwnedDisposable:
    _hx_class_name = "tink.core.OwnedDisposable"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["dispose"]
    _hx_interfaces = [tink_core_Disposable]
tink_core_OwnedDisposable._hx_class = tink_core_OwnedDisposable
_hx_classes["tink.core.OwnedDisposable"] = tink_core_OwnedDisposable


class tink_core_SimpleDisposable:
    _hx_class_name = "tink.core.SimpleDisposable"
    _hx_is_interface = "False"
    __slots__ = ("f", "disposeHandlers")
    _hx_fields = ["f", "disposeHandlers"]
    _hx_methods = ["get_disposed", "ondispose", "dispose"]
    _hx_statics = ["noop"]
    _hx_interfaces = [tink_core_OwnedDisposable]

    def __init__(self,dispose):
        self.disposeHandlers = []
        self.f = dispose

    def get_disposed(self):
        return (self.disposeHandlers is None)

    def ondispose(self,d):
        _g = self.disposeHandlers
        if (_g is None):
            d()
        else:
            v = _g
            v.append(d)

    def dispose(self):
        _g = self.disposeHandlers
        if (_g is not None):
            v = _g
            self.disposeHandlers = None
            f = self.f
            self.f = tink_core_SimpleDisposable.noop
            f()
            _g = 0
            while (_g < len(v)):
                h = (v[_g] if _g >= 0 and _g < len(v) else None)
                _g = (_g + 1)
                h()

    @staticmethod
    def noop():
        pass

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.f = None
        _hx_o.disposeHandlers = None
tink_core_SimpleDisposable._hx_class = tink_core_SimpleDisposable
_hx_classes["tink.core.SimpleDisposable"] = tink_core_SimpleDisposable


class tink_core_CallbackList(tink_core_SimpleDisposable):
    _hx_class_name = "tink.core.CallbackList"
    _hx_is_interface = "False"
    __slots__ = ("destructive", "cells", "used", "queue", "busy", "ondrain", "onfill")
    _hx_fields = ["destructive", "cells", "used", "queue", "busy", "ondrain", "onfill"]
    _hx_methods = ["get_length", "release", "destroy", "drain", "add", "invoke", "compact", "resize", "clear"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core_SimpleDisposable


    def __init__(self,destructive = None):
        if (destructive is None):
            destructive = False
        self.cells = None
        self.destructive = None
        def _hx_local_0():
            pass
        self.onfill = _hx_local_0
        def _hx_local_1():
            pass
        self.ondrain = _hx_local_1
        self.busy = False
        self.queue = []
        self.used = 0
        _gthis = self
        def _hx_local_2():
            if (not _gthis.busy):
                _gthis.destroy()
        super().__init__(_hx_local_2)
        self.destructive = destructive
        self.cells = []

    def get_length(self):
        return self.used

    def release(self):
        self.used = (self.used - 1)
        tmp = self.used
        if (tmp <= ((len(self.cells) >> 1))):
            self.compact()

    def destroy(self):
        _g = 0
        _g1 = self.cells
        while (_g < len(_g1)):
            c = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            c.cb = None
            c.list = None
        self.queue = None
        self.cells = None
        if (self.used > 0):
            self.used = 0
            fn = self.ondrain
            if (tink_core__Callback_Callback_Impl_.depth < 100):
                _hx_local_1 = tink_core__Callback_Callback_Impl_
                _hx_local_2 = _hx_local_1.depth
                _hx_local_1.depth = (_hx_local_2 + 1)
                _hx_local_2
                fn()
                _hx_local_3 = tink_core__Callback_Callback_Impl_
                _hx_local_4 = _hx_local_3.depth
                _hx_local_3.depth = (_hx_local_4 - 1)
                _hx_local_4
            else:
                tink_core__Callback_Callback_Impl_.defer(fn)

    def drain(self):
        fn = self.ondrain
        if (tink_core__Callback_Callback_Impl_.depth < 100):
            _hx_local_0 = tink_core__Callback_Callback_Impl_
            _hx_local_1 = _hx_local_0.depth
            _hx_local_0.depth = (_hx_local_1 + 1)
            _hx_local_1
            fn()
            _hx_local_2 = tink_core__Callback_Callback_Impl_
            _hx_local_3 = _hx_local_2.depth
            _hx_local_2.depth = (_hx_local_3 - 1)
            _hx_local_3
        else:
            tink_core__Callback_Callback_Impl_.defer(fn)

    def add(self,cb):
        if (self.disposeHandlers is None):
            return None
        node = tink_core__Callback_ListCell(cb,self)
        _this = self.cells
        _this.append(node)
        def _hx_local_2():
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.used
            _hx_local_0.used = (_hx_local_1 + 1)
            return _hx_local_1
        tmp = (_hx_local_2() == 0)
        if tmp:
            fn = self.onfill
            if (tink_core__Callback_Callback_Impl_.depth < 100):
                _hx_local_3 = tink_core__Callback_Callback_Impl_
                _hx_local_4 = _hx_local_3.depth
                _hx_local_3.depth = (_hx_local_4 + 1)
                _hx_local_4
                fn()
                _hx_local_5 = tink_core__Callback_Callback_Impl_
                _hx_local_6 = _hx_local_5.depth
                _hx_local_5.depth = (_hx_local_6 - 1)
                _hx_local_6
            else:
                tink_core__Callback_Callback_Impl_.defer(fn)
        return node

    def invoke(self,data):
        _gthis = self
        if (tink_core__Callback_Callback_Impl_.depth < 100):
            _hx_local_0 = tink_core__Callback_Callback_Impl_
            _hx_local_1 = _hx_local_0.depth
            _hx_local_0.depth = (_hx_local_1 + 1)
            _hx_local_1
            if (_gthis.disposeHandlers is not None):
                if _gthis.busy:
                    if (_gthis.destructive != True):
                        _this = _gthis.queue
                        tmp = _this.append
                        _g = _gthis
                        data1 = data
                        def _hx_local_2():
                            _g.invoke(data1)
                        tmp(_hx_local_2)
                else:
                    _gthis.busy = True
                    if _gthis.destructive:
                        _gthis.dispose()
                    length = len(_gthis.cells)
                    _g1 = 0
                    _g2 = length
                    while (_g1 < _g2):
                        i = _g1
                        _g1 = (_g1 + 1)
                        _this = (_gthis.cells[i] if i >= 0 and i < len(_gthis.cells) else None)
                        if (_this.list is not None):
                            _this.cb(data)
                    _gthis.busy = False
                    if (_gthis.disposeHandlers is None):
                        _gthis.destroy()
                    else:
                        if (_gthis.used < len(_gthis.cells)):
                            _gthis.compact()
                        if (len(_gthis.queue) > 0):
                            _this = _gthis.queue
                            ((None if ((len(_this) == 0)) else _this.pop(0)))()
            _hx_local_3 = tink_core__Callback_Callback_Impl_
            _hx_local_4 = _hx_local_3.depth
            _hx_local_3.depth = (_hx_local_4 - 1)
            _hx_local_4
        else:
            def _hx_local_6():
                if (_gthis.disposeHandlers is not None):
                    if _gthis.busy:
                        if (_gthis.destructive != True):
                            _this = _gthis.queue
                            tmp = _this.append
                            _g = _gthis
                            data1 = data
                            def _hx_local_5():
                                _g.invoke(data1)
                            tmp(_hx_local_5)
                    else:
                        _gthis.busy = True
                        if _gthis.destructive:
                            _gthis.dispose()
                        length = len(_gthis.cells)
                        _g1 = 0
                        _g2 = length
                        while (_g1 < _g2):
                            i = _g1
                            _g1 = (_g1 + 1)
                            _this = (_gthis.cells[i] if i >= 0 and i < len(_gthis.cells) else None)
                            if (_this.list is not None):
                                _this.cb(data)
                        _gthis.busy = False
                        if (_gthis.disposeHandlers is None):
                            _gthis.destroy()
                        else:
                            if (_gthis.used < len(_gthis.cells)):
                                _gthis.compact()
                            if (len(_gthis.queue) > 0):
                                _this = _gthis.queue
                                ((None if ((len(_this) == 0)) else _this.pop(0)))()
            tink_core__Callback_Callback_Impl_.defer(_hx_local_6)

    def compact(self):
        if self.busy:
            return
        elif (self.used == 0):
            self.resize(0)
            fn = self.ondrain
            if (tink_core__Callback_Callback_Impl_.depth < 100):
                _hx_local_0 = tink_core__Callback_Callback_Impl_
                _hx_local_1 = _hx_local_0.depth
                _hx_local_0.depth = (_hx_local_1 + 1)
                _hx_local_1
                fn()
                _hx_local_2 = tink_core__Callback_Callback_Impl_
                _hx_local_3 = _hx_local_2.depth
                _hx_local_2.depth = (_hx_local_3 - 1)
                _hx_local_3
            else:
                tink_core__Callback_Callback_Impl_.defer(fn)
        else:
            compacted = 0
            _g = 0
            _g1 = len(self.cells)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                _g2 = (self.cells[i] if i >= 0 and i < len(self.cells) else None)
                _g3 = _g2.list
                if (_g2.cb is not None):
                    v = _g2
                    if (compacted != i):
                        python_internal_ArrayImpl._set(self.cells, compacted, v)
                    compacted = (compacted + 1)
                    tmp = compacted
                    if (tmp == self.used):
                        break
            self.resize(self.used)

    def resize(self,length):
        _this = self.cells
        l = len(_this)
        if (l < length):
            idx = (length - 1)
            v = None
            l1 = len(_this)
            while (l1 < idx):
                _this.append(None)
                l1 = (l1 + 1)
            if (l1 == idx):
                _this.append(v)
            else:
                _this[idx] = v
        elif (l > length):
            pos = length
            _hx_len = (l - length)
            if (pos < 0):
                pos = (len(_this) + pos)
            if (pos < 0):
                pos = 0
            res = _this[pos:(pos + _hx_len)]
            del _this[pos:(pos + _hx_len)]

    def clear(self):
        if self.busy:
            _this = self.queue
            _this.append(self.clear)
        _g = 0
        _g1 = self.cells
        while (_g < len(_g1)):
            cell = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            cell.cb = None
            cell.list = None
        self.resize(0)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.destructive = None
        _hx_o.cells = None
        _hx_o.used = None
        _hx_o.queue = None
        _hx_o.busy = None
        _hx_o.ondrain = None
        _hx_o.onfill = None
tink_core_CallbackList._hx_class = tink_core_CallbackList
_hx_classes["tink.core.CallbackList"] = tink_core_CallbackList


class tink_core_AlreadyDisposed:
    _hx_class_name = "tink.core.AlreadyDisposed"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["get_disposed", "ondispose", "dispose"]
    _hx_statics = ["INST"]
    _hx_interfaces = [tink_core_OwnedDisposable]

    def __init__(self):
        pass

    def get_disposed(self):
        return True

    def ondispose(self,d):
        d()

    def dispose(self):
        pass

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_core_AlreadyDisposed._hx_class = tink_core_AlreadyDisposed
_hx_classes["tink.core.AlreadyDisposed"] = tink_core_AlreadyDisposed


class tink_core_TypedError:
    _hx_class_name = "tink.core.TypedError"
    _hx_is_interface = "False"
    __slots__ = ("message", "code", "data", "pos", "callStack", "exceptionStack", "isTinkError")
    _hx_fields = ["message", "code", "data", "pos", "callStack", "exceptionStack", "isTinkError"]
    _hx_methods = ["printPos", "toString", "toPromise", "throwSelf"]
    _hx_statics = ["withData", "typed", "asError", "catchExceptions", "reporter", "rethrow", "tryFinally"]

    def __init__(self,code = None,message = None,pos = None):
        if (code is None):
            code = 500
        self.data = None
        self.isTinkError = True
        self.code = code
        self.message = message
        self.pos = pos
        self.exceptionStack = []
        self.callStack = []

    def printPos(self):
        return ((((HxOverrides.stringOrNull(self.pos.className) + ".") + HxOverrides.stringOrNull(self.pos.methodName)) + ":") + Std.string(self.pos.lineNumber))

    def toString(self):
        ret = ((("Error#" + Std.string(self.code)) + ": ") + HxOverrides.stringOrNull(self.message))
        if (self.pos is not None):
            ret = (("null" if ret is None else ret) + HxOverrides.stringOrNull(((" @ " + HxOverrides.stringOrNull(self.printPos())))))
        return ret

    def toPromise(self):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(self)))

    def throwSelf(self):
        any = self
        raise haxe_Exception.thrown(any)

    @staticmethod
    def withData(code = None,message = None,data = None,pos = None):
        return tink_core_TypedError.typed(code,message,data,pos)

    @staticmethod
    def typed(code = None,message = None,data = None,pos = None):
        ret = tink_core_TypedError(code,message,pos)
        ret.data = data
        return ret

    @staticmethod
    def asError(v):
        return Std.downcast(v,tink_core_TypedError)

    @staticmethod
    def catchExceptions(f,report = None,pos = None):
        try:
            return tink_core_Outcome.Success(f())
        except BaseException as _g:
            None
            ex = haxe_Exception.caught(_g).unwrap()
            e = tink_core_TypedError.asError(ex)
            tmp = None
            if (e is None):
                tmp = (tink_core_TypedError.withData(None,"Unexpected Error",ex,pos) if ((report is None)) else report(ex))
            else:
                e1 = e
                tmp = e1
            return tink_core_Outcome.Failure(tmp)

    @staticmethod
    def reporter(code = None,message = None,pos = None):
        def _hx_local_0(e):
            return tink_core_TypedError.withData(code,message,e,pos)
        return _hx_local_0

    @staticmethod
    def rethrow(any):
        raise haxe_Exception.thrown(any)

    @staticmethod
    def tryFinally(f,cleanup):
        try:
            ret = f()
            cleanup()
            return ret
        except BaseException as _g:
            None
            e = haxe_Exception.caught(_g).unwrap()
            cleanup()
            raise haxe_Exception.thrown(e)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.message = None
        _hx_o.code = None
        _hx_o.data = None
        _hx_o.pos = None
        _hx_o.callStack = None
        _hx_o.exceptionStack = None
        _hx_o.isTinkError = None
tink_core_TypedError._hx_class = tink_core_TypedError
_hx_classes["tink.core.TypedError"] = tink_core_TypedError


class tink_core__Error_Stack_Impl_:
    _hx_class_name = "tink.core._Error.Stack_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["toString"]

    @staticmethod
    def toString(this1):
        return "Error stack not available. Compile with -D error_stack."
tink_core__Error_Stack_Impl_._hx_class = tink_core__Error_Stack_Impl_
_hx_classes["tink.core._Error.Stack_Impl_"] = tink_core__Error_Stack_Impl_


class tink_core__Future_FutureObject:
    _hx_class_name = "tink.core._Future.FutureObject"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_methods = ["getStatus", "handle", "eager"]

    def __init__(self):
        pass

    def getStatus(self):
        return tink_core_FutureStatus.NeverEver

    def handle(self,callback):
        return None

    def eager(self):
        pass

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_core__Future_FutureObject._hx_class = tink_core__Future_FutureObject
_hx_classes["tink.core._Future.FutureObject"] = tink_core__Future_FutureObject


class tink_core__Lazy_Computable:
    _hx_class_name = "tink.core._Lazy.Computable"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["isComputed", "compute", "underlying"]
tink_core__Lazy_Computable._hx_class = tink_core__Lazy_Computable
_hx_classes["tink.core._Lazy.Computable"] = tink_core__Lazy_Computable


class tink_core__Lazy_LazyObject:
    _hx_class_name = "tink.core._Lazy.LazyObject"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["get"]
    _hx_interfaces = [tink_core__Lazy_Computable]
tink_core__Lazy_LazyObject._hx_class = tink_core__Lazy_LazyObject
_hx_classes["tink.core._Lazy.LazyObject"] = tink_core__Lazy_LazyObject


class tink_core__Lazy_LazyConst:
    _hx_class_name = "tink.core._Lazy.LazyConst"
    _hx_is_interface = "False"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["isComputed", "get", "compute", "underlying"]
    _hx_interfaces = [tink_core__Lazy_LazyObject]

    def __init__(self,value):
        self.value = value

    def isComputed(self):
        return True

    def get(self):
        return self.value

    def compute(self):
        pass

    def underlying(self):
        return None

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.value = None
tink_core__Lazy_LazyConst._hx_class = tink_core__Lazy_LazyConst
_hx_classes["tink.core._Lazy.LazyConst"] = tink_core__Lazy_LazyConst


class tink_core__Future_SyncFuture(tink_core__Future_FutureObject):
    _hx_class_name = "tink.core._Future.SyncFuture"
    _hx_is_interface = "False"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["getStatus", "handle", "eager"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core__Future_FutureObject


    def __init__(self,value):
        self.value = None
        super().__init__()
        self.value = value

    def getStatus(self):
        return tink_core_FutureStatus.Ready(self.value)

    def handle(self,cb):
        tink_core__Callback_Callback_Impl_.invoke(cb,tink_core__Lazy_Lazy_Impl_.get(self.value))
        return None

    def eager(self):
        if (not self.value.isComputed()):
            tink_core__Lazy_Lazy_Impl_.get(self.value)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.value = None
tink_core__Future_SyncFuture._hx_class = tink_core__Future_SyncFuture
_hx_classes["tink.core._Future.SyncFuture"] = tink_core__Future_SyncFuture


class tink_core__Future_Future_Impl_:
    _hx_class_name = "tink.core._Future.Future_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["NOISE", "NEVER_INST", "NEVER", "never", "get_status", "_new", "handle", "eager", "noise", "first", "map", "flatMap", "swap", "next", "withSideEffect", "gather", "merge", "flatten", "neverToAny", "ofAny", "asPromise", "ofMany", "inParallel", "inSequence", "many", "processMany", "lazy", "sync", "isFuture", "make", "irreversible", "or", "either", "and", "_tryFailingFlatMap", "_tryFlatMap", "_tryFailingMap", "_tryMap", "_flatMap", "_map", "trigger", "delay"]
    status = None

    @staticmethod
    def never():
        return tink_core__Future_Future_Impl_.NEVER_INST

    @staticmethod
    def get_status(this1):
        return this1.getStatus()

    @staticmethod
    def _new(wakeup):
        return tink_core__Future_SuspendableFuture(wakeup)

    @staticmethod
    def handle(this1,callback):
        return this1.handle(callback)

    @staticmethod
    def eager(this1):
        this1.eager()
        return this1

    @staticmethod
    def noise(this1):
        if (this1.getStatus().index == 4):
            return tink_core__Future_Future_Impl_.never()
        else:
            def _hx_local_1():
                def _hx_local_0(_):
                    return None
                return tink_core__Future_Future_Impl_.map(this1,_hx_local_0)
            return _hx_local_1()

    @staticmethod
    def first(this1,that):
        _g = this1
        _g1 = _g.getStatus()
        tmp = _g1.index
        if (tmp == 3):
            _g2 = _g1.params[0]
            _g1 = that.getStatus()
            tmp = _g1.index
            if (tmp == 3):
                _g2 = _g1.params[0]
                v = _g
                return v
            elif (tmp == 4):
                v = _g
                return v
            else:
                v = _g
                return v
        elif (tmp == 4):
            v = that
            return v
        else:
            _g1 = that.getStatus()
            tmp = _g1.index
            if (tmp == 3):
                _g2 = _g1.params[0]
                v = that
                return v
            elif (tmp == 4):
                v = _g
                return v
            else:
                def _hx_local_1():
                    def _hx_local_0(fire):
                        return tink_core__Callback_LinkPair(this1.handle(fire),that.handle(fire))
                    return tink_core__Future_SuspendableFuture(_hx_local_0)
                return _hx_local_1()

    @staticmethod
    def map(this1,f,gather = None):
        _g = this1.getStatus()
        tmp = _g.index
        if (tmp == 3):
            l = _g.params[0]
            this2 = l
            f1 = f
            def _hx_local_1():
                def _hx_local_0():
                    return f1(this2.get())
                return tink_core__Future_SyncFuture(tink_core__Lazy_LazyFunc(_hx_local_0,this2))
            return _hx_local_1()
        elif (tmp == 4):
            return tink_core__Future_Future_Impl_.never()
        else:
            def _hx_local_5():
                def _hx_local_4(fire):
                    def _hx_local_3():
                        def _hx_local_2(v):
                            fire(f(v))
                        return this1.handle(_hx_local_2)
                    return _hx_local_3()
                return tink_core__Future_SuspendableFuture(_hx_local_4)
            return _hx_local_5()

    @staticmethod
    def flatMap(this1,next,gather = None):
        _g = this1.getStatus()
        tmp = _g.index
        if (tmp == 3):
            l = _g.params[0]
            def _hx_local_3():
                def _hx_local_2(fire):
                    def _hx_local_1():
                        def _hx_local_0(v):
                            fire(v)
                        return next(tink_core__Lazy_Lazy_Impl_.get(l)).handle(_hx_local_0)
                    return _hx_local_1()
                return tink_core__Future_SuspendableFuture(_hx_local_2)
            return _hx_local_3()
        elif (tmp == 4):
            return tink_core__Future_Future_Impl_.never()
        else:
            def _hx_local_6():
                def _hx_local_5(_hx_yield):
                    inner = tink_core_CallbackLinkRef()
                    def _hx_local_4(v):
                        param = next(v).handle(_hx_yield)
                        this1 = inner.link
                        if (this1 is not None):
                            this1.cancel()
                        inner.link = param
                    outer = this1.handle(_hx_local_4)
                    return tink_core__Callback_LinkPair(outer,inner)
                return tink_core__Future_SuspendableFuture(_hx_local_5)
            return _hx_local_6()

    @staticmethod
    def swap(this1,v):
        def _hx_local_1():
            def _hx_local_0(_):
                return v
            return tink_core__Future_Future_Impl_.map(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def next(this1,n):
        return tink_core__Future_Future_Impl_.flatMap(this1,n)

    @staticmethod
    def withSideEffect(this1,c):
        def _hx_local_1():
            def _hx_local_0(v):
                tink_core__Callback_Callback_Impl_.invoke(c,v)
                return v
            return tink_core__Future_Future_Impl_.map(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def gather(this1):
        return this1

    @staticmethod
    def merge(this1,that,combine):
        _g = this1.getStatus()
        _g1 = that.getStatus()
        if (_g.index == 4):
            return tink_core__Future_Future_Impl_.never()
        elif (_g1.index == 4):
            return tink_core__Future_Future_Impl_.never()
        else:
            def _hx_local_2():
                def _hx_local_1(_hx_yield):
                    def _hx_local_0(v = None):
                        _g = this1.getStatus()
                        _g1 = that.getStatus()
                        if (_g.index == 3):
                            if (_g1.index == 3):
                                b = _g1.params[0]
                                a = _g.params[0]
                                _hx_yield(combine(tink_core__Lazy_Lazy_Impl_.get(a),tink_core__Lazy_Lazy_Impl_.get(b)))
                    check = _hx_local_0
                    return tink_core__Callback_LinkPair(this1.handle(check),that.handle(check))
                return tink_core__Future_SuspendableFuture(_hx_local_1)
            return _hx_local_2()

    @staticmethod
    def flatten(f):
        def _hx_local_1():
            def _hx_local_0(v):
                return v
            return tink_core__Future_Future_Impl_.flatMap(f,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def neverToAny(l):
        return l

    @staticmethod
    def ofAny(v):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(v))

    @staticmethod
    def asPromise(s):
        return s

    @staticmethod
    def ofMany(futures,gather = None):
        return tink_core__Future_Future_Impl_.inSequence(futures)

    @staticmethod
    def inParallel(futures,concurrency = None):
        return tink_core__Future_Future_Impl_.many(futures,concurrency)

    @staticmethod
    def inSequence(futures):
        return tink_core__Future_Future_Impl_.many(futures,1)

    @staticmethod
    def many(a,concurrency = None):
        def _hx_local_1():
            def _hx_local_0(o):
                return tink_core_OutcomeTools.orNull(o)
            return tink_core__Future_Future_Impl_.processMany(a,concurrency,tink_core_Outcome.Success,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def processMany(a,concurrency = None,fn = None,lift = None):
        if (len(a) == 0):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(lift(tink_core_Outcome.Success([]))))
        else:
            def _hx_local_12():
                def _hx_local_11(_hx_yield):
                    links = list()
                    _g = []
                    _g1 = 0
                    while (_g1 < len(a)):
                        x = (a[_g1] if _g1 >= 0 and _g1 < len(a) else None)
                        _g1 = (_g1 + 1)
                        _g.append(None)
                    ret = _g
                    index = 0
                    pending = 0
                    done = False
                    concurrency1 = None
                    if (concurrency is None):
                        concurrency1 = len(a)
                    else:
                        v = concurrency
                        concurrency1 = (1 if ((v < 1)) else (len(a) if ((v > len(a))) else v))
                    def _hx_local_1():
                        nonlocal done
                        if (index == len(ret)):
                            if (pending == 0):
                                v = lift(tink_core_Outcome.Success(ret))
                                done = True
                                _hx_yield(v)
                                return True
                            else:
                                return False
                        else:
                            return False
                    fireWhenReady = _hx_local_1
                    step = None
                    def _hx_local_10():
                        nonlocal pending
                        nonlocal index
                        if ((not done) and (not fireWhenReady())):
                            while (index < len(ret)):
                                index = (index + 1)
                                index1 = [(index - 1)]
                                p = python_internal_ArrayImpl._get(a, (index1[0] if 0 < len(index1) else None))
                                def _hx_local_5(index):
                                    def _hx_local_3(o):
                                        nonlocal done
                                        _g = fn(o)
                                        check = _g.index
                                        if (check == 0):
                                            v = _g.params[0]
                                            python_internal_ArrayImpl._set(ret, (index[0] if 0 < len(index) else None), v)
                                            fireWhenReady()
                                        elif (check == 1):
                                            e = _g.params[0]
                                            _g = 0
                                            while (_g < len(links)):
                                                l = (links[_g] if _g >= 0 and _g < len(links) else None)
                                                _g = (_g + 1)
                                                if (l is not None):
                                                    l.cancel()
                                            v = lift(tink_core_Outcome.Failure(e))
                                            done = True
                                            _hx_yield(v)
                                        else:
                                            pass
                                    return _hx_local_3
                                check = [_hx_local_5(index1)]
                                _g = p.getStatus()
                                if (_g.index == 3):
                                    _hx_tmp = None
                                    _hx_tmp = tink_core__Lazy_Lazy_Impl_.get(_g.params[0])
                                    v = _hx_tmp
                                    (check[0] if 0 < len(check) else None)(v)
                                    if (not done):
                                        continue
                                else:
                                    pending = (pending + 1)
                                    def _hx_local_9(check):
                                        def _hx_local_7(o):
                                            nonlocal pending
                                            pending = (pending - 1)
                                            (check[0] if 0 < len(check) else None)(o)
                                            if (not done):
                                                step()
                                        return _hx_local_7
                                    x = p.handle(_hx_local_9(check))
                                    links.append(x)
                                break
                    step = _hx_local_10
                    _g = 0
                    _g1 = concurrency1
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        step()
                    return tink_core__Callback_CallbackLink_Impl_.fromMany(links)
                return tink_core__Future_SuspendableFuture(_hx_local_11)
            return _hx_local_12()

    @staticmethod
    def lazy(l):
        return tink_core__Future_SyncFuture(l)

    @staticmethod
    def sync(v):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(v))

    @staticmethod
    def isFuture(maybeFuture):
        return Std.isOfType(maybeFuture,tink_core__Future_FutureObject)

    @staticmethod
    def make(init,lazy = None):
        if (lazy is None):
            lazy = False
        ret = tink_core__Future_Future_Impl_.irreversible(init)
        if lazy:
            return ret
        else:
            ret.eager()
            return ret

    @staticmethod
    def irreversible(init):
        def _hx_local_1():
            def _hx_local_0(_hx_yield):
                init(_hx_yield)
                return None
            return tink_core__Future_SuspendableFuture(_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _hx_or(a,b):
        return tink_core__Future_Future_Impl_.first(a,b)

    @staticmethod
    def either(a,b):
        return tink_core__Future_Future_Impl_.first(tink_core__Future_Future_Impl_.map(a,haxe_ds_Either.Left),tink_core__Future_Future_Impl_.map(b,haxe_ds_Either.Right))

    @staticmethod
    def _hx_and(a,b):
        def _hx_local_1():
            def _hx_local_0(a,b):
                return tink_core_MPair(a,b)
            return tink_core__Future_Future_Impl_.merge(a,b,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _tryFailingFlatMap(f,_hx_map):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return _hx_map(d)
                elif (tmp == 1):
                    f = o.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(f)))
                else:
                    pass
            return tink_core__Future_Future_Impl_.flatMap(f,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _tryFlatMap(f,_hx_map):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return tink_core__Future_Future_Impl_.map(_hx_map(d),tink_core_Outcome.Success)
                elif (tmp == 1):
                    f = o.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(f)))
                else:
                    pass
            return tink_core__Future_Future_Impl_.flatMap(f,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _tryFailingMap(f,_hx_map):
        def _hx_local_1():
            def _hx_local_0(o):
                return tink_core_OutcomeTools.flatMap(o,tink_core__Outcome_OutcomeMapper_Impl_.withSameError(_hx_map))
            return tink_core__Future_Future_Impl_.map(f,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _tryMap(f,_hx_map):
        def _hx_local_1():
            def _hx_local_0(o):
                return tink_core_OutcomeTools.map(o,_hx_map)
            return tink_core__Future_Future_Impl_.map(f,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def _flatMap(f,_hx_map):
        return tink_core__Future_Future_Impl_.flatMap(f,_hx_map)

    @staticmethod
    def _map(f,_hx_map):
        return tink_core__Future_Future_Impl_.map(f,_hx_map)

    @staticmethod
    def trigger():
        return tink_core_FutureTrigger()

    @staticmethod
    def delay(ms,value):
        def _hx_local_1(cb):
            def _hx_local_0():
                cb(tink_core__Lazy_Lazy_Impl_.get(value))
            haxe_Timer.delay(_hx_local_0,ms)
        this1 = tink_core__Future_Future_Impl_.irreversible(_hx_local_1)
        this1.eager()
        return this1
tink_core__Future_Future_Impl_._hx_class = tink_core__Future_Future_Impl_
_hx_classes["tink.core._Future.Future_Impl_"] = tink_core__Future_Future_Impl_

class tink_core_FutureStatus(Enum):
    __slots__ = ()
    _hx_class_name = "tink.core.FutureStatus"
    _hx_constructs = ["Suspended", "Awaited", "EagerlyAwaited", "Ready", "NeverEver"]

    @staticmethod
    def Ready(result):
        return tink_core_FutureStatus("Ready", 3, (result,))
tink_core_FutureStatus.Suspended = tink_core_FutureStatus("Suspended", 0, ())
tink_core_FutureStatus.Awaited = tink_core_FutureStatus("Awaited", 1, ())
tink_core_FutureStatus.EagerlyAwaited = tink_core_FutureStatus("EagerlyAwaited", 2, ())
tink_core_FutureStatus.NeverEver = tink_core_FutureStatus("NeverEver", 4, ())
tink_core_FutureStatus._hx_class = tink_core_FutureStatus
_hx_classes["tink.core.FutureStatus"] = tink_core_FutureStatus


class tink_core_FutureTrigger(tink_core__Future_FutureObject):
    _hx_class_name = "tink.core.FutureTrigger"
    _hx_is_interface = "False"
    __slots__ = ("status", "list")
    _hx_fields = ["status", "list"]
    _hx_methods = ["getStatus", "handle", "asFuture", "trigger"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core__Future_FutureObject


    def __init__(self):
        self.list = None
        self.status = tink_core_FutureStatus.Awaited
        super().__init__()
        self.list = tink_core_CallbackList(True)

    def getStatus(self):
        return self.status

    def handle(self,callback):
        _g = self.status
        if (_g.index == 3):
            result = _g.params[0]
            tink_core__Callback_Callback_Impl_.invoke(callback,tink_core__Lazy_Lazy_Impl_.get(result))
            return None
        else:
            v = _g
            _this = self.list
            if (_this.disposeHandlers is None):
                return None
            else:
                node = tink_core__Callback_ListCell(callback,_this)
                _this1 = _this.cells
                _this1.append(node)
                def _hx_local_1():
                    _hx_local_0 = _this.used
                    _this.used = (_this.used + 1)
                    return _hx_local_0
                tmp = (_hx_local_1() == 0)
                if tmp:
                    fn = _this.onfill
                    if (tink_core__Callback_Callback_Impl_.depth < 100):
                        _hx_local_2 = tink_core__Callback_Callback_Impl_
                        _hx_local_3 = _hx_local_2.depth
                        _hx_local_2.depth = (_hx_local_3 + 1)
                        _hx_local_3
                        fn()
                        _hx_local_4 = tink_core__Callback_Callback_Impl_
                        _hx_local_5 = _hx_local_4.depth
                        _hx_local_4.depth = (_hx_local_5 - 1)
                        _hx_local_5
                    else:
                        tink_core__Callback_Callback_Impl_.defer(fn)
                return node

    def asFuture(self):
        return self

    def trigger(self,result):
        _g = self.status
        if (_g.index == 3):
            _g1 = _g.params[0]
            return False
        else:
            self.status = tink_core_FutureStatus.Ready(tink_core__Lazy_LazyConst(result))
            self.list.invoke(result)
            return True

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.status = None
        _hx_o.list = None
tink_core_FutureTrigger._hx_class = tink_core_FutureTrigger
_hx_classes["tink.core.FutureTrigger"] = tink_core_FutureTrigger


class tink_core__Future_SuspendableFuture(tink_core__Future_FutureObject):
    _hx_class_name = "tink.core._Future.SuspendableFuture"
    _hx_is_interface = "False"
    __slots__ = ("callbacks", "status", "link", "wakeup")
    _hx_fields = ["callbacks", "status", "link", "wakeup"]
    _hx_methods = ["getStatus", "trigger", "handle", "arm", "eager"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core__Future_FutureObject


    def __init__(self,wakeup):
        self.wakeup = None
        self.link = None
        self.callbacks = None
        self.status = tink_core_FutureStatus.Suspended
        _gthis = self
        super().__init__()
        self.wakeup = wakeup
        self.callbacks = tink_core_CallbackList(True)
        def _hx_local_0():
            if (_gthis.status == tink_core_FutureStatus.Awaited):
                _gthis.status = tink_core_FutureStatus.Suspended
                this1 = _gthis.link
                if (this1 is not None):
                    this1.cancel()
                _gthis.link = None
        self.callbacks.ondrain = _hx_local_0
        def _hx_local_1():
            if (_gthis.status == tink_core_FutureStatus.Suspended):
                _gthis.status = tink_core_FutureStatus.Awaited
                _gthis.arm()
        self.callbacks.onfill = _hx_local_1

    def getStatus(self):
        return self.status

    def trigger(self,value):
        _g = self.status
        if (_g.index == 3):
            _g1 = _g.params[0]
        else:
            self.status = tink_core_FutureStatus.Ready(tink_core__Lazy_LazyConst(value))
            link = self.link
            self.link = None
            self.wakeup = None
            self.callbacks.invoke(value)
            if (link is not None):
                link.cancel()

    def handle(self,callback):
        _g = self.status
        if (_g.index == 3):
            result = _g.params[0]
            tink_core__Callback_Callback_Impl_.invoke(callback,tink_core__Lazy_Lazy_Impl_.get(result))
            return None
        else:
            _this = self.callbacks
            if (_this.disposeHandlers is None):
                return None
            else:
                node = tink_core__Callback_ListCell(callback,_this)
                _this1 = _this.cells
                _this1.append(node)
                def _hx_local_1():
                    _hx_local_0 = _this.used
                    _this.used = (_this.used + 1)
                    return _hx_local_0
                tmp = (_hx_local_1() == 0)
                if tmp:
                    fn = _this.onfill
                    if (tink_core__Callback_Callback_Impl_.depth < 100):
                        _hx_local_2 = tink_core__Callback_Callback_Impl_
                        _hx_local_3 = _hx_local_2.depth
                        _hx_local_2.depth = (_hx_local_3 + 1)
                        _hx_local_3
                        fn()
                        _hx_local_4 = tink_core__Callback_Callback_Impl_
                        _hx_local_5 = _hx_local_4.depth
                        _hx_local_4.depth = (_hx_local_5 - 1)
                        _hx_local_5
                    else:
                        tink_core__Callback_Callback_Impl_.defer(fn)
                return node

    def arm(self):
        _gthis = self
        def _hx_local_0(x):
            _gthis.trigger(x)
        self.link = self.wakeup(_hx_local_0)

    def eager(self):
        tmp = self.status.index
        if (tmp == 0):
            self.status = tink_core_FutureStatus.EagerlyAwaited
            self.arm()
        elif (tmp == 1):
            self.status = tink_core_FutureStatus.EagerlyAwaited
        else:
            pass

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.callbacks = None
        _hx_o.status = None
        _hx_o.link = None
        _hx_o.wakeup = None
tink_core__Future_SuspendableFuture._hx_class = tink_core__Future_SuspendableFuture
_hx_classes["tink.core._Future.SuspendableFuture"] = tink_core__Future_SuspendableFuture


class tink_core__Lazy_Lazy_Impl_:
    _hx_class_name = "tink.core._Lazy.Lazy_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["NOISE", "NULL", "get_computed", "get", "fromNoise", "ofFunc", "map", "flatMap", "ofConst"]
    computed = None

    @staticmethod
    def get_computed(this1):
        return this1.isComputed()

    @staticmethod
    def get(this1):
        this1.compute()
        return this1.get()

    @staticmethod
    def fromNoise(l):
        return l

    @staticmethod
    def ofFunc(f):
        return tink_core__Lazy_LazyFunc(f)

    @staticmethod
    def map(this1,f):
        def _hx_local_1():
            def _hx_local_0():
                return f(this1.get())
            return tink_core__Lazy_LazyFunc(_hx_local_0,this1)
        return _hx_local_1()

    @staticmethod
    def flatMap(this1,f):
        def _hx_local_1():
            def _hx_local_0():
                return tink_core__Lazy_Lazy_Impl_.get(f(this1.get()))
            return tink_core__Lazy_LazyFunc(_hx_local_0,this1)
        return _hx_local_1()

    @staticmethod
    def ofConst(c):
        return tink_core__Lazy_LazyConst(c)
tink_core__Lazy_Lazy_Impl_._hx_class = tink_core__Lazy_Lazy_Impl_
_hx_classes["tink.core._Lazy.Lazy_Impl_"] = tink_core__Lazy_Lazy_Impl_


class tink_core__Lazy_LazyFunc:
    _hx_class_name = "tink.core._Lazy.LazyFunc"
    _hx_is_interface = "False"
    __slots__ = ("f", "_hx_from", "result")
    _hx_fields = ["f", "from", "result"]
    _hx_methods = ["underlying", "isComputed", "get", "compute"]
    _hx_interfaces = [tink_core__Lazy_LazyObject]

    def __init__(self,f,_hx_from = None):
        self.result = None
        self.f = f
        self._hx_from = _hx_from

    def underlying(self):
        return self._hx_from

    def isComputed(self):
        return (self.f is None)

    def get(self):
        return self.result

    def compute(self):
        _g = self.f
        if (_g is not None):
            v = _g
            self.f = None
            _g = self._hx_from
            if (_g is not None):
                cur = _g
                self._hx_from = None
                stack = []
                while ((cur is not None) and (not cur.isComputed())):
                    stack.append(cur)
                    cur = cur.underlying()
                stack.reverse()
                _g = 0
                while (_g < len(stack)):
                    c = (stack[_g] if _g >= 0 and _g < len(stack) else None)
                    _g = (_g + 1)
                    c.compute()
            self.result = v()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.f = None
        _hx_o._hx_from = None
        _hx_o.result = None
tink_core__Lazy_LazyFunc._hx_class = tink_core__Lazy_LazyFunc
_hx_classes["tink.core._Lazy.LazyFunc"] = tink_core__Lazy_LazyFunc


class tink_core_NamedWith:
    _hx_class_name = "tink.core.NamedWith"
    _hx_is_interface = "False"
    __slots__ = ("name", "value")
    _hx_fields = ["name", "value"]

    def __init__(self,name,value):
        self.name = name
        self.value = value

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.name = None
        _hx_o.value = None
tink_core_NamedWith._hx_class = tink_core_NamedWith
_hx_classes["tink.core.NamedWith"] = tink_core_NamedWith


class tink_core__Noise_Noise_Impl_:
    _hx_class_name = "tink.core._Noise.Noise_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["Noise", "ofAny"]

    @staticmethod
    def ofAny(t):
        return None
tink_core__Noise_Noise_Impl_._hx_class = tink_core__Noise_Noise_Impl_
_hx_classes["tink.core._Noise.Noise_Impl_"] = tink_core__Noise_Noise_Impl_


class tink_core_OptionTools:
    _hx_class_name = "tink.core.OptionTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["force", "sure", "toOutcome", "or", "orTry", "orNull", "filter", "satisfies", "equals", "map", "flatMap", "iterator", "toArray"]

    @staticmethod
    def force(o,pos = None):
        if (o.index == 0):
            v = o.params[0]
            return v
        else:
            raise haxe_Exception.thrown(tink_core_TypedError(404,"Some value expected but none found",pos))

    @staticmethod
    def sure(o,pos = None):
        if (o.index == 0):
            v = o.params[0]
            return v
        else:
            raise haxe_Exception.thrown(tink_core_TypedError(404,"Some value expected but none found",pos))

    @staticmethod
    def toOutcome(o,pos = None):
        tmp = o.index
        if (tmp == 0):
            value = o.params[0]
            return tink_core_Outcome.Success(value)
        elif (tmp == 1):
            return tink_core_Outcome.Failure(tink_core_TypedError(404,((("Some value expected but none found in " + HxOverrides.stringOrNull(pos.fileName)) + "@line ") + Std.string(pos.lineNumber)),_hx_AnonObject({'fileName': "tink/core/Option.hx", 'lineNumber': 31, 'className': "tink.core.OptionTools", 'methodName': "toOutcome"})))
        else:
            pass

    @staticmethod
    def _hx_or(o,l):
        if (o.index == 0):
            v = o.params[0]
            return v
        else:
            return tink_core__Lazy_Lazy_Impl_.get(l)

    @staticmethod
    def orTry(o,fallback):
        if (o.index == 0):
            v = o.params[0]
            return o
        else:
            return tink_core__Lazy_Lazy_Impl_.get(fallback)

    @staticmethod
    def orNull(o):
        if (o.index == 0):
            v = o.params[0]
            return v
        else:
            return None

    @staticmethod
    def filter(o,f):
        if (o.index == 0):
            if (f(o.params[0]) == False):
                return haxe_ds_Option._hx_None
            else:
                return o
        else:
            return o

    @staticmethod
    def satisfies(o,f):
        if (o.index == 0):
            v = o.params[0]
            return f(v)
        else:
            return False

    @staticmethod
    def equals(o,v):
        if (o.index == 0):
            v1 = o.params[0]
            return HxOverrides.eq(v1,v)
        else:
            return False

    @staticmethod
    def map(o,f):
        if (o.index == 0):
            v = o.params[0]
            return haxe_ds_Option.Some(f(v))
        else:
            return haxe_ds_Option._hx_None

    @staticmethod
    def flatMap(o,f):
        if (o.index == 0):
            v = o.params[0]
            return f(v)
        else:
            return haxe_ds_Option._hx_None

    @staticmethod
    def iterator(o):
        return tink_core_OptionIter(o)

    @staticmethod
    def toArray(o):
        if (o.index == 0):
            v = o.params[0]
            return [v]
        else:
            return []
tink_core_OptionTools._hx_class = tink_core_OptionTools
_hx_classes["tink.core.OptionTools"] = tink_core_OptionTools


class tink_core_OptionIter:
    _hx_class_name = "tink.core.OptionIter"
    _hx_is_interface = "False"
    __slots__ = ("value", "alive")
    _hx_fields = ["value", "alive"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,o):
        self.value = None
        self.alive = True
        if (o.index == 0):
            v = o.params[0]
            self.value = v
        else:
            self.alive = False

    def hasNext(self):
        return self.alive

    def next(self):
        self.alive = False
        return self.value

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.value = None
        _hx_o.alive = None
tink_core_OptionIter._hx_class = tink_core_OptionIter
_hx_classes["tink.core.OptionIter"] = tink_core_OptionIter

class tink_core_Outcome(Enum):
    __slots__ = ()
    _hx_class_name = "tink.core.Outcome"
    _hx_constructs = ["Success", "Failure"]

    @staticmethod
    def Success(data):
        return tink_core_Outcome("Success", 0, (data,))

    @staticmethod
    def Failure(failure):
        return tink_core_Outcome("Failure", 1, (failure,))
tink_core_Outcome._hx_class = tink_core_Outcome
_hx_classes["tink.core.Outcome"] = tink_core_Outcome


class tink_core_OutcomeTools:
    _hx_class_name = "tink.core.OutcomeTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["sure", "toOption", "orNull", "orUse", "or", "orTry", "equals", "map", "isSuccess", "flatMap", "swap", "next", "attempt", "satisfies", "flatten"]

    @staticmethod
    def sure(outcome):
        tmp = outcome.index
        if (tmp == 0):
            data = outcome.params[0]
            return data
        elif (tmp == 1):
            failure = outcome.params[0]
            _g = tink_core_TypedError.asError(failure)
            if (_g is None):
                raise haxe_Exception.thrown(failure)
            else:
                e = _g
                return e.throwSelf()
        else:
            pass

    @staticmethod
    def toOption(outcome):
        tmp = outcome.index
        if (tmp == 0):
            data = outcome.params[0]
            return haxe_ds_Option.Some(data)
        elif (tmp == 1):
            _g = outcome.params[0]
            return haxe_ds_Option._hx_None
        else:
            pass

    @staticmethod
    def orNull(outcome):
        tmp = outcome.index
        if (tmp == 0):
            data = outcome.params[0]
            return data
        elif (tmp == 1):
            _g = outcome.params[0]
            return None
        else:
            pass

    @staticmethod
    def orUse(outcome,fallback):
        return tink_core_OutcomeTools._hx_or(outcome,fallback)

    @staticmethod
    def _hx_or(outcome,fallback):
        tmp = outcome.index
        if (tmp == 0):
            data = outcome.params[0]
            return data
        elif (tmp == 1):
            _g = outcome.params[0]
            return tink_core__Lazy_Lazy_Impl_.get(fallback)
        else:
            pass

    @staticmethod
    def orTry(outcome,fallback):
        tmp = outcome.index
        if (tmp == 0):
            _g = outcome.params[0]
            return outcome
        elif (tmp == 1):
            _g = outcome.params[0]
            return tink_core__Lazy_Lazy_Impl_.get(fallback)
        else:
            pass

    @staticmethod
    def equals(outcome,to):
        tmp = outcome.index
        if (tmp == 0):
            data = outcome.params[0]
            return HxOverrides.eq(data,to)
        elif (tmp == 1):
            _g = outcome.params[0]
            return False
        else:
            pass

    @staticmethod
    def map(outcome,transform):
        tmp = outcome.index
        if (tmp == 0):
            a = outcome.params[0]
            return tink_core_Outcome.Success(transform(a))
        elif (tmp == 1):
            f = outcome.params[0]
            return tink_core_Outcome.Failure(f)
        else:
            pass

    @staticmethod
    def isSuccess(outcome):
        if (outcome.index == 0):
            _g = outcome.params[0]
            return True
        else:
            return False

    @staticmethod
    def flatMap(o,mapper):
        return tink_core__Outcome_OutcomeMapper_Impl_.apply(mapper,o)

    @staticmethod
    def swap(outcome,v):
        tmp = outcome.index
        if (tmp == 0):
            a = outcome.params[0]
            return tink_core_Outcome.Success(v)
        elif (tmp == 1):
            f = outcome.params[0]
            return tink_core_Outcome.Failure(f)
        else:
            pass

    @staticmethod
    def next(outcome,f):
        tmp = outcome.index
        if (tmp == 0):
            v = outcome.params[0]
            return f(v)
        elif (tmp == 1):
            e = outcome.params[0]
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(e)))
        else:
            pass

    @staticmethod
    def attempt(f,report):
        try:
            return tink_core_Outcome.Success(f())
        except BaseException as _g:
            None
            e = haxe_Exception.caught(_g).unwrap()
            return tink_core_Outcome.Failure(report(e))

    @staticmethod
    def satisfies(o,f):
        if (o.index == 0):
            d = o.params[0]
            return f(d)
        else:
            return False

    @staticmethod
    def flatten(o):
        tmp = o.index
        if (tmp == 0):
            _g = o.params[0]
            tmp = _g.index
            if (tmp == 0):
                d = _g.params[0]
                return tink_core_Outcome.Success(d)
            elif (tmp == 1):
                f = _g.params[0]
                return tink_core_Outcome.Failure(f)
            else:
                pass
        elif (tmp == 1):
            f = o.params[0]
            return tink_core_Outcome.Failure(f)
        else:
            pass
tink_core_OutcomeTools._hx_class = tink_core_OutcomeTools
_hx_classes["tink.core.OutcomeTools"] = tink_core_OutcomeTools


class tink_core__Outcome_OutcomeMapper_Impl_:
    _hx_class_name = "tink.core._Outcome.OutcomeMapper_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "apply", "withSameError", "withEitherError"]

    @staticmethod
    def _new(f):
        return _hx_AnonObject({'f': f})

    @staticmethod
    def apply(this1,o):
        return this1.f(o)

    @staticmethod
    def withSameError(f):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return f(d)
                elif (tmp == 1):
                    f1 = o.params[0]
                    return tink_core_Outcome.Failure(f1)
                else:
                    pass
            return tink_core__Outcome_OutcomeMapper_Impl_._new(_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def withEitherError(f):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    _g = f(d)
                    tmp = _g.index
                    if (tmp == 0):
                        d = _g.params[0]
                        return tink_core_Outcome.Success(d)
                    elif (tmp == 1):
                        f1 = _g.params[0]
                        return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1))
                    else:
                        pass
                elif (tmp == 1):
                    f1 = o.params[0]
                    return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1))
                else:
                    pass
            return tink_core__Outcome_OutcomeMapper_Impl_._new(_hx_local_0)
        return _hx_local_1()
tink_core__Outcome_OutcomeMapper_Impl_._hx_class = tink_core__Outcome_OutcomeMapper_Impl_
_hx_classes["tink.core._Outcome.OutcomeMapper_Impl_"] = tink_core__Outcome_OutcomeMapper_Impl_


class tink_core__Pair_Pair_Impl_:
    _hx_class_name = "tink.core._Pair.Pair_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "get_a", "get_b", "toBool", "isNil", "nil"]
    a = None
    b = None

    @staticmethod
    def _new(a,b):
        return tink_core_MPair(a,b)

    @staticmethod
    def get_a(this1):
        return this1.a

    @staticmethod
    def get_b(this1):
        return this1.b

    @staticmethod
    def toBool(this1):
        return (this1 is not None)

    @staticmethod
    def isNil(this1):
        return (this1 is None)

    @staticmethod
    def nil():
        return None
tink_core__Pair_Pair_Impl_._hx_class = tink_core__Pair_Pair_Impl_
_hx_classes["tink.core._Pair.Pair_Impl_"] = tink_core__Pair_Pair_Impl_


class tink_core_MPair:
    _hx_class_name = "tink.core.MPair"
    _hx_is_interface = "False"
    __slots__ = ("a", "b")
    _hx_fields = ["a", "b"]

    def __init__(self,a,b):
        self.a = a
        self.b = b

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.a = None
        _hx_o.b = None
tink_core_MPair._hx_class = tink_core_MPair
_hx_classes["tink.core.MPair"] = tink_core_MPair


class tink_core__Progress_ProgressValue_Impl_:
    _hx_class_name = "tink.core._Progress.ProgressValue_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["ZERO", "_new", "normalize", "get_value", "get_total"]
    value = None
    total = None

    @staticmethod
    def _new(value,total):
        return tink_core_MPair(value,total)

    @staticmethod
    def normalize(this1):
        o = this1.b
        if (o.index == 0):
            v = o.params[0]
            return haxe_ds_Option.Some((this1.a / v))
        else:
            return haxe_ds_Option._hx_None

    @staticmethod
    def get_value(this1):
        return this1.a

    @staticmethod
    def get_total(this1):
        return this1.b
tink_core__Progress_ProgressValue_Impl_._hx_class = tink_core__Progress_ProgressValue_Impl_
_hx_classes["tink.core._Progress.ProgressValue_Impl_"] = tink_core__Progress_ProgressValue_Impl_


class tink_core__Progress_Progress_Impl_:
    _hx_class_name = "tink.core._Progress.Progress_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["INIT", "listen", "handle", "trigger", "make", "map", "asFuture", "promise", "flatten", "future", "next"]

    @staticmethod
    def listen(this1,cb):
        return this1.progressed.listen(cb)

    @staticmethod
    def handle(this1,cb):
        return this1.result.handle(cb)

    @staticmethod
    def trigger():
        return tink_core_ProgressTrigger()

    @staticmethod
    def make(f):
        def _hx_local_4():
            def _hx_local_3(fire):
                def _hx_local_2():
                    def _hx_local_0(value,total):
                        fire(tink_core_ProgressStatus.InProgress(tink_core_MPair(value,total)))
                    def _hx_local_1(result):
                        fire(tink_core_ProgressStatus.Finished(result))
                    return f(_hx_local_0,_hx_local_1)
                return _hx_local_2()
            return tink_core__Progress_SuspendableProgress(_hx_local_3)
        return _hx_local_4()

    @staticmethod
    def map(this1,f):
        def _hx_local_2():
            def _hx_local_0(s):
                return tink_core_ProgressStatusTools.map(s,f)
            def _hx_local_1():
                return tink_core_ProgressStatusTools.map(this1.getStatus(),f)
            return tink_core__Progress_ProgressObject(tink_core__Signal_Signal_Impl_.map(this1.changed,_hx_local_0),_hx_local_1)
        return _hx_local_2()

    @staticmethod
    def asFuture(this1):
        return this1.result

    @staticmethod
    def promise(v):
        def _hx_local_4():
            def _hx_local_3(fire):
                inner = tink_core_CallbackLinkRef()
                def _hx_local_2():
                    def _hx_local_1(o):
                        this1 = o.index
                        if (this1 == 0):
                            p = o.params[0]
                            def _hx_local_0(s):
                                fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success))
                            param = p.changed.listen(_hx_local_0)
                            this1 = inner.link
                            if (this1 is not None):
                                this1.cancel()
                            inner.link = param
                        elif (this1 == 1):
                            e = o.params[0]
                            fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(e)))
                        else:
                            pass
                    return tink_core__Callback_LinkPair(v.handle(_hx_local_1),inner)
                return _hx_local_2()
            return tink_core__Progress_SuspendableProgress(_hx_local_3)
        return _hx_local_4()

    @staticmethod
    def flatten(v):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    _g = o.params[0]
                    tmp = _g.index
                    if (tmp == 0):
                        v = _g.params[0]
                        return tink_core_Outcome.Success(v)
                    elif (tmp == 1):
                        e = _g.params[0]
                        return tink_core_Outcome.Failure(e)
                    else:
                        pass
                elif (tmp == 1):
                    e = o.params[0]
                    return tink_core_Outcome.Failure(e)
                else:
                    pass
            return tink_core__Progress_Progress_Impl_.map(tink_core__Progress_Progress_Impl_.promise(v),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def future(v):
        def _hx_local_3():
            def _hx_local_2(fire):
                inner = tink_core_CallbackLinkRef()
                def _hx_local_1():
                    def _hx_local_0(p):
                        param = p.changed.listen(fire)
                        this1 = inner.link
                        if (this1 is not None):
                            this1.cancel()
                        inner.link = param
                    return tink_core__Callback_LinkPair(v.handle(_hx_local_0),inner)
                return _hx_local_1()
            return tink_core__Progress_SuspendableProgress(_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def next(this1,f):
        return tink_core__Future_Future_Impl_.flatMap(this1.result,f)
tink_core__Progress_Progress_Impl_._hx_class = tink_core__Progress_Progress_Impl_
_hx_classes["tink.core._Progress.Progress_Impl_"] = tink_core__Progress_Progress_Impl_


class tink_core__Progress_ProgressObject:
    _hx_class_name = "tink.core._Progress.ProgressObject"
    _hx_is_interface = "False"
    __slots__ = ("getStatus", "changed", "progressed", "result")
    _hx_fields = ["getStatus", "changed", "progressed", "result"]
    _hx_methods = ["get_status"]

    def __init__(self,changed,getStatus):
        self.result = None
        self.progressed = None
        self.getStatus = None
        self.changed = changed
        def _hx_local_2(fire):
            def _hx_local_1():
                def _hx_local_0(s):
                    if (s.index == 0):
                        v = s.params[0]
                        fire(v)
                return changed.listen(_hx_local_0)
            return _hx_local_1()
        self.progressed = tink_core__Signal_Suspendable(_hx_local_2,None)
        self.getStatus = getStatus
        def _hx_local_5(fire):
            _g = getStatus()
            if (_g.index == 1):
                v = _g.params[0]
                fire(v)
                return None
            else:
                def _hx_local_4():
                    def _hx_local_3(s):
                        if (s.index == 1):
                            v = s.params[0]
                            fire(v)
                    return changed.listen(_hx_local_3)
                return _hx_local_4()
        self.result = tink_core__Future_SuspendableFuture(_hx_local_5)

    def get_status(self):
        return self.getStatus()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.getStatus = None
        _hx_o.changed = None
        _hx_o.progressed = None
        _hx_o.result = None
tink_core__Progress_ProgressObject._hx_class = tink_core__Progress_ProgressObject
_hx_classes["tink.core._Progress.ProgressObject"] = tink_core__Progress_ProgressObject


class tink_core__Progress_SuspendableProgress(tink_core__Progress_ProgressObject):
    _hx_class_name = "tink.core._Progress.SuspendableProgress"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["noop"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core__Progress_ProgressObject


    def __init__(self,wakeup,status = None):
        if (status is None):
            status = tink_core_ProgressStatus.InProgress(tink_core__Progress_ProgressValue_Impl_.ZERO)
        disposable = tink_core_AlreadyDisposed.INST
        changed = None
        changed1 = status.index
        if (changed1 == 0):
            _g = status.params[0]
            def _hx_local_2(fire):
                def _hx_local_1():
                    def _hx_local_0(s):
                        nonlocal status
                        status = s
                        fire(status)
                    return wakeup(_hx_local_0)
                return _hx_local_1()
            def _hx_local_3(d):
                nonlocal disposable
                disposable = d
            changed = tink_core__Signal_Suspendable(_hx_local_2,_hx_local_3)
        elif (changed1 == 1):
            _g = status.params[0]
            changed = tink_core__Signal_Signal_Impl_.dead()
        else:
            pass
        def _hx_local_4():
            return status
        super().__init__(changed,_hx_local_4)

    def noop(self,_,_1):
        return None

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_core__Progress_SuspendableProgress._hx_class = tink_core__Progress_SuspendableProgress
_hx_classes["tink.core._Progress.SuspendableProgress"] = tink_core__Progress_SuspendableProgress


class tink_core_ProgressTrigger(tink_core__Progress_ProgressObject):
    _hx_class_name = "tink.core.ProgressTrigger"
    _hx_is_interface = "False"
    __slots__ = ("_status", "_changed")
    _hx_fields = ["_status", "_changed"]
    _hx_methods = ["asProgress", "progress", "finish"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_core__Progress_ProgressObject


    def __init__(self,status = None):
        self._status = None
        self._changed = None
        _gthis = self
        if (status is None):
            status = tink_core_ProgressStatus.InProgress(tink_core__Progress_ProgressValue_Impl_.ZERO)
            self._status = status
        tmp = None
        if (status is None):
            tmp = False
        elif (status.index == 1):
            _g = status.params[0]
            tmp = True
        else:
            tmp = False
        def _hx_local_2():
            def _hx_local_0():
                self._changed = tink_core__Signal_Signal_Impl_.trigger()
                return self._changed
            return tink_core__Signal_Signal_Impl_.dead() if tmp else _hx_local_0()
        def _hx_local_3():
            return _gthis._status
        super().__init__(_hx_local_2(),_hx_local_3)

    def asProgress(self):
        return self

    def progress(self,v,total):
        _g = self._status
        tmp = None
        if (_g.index == 1):
            _g1 = _g.params[0]
            tmp = True
        else:
            tmp = False
        if (not tmp):
            _this = self._changed
            this1 = tink_core_MPair(v,total)
            def _hx_local_0():
                self._status = tink_core_ProgressStatus.InProgress(this1)
                return self._status
            _this.handlers.invoke(_hx_local_0())

    def finish(self,v):
        _g = self._status
        tmp = None
        if (_g.index == 1):
            _g1 = _g.params[0]
            tmp = True
        else:
            tmp = False
        if (not tmp):
            def _hx_local_0():
                self._status = tink_core_ProgressStatus.Finished(v)
                return self._status
            self._changed.handlers.invoke(_hx_local_0())

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._status = None
        _hx_o._changed = None
tink_core_ProgressTrigger._hx_class = tink_core_ProgressTrigger
_hx_classes["tink.core.ProgressTrigger"] = tink_core_ProgressTrigger


class tink_core__Progress_UnitInterval_Impl_:
    _hx_class_name = "tink.core._Progress.UnitInterval_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["toPercentageString"]

    @staticmethod
    def toPercentageString(this1,dp):
        m = Math.pow(10,dp)
        v = (Math.floor((((this1 * m) * 100) + 0.5)) / m)
        s = Std.string(v)
        startIndex = None
        _g = (s.find(".") if ((startIndex is None)) else HxString.indexOfImpl(s,".",startIndex))
        if (_g == -1):
            return (((("null" if s is None else s) + ".") + HxOverrides.stringOrNull(StringTools.lpad("","0",dp))) + "%")
        else:
            i = _g
            if ((len(s) - i) > dp):
                return (HxOverrides.stringOrNull(HxString.substr(s,0,((dp + i) + 1))) + "%")
            else:
                i = _g
                return (HxOverrides.stringOrNull(StringTools.rpad(s,"0",((i + dp) + 1))) + "%")
tink_core__Progress_UnitInterval_Impl_._hx_class = tink_core__Progress_UnitInterval_Impl_
_hx_classes["tink.core._Progress.UnitInterval_Impl_"] = tink_core__Progress_UnitInterval_Impl_

class tink_core_ProgressStatus(Enum):
    __slots__ = ()
    _hx_class_name = "tink.core.ProgressStatus"
    _hx_constructs = ["InProgress", "Finished"]

    @staticmethod
    def InProgress(v):
        return tink_core_ProgressStatus("InProgress", 0, (v,))

    @staticmethod
    def Finished(v):
        return tink_core_ProgressStatus("Finished", 1, (v,))
tink_core_ProgressStatus._hx_class = tink_core_ProgressStatus
_hx_classes["tink.core.ProgressStatus"] = tink_core_ProgressStatus


class tink_core_ProgressStatusTools:
    _hx_class_name = "tink.core.ProgressStatusTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["map"]

    @staticmethod
    def map(p,f):
        tmp = p.index
        if (tmp == 0):
            v = p.params[0]
            return tink_core_ProgressStatus.InProgress(v)
        elif (tmp == 1):
            v = p.params[0]
            return tink_core_ProgressStatus.Finished(f(v))
        else:
            pass
tink_core_ProgressStatusTools._hx_class = tink_core_ProgressStatusTools
_hx_classes["tink.core.ProgressStatusTools"] = tink_core_ProgressStatusTools


class tink_core_TotalTools:
    _hx_class_name = "tink.core.TotalTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["eq"]

    @staticmethod
    def eq(a,b):
        tmp = a.index
        if (tmp == 0):
            if (b.index == 0):
                t2 = b.params[0]
                t1 = a.params[0]
                return (t1 == t2)
            else:
                return False
        elif (tmp == 1):
            if (b.index == 1):
                return True
            else:
                return False
        else:
            pass
tink_core_TotalTools._hx_class = tink_core_TotalTools
_hx_classes["tink.core.TotalTools"] = tink_core_TotalTools


class tink_core_ProgressTools:
    _hx_class_name = "tink.core.ProgressTools"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["asPromise"]

    @staticmethod
    def asPromise(p):
        return p.result
tink_core_ProgressTools._hx_class = tink_core_ProgressTools
_hx_classes["tink.core.ProgressTools"] = tink_core_ProgressTools


class tink_core__Promise_Promise_Impl_:
    _hx_class_name = "tink.core._Promise.Promise_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["NOISE", "NEVER", "never", "_new", "eager", "map", "flatMap", "tryRecover", "recover", "mapError", "withSideEffect", "handle", "noise", "isSuccess", "next", "swap", "swapError", "merge", "irreversible", "and", "iterate", "retry", "ofSpecific", "fromNever", "ofTrigger", "ofHappyTrigger", "ofFuture", "ofOutcome", "ofError", "ofData", "asFuture", "lazy", "inParallel", "many", "inSequence", "cache", "lift", "trigger", "resolve", "reject"]

    @staticmethod
    def never():
        return tink_core__Future_Future_Impl_.never()

    @staticmethod
    def _new(f):
        def _hx_local_4():
            def _hx_local_3(cb):
                def _hx_local_2():
                    def _hx_local_0(v):
                        cb(tink_core_Outcome.Success(v))
                    def _hx_local_1(e):
                        cb(tink_core_Outcome.Failure(e))
                    return f(_hx_local_0,_hx_local_1)
                return _hx_local_2()
            return tink_core__Future_SuspendableFuture(_hx_local_3)
        return _hx_local_4()

    @staticmethod
    def eager(this1):
        this1.eager()
        return this1

    @staticmethod
    def map(this1,f):
        return tink_core__Future_Future_Impl_.map(this1,f)

    @staticmethod
    def flatMap(this1,f):
        return tink_core__Future_Future_Impl_.flatMap(this1,f)

    @staticmethod
    def tryRecover(this1,f):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(o))
                elif (tmp == 1):
                    e = o.params[0]
                    return f(e)
                else:
                    pass
            return tink_core__Future_Future_Impl_.flatMap(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def recover(this1,f):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(d))
                elif (tmp == 1):
                    e = o.params[0]
                    return f(e)
                else:
                    pass
            return tink_core__Future_Future_Impl_.flatMap(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def mapError(this1,f):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    _g = o.params[0]
                    return o
                elif (tmp == 1):
                    e = o.params[0]
                    return tink_core_Outcome.Failure(f(e))
                else:
                    pass
            return tink_core__Future_Future_Impl_.map(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def withSideEffect(this1,c):
        def _hx_local_0(o):
            if (o.index == 0):
                data = o.params[0]
                tink_core__Callback_Callback_Impl_.invoke(c,data)
        c1 = _hx_local_0
        def _hx_local_2():
            def _hx_local_1(v):
                tink_core__Callback_Callback_Impl_.invoke(c1,v)
                return v
            return tink_core__Future_Future_Impl_.map(this1,_hx_local_1)
        return _hx_local_2()

    @staticmethod
    def handle(this1,cb):
        return this1.handle(cb)

    @staticmethod
    def noise(this1):
        if (this1.getStatus().index == 4):
            return tink_core__Promise_Promise_Impl_.never()
        else:
            def _hx_local_1():
                def _hx_local_0(v):
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(None)))
                return tink_core__Promise_Promise_Impl_.next(this1,_hx_local_0)
            return _hx_local_1()

    @staticmethod
    def isSuccess(this1):
        def _hx_local_1():
            def _hx_local_0(o):
                return tink_core_OutcomeTools.isSuccess(o)
            return tink_core__Future_Future_Impl_.map(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def next(this1,f,gather = None):
        def _hx_local_1():
            def _hx_local_0(o):
                tmp = o.index
                if (tmp == 0):
                    d = o.params[0]
                    return f(d)
                elif (tmp == 1):
                    f1 = o.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(f1)))
                else:
                    pass
            return tink_core__Future_Future_Impl_.flatMap(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def swap(this1,v):
        def _hx_local_1():
            def _hx_local_0(_):
                return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(v)))
            return tink_core__Promise_Promise_Impl_.next(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def swapError(this1,e):
        def _hx_local_1():
            def _hx_local_0(_):
                return e
            return tink_core__Promise_Promise_Impl_.mapError(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def merge(this1,other,merger,gather = None):
        def _hx_local_2():
            def _hx_local_0(a,b):
                tmp = a.index
                if (tmp == 0):
                    _g = a.params[0]
                    tmp = b.index
                    if (tmp == 0):
                        b1 = b.params[0]
                        a1 = _g
                        return merger(a1,b1)
                    elif (tmp == 1):
                        e = b.params[0]
                        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(e)))
                    else:
                        pass
                elif (tmp == 1):
                    e = a.params[0]
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(e)))
                else:
                    pass
            def _hx_local_1(o):
                return o
            return tink_core__Future_Future_Impl_.flatMap(tink_core__Future_Future_Impl_.merge(this1,other,_hx_local_0),_hx_local_1)
        return _hx_local_2()

    @staticmethod
    def irreversible(f):
        def _hx_local_0(res,rej):
            f(res,rej)
            return None
        f1 = _hx_local_0
        def _hx_local_5():
            def _hx_local_4(cb):
                def _hx_local_3():
                    def _hx_local_1(v):
                        cb(tink_core_Outcome.Success(v))
                    def _hx_local_2(e):
                        cb(tink_core_Outcome.Failure(e))
                    return f1(_hx_local_1,_hx_local_2)
                return _hx_local_3()
            return tink_core__Future_SuspendableFuture(_hx_local_4)
        return _hx_local_5()

    @staticmethod
    def _hx_and(a,b):
        def _hx_local_1():
            def _hx_local_0(a,b):
                return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(tink_core_MPair(a,b))))
            return tink_core__Promise_Promise_Impl_.merge(a,b,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def iterate(promises,_hx_yield,fallback,fallThroughOnError = None):
        if (fallThroughOnError is None):
            fallThroughOnError = False
        def _hx_local_4():
            def _hx_local_3(cb):
                _hx_iter = HxOverrides.iterator(promises)
                next = None
                def _hx_local_2():
                    if _hx_iter.hasNext():
                        def _hx_local_1(o):
                            next1 = o.index
                            if (next1 == 0):
                                v = o.params[0]
                                def _hx_local_0(o):
                                    next1 = o.index
                                    if (next1 == 0):
                                        _g = o.params[0]
                                        next1 = _g.index
                                        if (next1 == 0):
                                            ret = _g.params[0]
                                            cb(tink_core_Outcome.Success(ret))
                                        elif (next1 == 1):
                                            next()
                                        else:
                                            pass
                                    elif (next1 == 1):
                                        e = o.params[0]
                                        cb(tink_core_Outcome.Failure(e))
                                    else:
                                        pass
                                _hx_yield(v).handle(_hx_local_0)
                            elif (next1 == 1):
                                e = o.params[0]
                                if fallThroughOnError:
                                    next()
                                else:
                                    cb(tink_core_Outcome.Failure(e))
                            else:
                                pass
                        _hx_iter.next().handle(_hx_local_1)
                    else:
                        fallback.handle(cb)
                next = _hx_local_2
                next()
            return tink_core__Future_Future_Impl_.irreversible(_hx_local_3)
        return _hx_local_4()

    @staticmethod
    def retry(gen,next):
        def _hx_local_0():
            return (python_lib_Timeit.default_timer() * 1000)
        stamp = _hx_local_0
        start = stamp()
        attempt = None
        def _hx_local_6(count):
            def _hx_local_3(error):
                def _hx_local_2():
                    def _hx_local_1(_):
                        return attempt((count + 1))
                    return tink_core__Promise_Promise_Impl_.next(next(_hx_AnonObject({'attempt': count, 'error': error, 'elapsed': (stamp() - start)})),_hx_local_1)
                return _hx_local_2()
            f = _hx_local_3
            def _hx_local_5():
                def _hx_local_4(o):
                    attempt = o.index
                    if (attempt == 0):
                        d = o.params[0]
                        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(o))
                    elif (attempt == 1):
                        e = o.params[0]
                        return f(e)
                    else:
                        pass
                return tink_core__Future_Future_Impl_.flatMap(gen(),_hx_local_4)
            return _hx_local_5()
        attempt = _hx_local_6
        return attempt(1)

    @staticmethod
    def ofSpecific(s):
        return s

    @staticmethod
    def fromNever(l):
        return l

    @staticmethod
    def ofTrigger(f):
        return f

    @staticmethod
    def ofHappyTrigger(f):
        return tink_core__Future_Future_Impl_.map(f,tink_core_Outcome.Success)

    @staticmethod
    def ofFuture(f):
        return tink_core__Future_Future_Impl_.map(f,tink_core_Outcome.Success)

    @staticmethod
    def ofOutcome(o):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(o))

    @staticmethod
    def ofError(e):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(e)))

    @staticmethod
    def ofData(d):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(d)))

    @staticmethod
    def asFuture(this1):
        return this1

    @staticmethod
    def lazy(p):
        def _hx_local_1():
            def _hx_local_0(cb):
                return tink_core__Lazy_Lazy_Impl_.get(p).handle(cb)
            return tink_core__Future_SuspendableFuture(_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def inParallel(a,concurrency = None):
        return tink_core__Promise_Promise_Impl_.many(a,concurrency)

    @staticmethod
    def many(a,concurrency = None):
        def _hx_local_2():
            def _hx_local_0(o):
                return o
            def _hx_local_1(o):
                return o
            return tink_core__Future_Future_Impl_.processMany(a,concurrency,_hx_local_0,_hx_local_1)
        return _hx_local_2()

    @staticmethod
    def inSequence(a):
        return tink_core__Promise_Promise_Impl_.many(a,1)

    @staticmethod
    def cache(gen):
        p = None
        def _hx_local_0():
            nonlocal p
            ret = p
            if (ret is None):
                sync = False
                def _hx_local_2(o):
                    def _hx_local_1(_):
                        nonlocal p
                        nonlocal sync
                        sync = True
                        p = None
                    o.b.handle(_hx_local_1)
                    return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(o.a)))
                ret = tink_core__Promise_Promise_Impl_.next(gen(),_hx_local_2)
                if (not sync):
                    p = ret
            def _hx_local_4():
                def _hx_local_3(o):
                    nonlocal p
                    if (not tink_core_OutcomeTools.isSuccess(o)):
                        p = None
                    return o
                return tink_core__Future_Future_Impl_.map(ret,_hx_local_3)
            return _hx_local_4()
        return _hx_local_0

    @staticmethod
    def lift(p):
        return p

    @staticmethod
    def trigger():
        return tink_core_FutureTrigger()

    @staticmethod
    def resolve(v):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(v)))

    @staticmethod
    def reject(e):
        return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Failure(e)))
tink_core__Promise_Promise_Impl_._hx_class = tink_core__Promise_Promise_Impl_
_hx_classes["tink.core._Promise.Promise_Impl_"] = tink_core__Promise_Promise_Impl_


class tink_core__Promise_Next_Impl_:
    _hx_class_name = "tink.core._Promise.Next_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["ofSafe", "ofSync", "ofSafeSync", "_chain"]

    @staticmethod
    def ofSafe(f):
        def _hx_local_0(x):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(f(x)))
        return _hx_local_0

    @staticmethod
    def ofSync(f):
        def _hx_local_0(x):
            return tink_core__Future_Future_Impl_.map(f(x),tink_core_Outcome.Success)
        return _hx_local_0

    @staticmethod
    def ofSafeSync(f):
        def _hx_local_0(x):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(f(x))))
        return _hx_local_0

    @staticmethod
    def _chain(a,b):
        def _hx_local_0(v):
            return tink_core__Promise_Promise_Impl_.next(a(v),b)
        return _hx_local_0
tink_core__Promise_Next_Impl_._hx_class = tink_core__Promise_Next_Impl_
_hx_classes["tink.core._Promise.Next_Impl_"] = tink_core__Promise_Next_Impl_


class tink_core__Promise_Recover_Impl_:
    _hx_class_name = "tink.core._Promise.Recover_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["ofSync"]

    @staticmethod
    def ofSync(f):
        def _hx_local_0(e):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(f(e)))
        return _hx_local_0
tink_core__Promise_Recover_Impl_._hx_class = tink_core__Promise_Recover_Impl_
_hx_classes["tink.core._Promise.Recover_Impl_"] = tink_core__Promise_Recover_Impl_


class tink_core__Promise_Combiner_Impl_:
    _hx_class_name = "tink.core._Promise.Combiner_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["ofSync", "ofSafe", "ofSafeSync"]

    @staticmethod
    def ofSync(f):
        def _hx_local_0(x1,x2):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(f(x1,x2)))
        return _hx_local_0

    @staticmethod
    def ofSafe(f):
        def _hx_local_0(x1,x2):
            return tink_core__Future_Future_Impl_.map(f(x1,x2),tink_core_Outcome.Success)
        return _hx_local_0

    @staticmethod
    def ofSafeSync(f):
        def _hx_local_0(x1,x2):
            return tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))))
        return _hx_local_0
tink_core__Promise_Combiner_Impl_._hx_class = tink_core__Promise_Combiner_Impl_
_hx_classes["tink.core._Promise.Combiner_Impl_"] = tink_core__Promise_Combiner_Impl_


class tink_core__Promise_PromiseTrigger_Impl_:
    _hx_class_name = "tink.core._Promise.PromiseTrigger_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "resolve", "reject", "asPromise"]

    @staticmethod
    def _new():
        return tink_core_FutureTrigger()

    @staticmethod
    def resolve(this1,v):
        return this1.trigger(tink_core_Outcome.Success(v))

    @staticmethod
    def reject(this1,e):
        return this1.trigger(tink_core_Outcome.Failure(e))

    @staticmethod
    def asPromise(this1):
        return this1
tink_core__Promise_PromiseTrigger_Impl_._hx_class = tink_core__Promise_PromiseTrigger_Impl_
_hx_classes["tink.core._Promise.PromiseTrigger_Impl_"] = tink_core__Promise_PromiseTrigger_Impl_


class tink_core__Ref_Ref_Impl_:
    _hx_class_name = "tink.core._Ref.Ref_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "get_value", "set_value", "toString", "to"]
    value = None

    @staticmethod
    def _new():
        return ([None]*1)

    @staticmethod
    def get_value(this1):
        return this1[0]

    @staticmethod
    def set_value(this1,param):
        this1[0] = param
        return param

    @staticmethod
    def toString(this1):
        return (("@[" + Std.string(this1[0])) + "]")

    @staticmethod
    def to(v):
        ret = ([None]*1)
        ret[0] = v
        return ret
tink_core__Ref_Ref_Impl_._hx_class = tink_core__Ref_Ref_Impl_
_hx_classes["tink.core._Ref.Ref_Impl_"] = tink_core__Ref_Ref_Impl_


class tink_core__Signal_Gather_Impl_:
    _hx_class_name = "tink.core._Signal.Gather_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "ofBool"]

    @staticmethod
    def _new(v):
        return v

    @staticmethod
    def ofBool(b):
        return b
tink_core__Signal_Gather_Impl_._hx_class = tink_core__Signal_Gather_Impl_
_hx_classes["tink.core._Signal.Gather_Impl_"] = tink_core__Signal_Gather_Impl_


class tink_core__Signal_Signal_Impl_:
    _hx_class_name = "tink.core._Signal.Signal_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "handle", "map", "flatMap", "filter", "select", "join", "nextTime", "pickNext", "until", "next", "noise", "gather", "create", "generate", "trigger", "ofClassical", "dead"]

    @staticmethod
    def _new(f,init = None):
        return tink_core__Signal_Suspendable(f,init)

    @staticmethod
    def handle(this1,handler):
        return this1.listen(handler)

    @staticmethod
    def map(this1,f,gather = None):
        def _hx_local_3():
            def _hx_local_2(fire):
                def _hx_local_1():
                    def _hx_local_0(v):
                        fire(f(v))
                    return this1.listen(_hx_local_0)
                return _hx_local_1()
            return tink_core__Signal_Suspendable.over(this1,_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def flatMap(this1,f,gather = None):
        def _hx_local_3():
            def _hx_local_2(fire):
                def _hx_local_1():
                    def _hx_local_0(v):
                        f(v).handle(fire)
                    return this1.listen(_hx_local_0)
                return _hx_local_1()
            return tink_core__Signal_Suspendable.over(this1,_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def filter(this1,f,gather = None):
        def _hx_local_3():
            def _hx_local_2(fire):
                def _hx_local_1():
                    def _hx_local_0(v):
                        if f(v):
                            fire(v)
                    return this1.listen(_hx_local_0)
                return _hx_local_1()
            return tink_core__Signal_Suspendable.over(this1,_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def select(this1,selector,gather = None):
        def _hx_local_3():
            def _hx_local_2(fire):
                def _hx_local_1():
                    def _hx_local_0(v):
                        _g = selector(v)
                        if (_g.index == 0):
                            v = _g.params[0]
                            fire(v)
                    return this1.listen(_hx_local_0)
                return _hx_local_1()
            return tink_core__Signal_Suspendable.over(this1,_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def join(this1,that,gather = None):
        if this1.get_disposed():
            return that
        elif that.get_disposed():
            return this1
        else:
            def _hx_local_3():
                def _hx_local_0(fire):
                    cb = fire
                    return tink_core__Callback_LinkPair(this1.listen(cb),that.listen(cb))
                def _hx_local_2(_hx_self):
                    def _hx_local_1():
                        if (this1.get_disposed() and that.get_disposed()):
                            _hx_self.dispose()
                    release = _hx_local_1
                    this1.ondispose(release)
                    that.ondispose(release)
                return tink_core__Signal_Suspendable(_hx_local_0,_hx_local_2)
            return _hx_local_3()

    @staticmethod
    def nextTime(this1,condition = None):
        def _hx_local_1():
            def _hx_local_0(v):
                if ((condition is None) or condition(v)):
                    return haxe_ds_Option.Some(v)
                else:
                    return haxe_ds_Option._hx_None
            return tink_core__Signal_Signal_Impl_.pickNext(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def pickNext(this1,selector):
        ret = tink_core_FutureTrigger()
        link = None
        def _hx_local_0(v):
            _g = selector(v)
            link = _g.index
            if (link == 0):
                v = _g.params[0]
                ret.trigger(v)
            elif (link == 1):
                pass
            else:
                pass
        link = this1.listen(_hx_local_0)
        tmp = None
        if (link is None):
            def _hx_local_1(_):
                tink_core__Callback_CallbackLink_Impl_.noop()
            tmp = _hx_local_1
        else:
            f = link.cancel
            def _hx_local_2(_):
                f()
            tmp = _hx_local_2
        ret.handle(tmp)
        return ret

    @staticmethod
    def until(this1,end):
        def _hx_local_3():
            def _hx_local_0(_hx_yield):
                return this1.listen(_hx_yield)
            def _hx_local_2(_hx_self):
                f = _hx_self.dispose
                def _hx_local_1(_):
                    f()
                tmp = _hx_local_1
                end.handle(tmp)
            return tink_core__Signal_Suspendable(_hx_local_0,_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def next(this1,condition = None):
        return tink_core__Signal_Signal_Impl_.nextTime(this1,condition)

    @staticmethod
    def noise(this1):
        def _hx_local_1():
            def _hx_local_0(_):
                return None
            return tink_core__Signal_Signal_Impl_.map(this1,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def gather(this1):
        return this1

    @staticmethod
    def create(f):
        return tink_core__Signal_Suspendable(f,None)

    @staticmethod
    def generate(generator,init = None):
        def _hx_local_1():
            def _hx_local_0(fire):
                generator(fire)
                return None
            return tink_core__Signal_Suspendable(_hx_local_0,init)
        return _hx_local_1()

    @staticmethod
    def trigger():
        return tink_core_SignalTrigger()

    @staticmethod
    def ofClassical(add,remove,gather = None):
        def _hx_local_3():
            def _hx_local_2(fire):
                add(fire)
                _g = remove
                a1 = fire
                def _hx_local_1():
                    def _hx_local_0():
                        _g(a1)
                    return tink_core_SimpleLink(_hx_local_0)
                return _hx_local_1()
            return tink_core__Signal_Suspendable(_hx_local_2)
        return _hx_local_3()

    @staticmethod
    def dead():
        return tink_core__Signal_Disposed.INST
tink_core__Signal_Signal_Impl_._hx_class = tink_core__Signal_Signal_Impl_
_hx_classes["tink.core._Signal.Signal_Impl_"] = tink_core__Signal_Signal_Impl_


class tink_core__Signal_SignalObject:
    _hx_class_name = "tink.core._Signal.SignalObject"
    _hx_is_interface = "True"
    __slots__ = ()
    _hx_methods = ["listen"]
    _hx_interfaces = [tink_core_Disposable]
tink_core__Signal_SignalObject._hx_class = tink_core__Signal_SignalObject
_hx_classes["tink.core._Signal.SignalObject"] = tink_core__Signal_SignalObject


class tink_core__Signal_Disposed(tink_core_AlreadyDisposed):
    _hx_class_name = "tink.core._Signal.Disposed"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["listen"]
    _hx_statics = ["INST"]
    _hx_interfaces = [tink_core__Signal_SignalObject]
    _hx_super = tink_core_AlreadyDisposed


    def __init__(self):
        super().__init__()

    def listen(self,cb):
        return None

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_core__Signal_Disposed._hx_class = tink_core__Signal_Disposed
_hx_classes["tink.core._Signal.Disposed"] = tink_core__Signal_Disposed


class tink_core__Signal_Suspendable:
    _hx_class_name = "tink.core._Signal.Suspendable"
    _hx_is_interface = "False"
    __slots__ = ("handlers", "activate", "init", "subscription")
    _hx_fields = ["handlers", "activate", "init", "subscription"]
    _hx_methods = ["get_disposed", "dispose", "ondispose", "listen"]
    _hx_statics = ["over"]
    _hx_interfaces = [tink_core_OwnedDisposable, tink_core__Signal_SignalObject]

    def __init__(self,activate,init = None):
        self.subscription = None
        self.init = None
        self.activate = None
        self.handlers = tink_core_CallbackList()
        _gthis = self
        self.activate = activate
        self.init = init
        def _hx_local_0():
            this1 = _gthis.subscription
            if (this1 is not None):
                this1.cancel()
        self.handlers.ondrain = _hx_local_0
        def _hx_local_1():
            nonlocal init
            if (init is not None):
                f = init
                init = None
                f(_gthis)
            _gthis.subscription = activate(_gthis.handlers.invoke)
        self.handlers.onfill = _hx_local_1

    def get_disposed(self):
        return (self.handlers.disposeHandlers is None)

    def dispose(self):
        self.handlers.dispose()

    def ondispose(self,handler):
        self.handlers.ondispose(handler)

    def listen(self,cb):
        _this = self.handlers
        if (_this.disposeHandlers is None):
            return None
        else:
            node = tink_core__Callback_ListCell(cb,_this)
            _this1 = _this.cells
            _this1.append(node)
            def _hx_local_1():
                _hx_local_0 = _this.used
                _this.used = (_this.used + 1)
                return _hx_local_0
            tmp = (_hx_local_1() == 0)
            if tmp:
                fn = _this.onfill
                if (tink_core__Callback_Callback_Impl_.depth < 100):
                    _hx_local_2 = tink_core__Callback_Callback_Impl_
                    _hx_local_3 = _hx_local_2.depth
                    _hx_local_2.depth = (_hx_local_3 + 1)
                    _hx_local_3
                    fn()
                    _hx_local_4 = tink_core__Callback_Callback_Impl_
                    _hx_local_5 = _hx_local_4.depth
                    _hx_local_4.depth = (_hx_local_5 - 1)
                    _hx_local_5
                else:
                    tink_core__Callback_Callback_Impl_.defer(fn)
            return node

    @staticmethod
    def over(s,activate):
        if s.get_disposed():
            return tink_core__Signal_Signal_Impl_.dead()
        else:
            ret = tink_core__Signal_Suspendable(activate)
            s.ondispose(ret.dispose)
            return ret

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.handlers = None
        _hx_o.activate = None
        _hx_o.init = None
        _hx_o.subscription = None
tink_core__Signal_Suspendable._hx_class = tink_core__Signal_Suspendable
_hx_classes["tink.core._Signal.Suspendable"] = tink_core__Signal_Suspendable


class tink_core_SignalTrigger:
    _hx_class_name = "tink.core.SignalTrigger"
    _hx_is_interface = "False"
    __slots__ = ("handlers",)
    _hx_fields = ["handlers"]
    _hx_methods = ["get_disposed", "dispose", "ondispose", "trigger", "getLength", "listen", "clear", "asSignal"]
    _hx_interfaces = [tink_core_OwnedDisposable, tink_core__Signal_SignalObject]

    def __init__(self):
        self.handlers = tink_core_CallbackList()

    def get_disposed(self):
        return (self.handlers.disposeHandlers is None)

    def dispose(self):
        self.handlers.dispose()

    def ondispose(self,d):
        self.handlers.ondispose(d)

    def trigger(self,event):
        self.handlers.invoke(event)

    def getLength(self):
        return self.handlers.used

    def listen(self,cb):
        _this = self.handlers
        if (_this.disposeHandlers is None):
            return None
        else:
            node = tink_core__Callback_ListCell(cb,_this)
            _this1 = _this.cells
            _this1.append(node)
            def _hx_local_1():
                _hx_local_0 = _this.used
                _this.used = (_this.used + 1)
                return _hx_local_0
            tmp = (_hx_local_1() == 0)
            if tmp:
                fn = _this.onfill
                if (tink_core__Callback_Callback_Impl_.depth < 100):
                    _hx_local_2 = tink_core__Callback_Callback_Impl_
                    _hx_local_3 = _hx_local_2.depth
                    _hx_local_2.depth = (_hx_local_3 + 1)
                    _hx_local_3
                    fn()
                    _hx_local_4 = tink_core__Callback_Callback_Impl_
                    _hx_local_5 = _hx_local_4.depth
                    _hx_local_4.depth = (_hx_local_5 - 1)
                    _hx_local_5
                else:
                    tink_core__Callback_Callback_Impl_.defer(fn)
            return node

    def clear(self):
        self.handlers.clear()

    def asSignal(self):
        return self

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.handlers = None
tink_core_SignalTrigger._hx_class = tink_core_SignalTrigger
_hx_classes["tink.core.SignalTrigger"] = tink_core_SignalTrigger


class tink_json__Char_Char_Impl_:
    _hx_class_name = "tink.json._Char.Char_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["toString"]

    @staticmethod
    def toString(this1):
        return "".join(map(chr,[this1]))
tink_json__Char_Char_Impl_._hx_class = tink_json__Char_Char_Impl_
_hx_classes["tink.json._Char.Char_Impl_"] = tink_json__Char_Char_Impl_


class tink_json_Parser:
    _hx_class_name = "tink.json.Parser"
    _hx_is_interface = "False"
    __slots__ = ()
tink_json_Parser._hx_class = tink_json_Parser
_hx_classes["tink.json.Parser"] = tink_json_Parser


class tink_json__Parser_RawData_Impl_:
    _hx_class_name = "tink.json._Parser.RawData_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "hasBackslash", "getChar", "charPos", "hasId"]

    @staticmethod
    def _new(s,setLength):
        setLength(len(s))
        return s

    @staticmethod
    def hasBackslash(this1,_hx_min,_hx_max):
        _g = _hx_min
        _g1 = _hx_max
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 92):
                return True
        return False

    @staticmethod
    def getChar(this1,i):
        if (i >= len(this1)):
            return -1
        else:
            return ord(this1[i])

    @staticmethod
    def charPos(this1,char,start,end):
        if (start is None):
            return this1.find(char)
        else:
            return HxString.indexOfImpl(this1,char,start)

    @staticmethod
    def hasId(this1,s,_hx_min,_hx_max):
        return (HxString.substring(this1,_hx_min,_hx_max) == s)
tink_json__Parser_RawData_Impl_._hx_class = tink_json__Parser_RawData_Impl_
_hx_classes["tink.json._Parser.RawData_Impl_"] = tink_json__Parser_RawData_Impl_


class tink_json__Parser_Char_Impl_:
    _hx_class_name = "tink.json._Parser.Char_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new"]

    @staticmethod
    def _new(code):
        return "".join(map(chr,[code]))
tink_json__Parser_Char_Impl_._hx_class = tink_json__Parser_Char_Impl_
_hx_classes["tink.json._Parser.Char_Impl_"] = tink_json__Parser_Char_Impl_


class tink_json__Parser_SliceData:
    _hx_class_name = "tink.json._Parser.SliceData"
    _hx_is_interface = "False"
    __slots__ = ("source", "min", "max")
    _hx_fields = ["source", "min", "max"]

    def __init__(self,source,_hx_min,_hx_max):
        self.source = source
        self.min = _hx_min
        self.max = _hx_max

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.source = None
        _hx_o.min = None
        _hx_o.max = None
tink_json__Parser_SliceData._hx_class = tink_json__Parser_SliceData
_hx_classes["tink.json._Parser.SliceData"] = tink_json__Parser_SliceData


class tink_json__Parser_JsonString_Impl_:
    _hx_class_name = "tink.json._Parser.JsonString_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["_new", "toString", "get", "toInt", "toUInt", "toFloat", "equalsString"]

    @staticmethod
    def _new(raw,_hx_min,_hx_max):
        return tink_json__Parser_SliceData(raw,_hx_min,_hx_max)

    @staticmethod
    def toString(this1):
        if tink_json__Parser_RawData_Impl_.hasBackslash(this1.source,this1.min,this1.max):
            return haxe_format_JsonParser(HxString.substring(this1.source,(this1.min - 1),(this1.max + 1))).doParse()
        else:
            return HxString.substring(this1.source,this1.min,this1.max)

    @staticmethod
    def get(this1):
        return HxString.substring(this1.source,this1.min,this1.max)

    @staticmethod
    def toInt(this1):
        return Std.parseInt(HxString.substring(this1.source,this1.min,this1.max))

    @staticmethod
    def toUInt(this1):
        ret = 0
        v = HxString.substring(this1.source,this1.min,this1.max)
        _g = 0
        _g1 = len(v)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            b = Std.parseInt(("" if (((i < 0) or ((i >= len(v))))) else v[i]))
            x = Math.pow(10,((len(v) - i) - 1))
            b1 = None
            try:
                b1 = int(x)
            except BaseException as _g2:
                None
                b1 = None
            ret = (ret + (b * b1))
        return ret

    @staticmethod
    def toFloat(this1):
        return Std.parseFloat(HxString.substring(this1.source,this1.min,this1.max))

    @staticmethod
    def equalsString(a,b):
        if (len(b) == ((a.max - a.min))):
            return (HxString.substring(a.source,a.min,a.max) == b)
        else:
            return False
tink_json__Parser_JsonString_Impl_._hx_class = tink_json__Parser_JsonString_Impl_
_hx_classes["tink.json._Parser.JsonString_Impl_"] = tink_json__Parser_JsonString_Impl_


class tink_json_BasicParser:
    _hx_class_name = "tink.json.BasicParser"
    _hx_is_interface = "False"
    __slots__ = ("plugins", "source", "pos", "max", "afterParsing")
    _hx_fields = ["plugins", "source", "pos", "max", "afterParsing"]
    _hx_methods = ["init", "skipIgnored", "parseDynamic", "copyFields", "emptyInstance", "parseString", "parseRestOfString", "skipString", "parseNumber", "doParseNumber", "invalidNumber", "skipNumber", "slice", "next", "toChar", "parseSerialized", "parseValue", "skipArray", "skipValue", "invalidChar", "die", "parseBool"]
    _hx_statics = ["DBQT", "isDigit", "startsNumber"]

    def __init__(self):
        self.max = None
        self.pos = None
        self.source = None
        self.plugins = None
        self.afterParsing = list()
        self.plugins = tink_core_Annex(self)

    def init(self,source):
        self.pos = 0
        self.max = len(source)
        self.source = source
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1

    def skipIgnored(self):
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1

    def parseDynamic(self):
        start = self.pos
        self.skipValue()
        return haxe_format_JsonParser(HxString.substring(self.source,start,self.pos)).doParse()

    def copyFields(self,target,source):
        _g = 0
        _g1 = python_Boot.fields(source)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            value = Reflect.field(source,f)
            setattr(target,(("_hx_" + f) if ((f in python_Boot.keywords)) else (("_hx_" + f) if (((((len(f) > 2) and ((ord(f[0]) == 95))) and ((ord(f[1]) == 95))) and ((ord(f[(len(f) - 1)]) != 95)))) else f)),value)
        return target

    def emptyInstance(self,cls):
        return Type.createEmptyInstance(cls)

    def parseString(self):
        while True:
            e = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                e = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                e = False
            if (not e):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        e = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 34):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            e = True
        else:
            e = False
        e1 = (self.die(("Expected " + "string")) if ((not e)) else None)
        return self.parseRestOfString()

    def parseRestOfString(self):
        return self.slice(self.skipString(),(self.pos - 1))

    def skipString(self):
        start = self.pos
        while True:
            this1 = self.source
            char = tink_json_BasicParser.DBQT
            start1 = self.pos
            end = self.max
            _g = (this1.find(char) if ((start1 is None)) else HxString.indexOfImpl(this1,char,start1))
            if (_g == -1):
                self.die("unterminated string",start)
            else:
                v = _g
                self.pos = (v + 1)
                p = (self.pos - 2)
                while True:
                    this2 = self.source
                    if (not ((((-1 if ((p >= len(this2))) else ord(this2[p]))) == 92))):
                        break
                    p = (p - 1)
                if ((((p - self.pos) & 1)) == 0):
                    break
        return start

    def parseNumber(self):
        this1 = self.source
        i = self.pos
        char = (-1 if ((i >= len(this1))) else ord(this1[i]))
        if (((char == 46) or ((char == 45))) or (((char < 58) and ((char > 47))))):
            return self.doParseNumber()
        else:
            return self.die("number expected")

    def doParseNumber(self):
        this1 = self.source
        i = self.pos
        self.pos = (self.pos + 1)
        return self.slice(self.skipNumber((-1 if ((i >= len(this1))) else ord(this1[i]))),self.pos)

    def invalidNumber(self,start):
        return self.die(("Invalid number " + HxOverrides.stringOrNull(HxString.substring(self.source,start,self.pos))),start)

    def skipNumber(self,c):
        start = (self.pos - 1)
        minus = (c == 45)
        digit = (not minus)
        zero = (c == 48)
        point = False
        e = False
        pm = False
        end = False
        while (self.pos < self.max):
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            c = (-1 if ((i >= len(this1))) else ord(this1[i]))
            c1 = c
            if ((c1 == 45) or ((c1 == 43))):
                if ((not e) or pm):
                    self.invalidNumber(start)
                digit = False
                pm = True
            elif (c1 == 46):
                if (minus or point):
                    self.invalidNumber(start)
                digit = False
                point = True
            elif (c1 == 48):
                if (zero and (not point)):
                    self.invalidNumber(start)
                if minus:
                    minus = False
                    zero = True
                digit = True
            elif (((((((((c1 == 57) or ((c1 == 56))) or ((c1 == 55))) or ((c1 == 54))) or ((c1 == 53))) or ((c1 == 52))) or ((c1 == 51))) or ((c1 == 50))) or ((c1 == 49))):
                if (zero and (not point)):
                    self.invalidNumber(start)
                if minus:
                    minus = False
                digit = True
                zero = False
            elif ((c1 == 101) or ((c1 == 69))):
                if ((minus or zero) or e):
                    self.invalidNumber(start)
                digit = False
                e = True
            else:
                if (not digit):
                    self.invalidNumber(start)
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 - 1)
                _hx_local_1
                end = True
            if end:
                break
        return start

    def slice(self,_hx_from,to):
        return tink_json__Parser_SliceData(self.source,_hx_from,to)

    def next(self):
        this1 = self.source
        i = self.pos
        self.pos = (self.pos + 1)
        if (i >= len(this1)):
            return -1
        else:
            return ord(this1[i])

    def toChar(self,code,expected):
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == code) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + ("null" if expected is None else expected)))

    def parseSerialized(self):
        start = self.pos
        self.skipValue()
        return HxString.substring(self.source,start,self.pos)

    def parseValue(self):
        _gthis = self
        this1 = self.source
        i = self.pos
        self.pos = (self.pos + 1)
        _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
        _g1 = _g
        if (_g1 == 34):
            return tink_json_Value.VString(tink_json__Parser_JsonString_Impl_.toString(self.parseRestOfString()))
        elif (_g1 == 91):
            ret = list()
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 1)
                _hx_local_1
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.pos
                _hx_local_2.pos = (_hx_local_3 + 1)
                _hx_local_2.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.pos
                    _hx_local_4.pos = (_hx_local_5 + 1)
                    _hx_local_5
                tmp = True
            else:
                tmp = False
            if (not tmp):
                while True:
                    x = self.parseValue()
                    ret.append(x)
                    while True:
                        tmp = None
                        if (self.pos < self.max):
                            this1 = self.source
                            i = self.pos
                            tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                        else:
                            tmp = False
                        if (not tmp):
                            break
                        _hx_local_6 = self
                        _hx_local_7 = _hx_local_6.pos
                        _hx_local_6.pos = (_hx_local_7 + 1)
                        _hx_local_7
                    tmp1 = None
                    this2 = self.source
                    i1 = self.pos
                    if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 44):
                        _hx_local_8 = self
                        _hx_local_9 = _hx_local_8.pos
                        _hx_local_8.pos = (_hx_local_9 + 1)
                        _hx_local_8.pos
                        while True:
                            tmp2 = None
                            if (self.pos < self.max):
                                this3 = self.source
                                i2 = self.pos
                                tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                            else:
                                tmp2 = False
                            if (not tmp2):
                                break
                            _hx_local_10 = self
                            _hx_local_11 = _hx_local_10.pos
                            _hx_local_10.pos = (_hx_local_11 + 1)
                            _hx_local_11
                        tmp1 = True
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp = None
                this1 = self.source
                i = self.pos
                if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    tmp = True
                else:
                    tmp = False
                if (not tmp):
                    self.die(("Expected " + "]"))
            return tink_json_Value.VArray(ret)
        elif (_g1 == 102):
            e = None
            e1 = None
            e2 = None
            e3 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 97):
                this1 = self.source
                i = (self.pos + 1)
                e3 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                e3 = False
            if e3:
                this1 = self.source
                i = (self.pos + 2)
                e2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 115)
            else:
                e2 = False
            if e2:
                this1 = self.source
                i = (self.pos + 3)
                e1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
            else:
                e1 = False
            if e1:
                _hx_local_16 = self
                _hx_local_17 = _hx_local_16.pos
                _hx_local_16.pos = (_hx_local_17 + 4)
                _hx_local_16.pos
                e = True
            else:
                e = False
            e1 = (self.die(("Expected " + "alse")) if ((not e)) else None)
            return tink_json_Value.VBool(False)
        elif (_g1 == 110):
            e = None
            e1 = None
            e2 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 117):
                this1 = self.source
                i = (self.pos + 1)
                e2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                e2 = False
            if e2:
                this1 = self.source
                i = (self.pos + 2)
                e1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                e1 = False
            if e1:
                _hx_local_18 = self
                _hx_local_19 = _hx_local_18.pos
                _hx_local_18.pos = (_hx_local_19 + 3)
                _hx_local_18.pos
                e = True
            else:
                e = False
            e1 = (self.die(("Expected " + "ull")) if ((not e)) else None)
            return tink_json_Value.VNull
        elif (_g1 == 116):
            e = None
            e1 = None
            e2 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 114):
                this1 = self.source
                i = (self.pos + 1)
                e2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 117)
            else:
                e2 = False
            if e2:
                this1 = self.source
                i = (self.pos + 2)
                e1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
            else:
                e1 = False
            if e1:
                _hx_local_20 = self
                _hx_local_21 = _hx_local_20.pos
                _hx_local_20.pos = (_hx_local_21 + 3)
                _hx_local_20.pos
                e = True
            else:
                e = False
            e1 = (self.die(("Expected " + "rue")) if ((not e)) else None)
            return tink_json_Value.VBool(True)
        elif (_g1 == 123):
            fields = list()
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_22 = self
                _hx_local_23 = _hx_local_22.pos
                _hx_local_22.pos = (_hx_local_23 + 1)
                _hx_local_23
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_24 = self
                _hx_local_25 = _hx_local_24.pos
                _hx_local_24.pos = (_hx_local_25 + 1)
                _hx_local_24.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_26 = self
                    _hx_local_27 = _hx_local_26.pos
                    _hx_local_26.pos = (_hx_local_27 + 1)
                    _hx_local_27
                tmp = True
            else:
                tmp = False
            if (not tmp):
                while True:
                    this1 = _gthis.source
                    def _hx_local_29():
                        _hx_local_28 = _gthis.pos
                        _gthis.pos = (_gthis.pos + 1)
                        return _hx_local_28
                    i = _hx_local_29()
                    if (((-1 if ((i >= len(this1))) else ord(this1[i]))) != 34):
                        _gthis.die("expected string",(_gthis.pos - 1))
                    x = tink_json__Parser_JsonString_Impl_.toString(_gthis.parseRestOfString())
                    while True:
                        e = None
                        if (_gthis.pos < _gthis.max):
                            this2 = _gthis.source
                            i1 = _gthis.pos
                            e = (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) < 33)
                        else:
                            e = False
                        if (not e):
                            break
                        _gthis.pos = (_gthis.pos + 1)
                    e1 = None
                    this3 = _gthis.source
                    i2 = _gthis.pos
                    if (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) == 58):
                        _gthis.pos = (_gthis.pos + 1)
                        while True:
                            e2 = None
                            if (_gthis.pos < _gthis.max):
                                this4 = _gthis.source
                                i3 = _gthis.pos
                                e2 = (((-1 if ((i3 >= len(this4))) else ord(this4[i3]))) < 33)
                            else:
                                e2 = False
                            if (not e2):
                                break
                            _gthis.pos = (_gthis.pos + 1)
                        e1 = True
                    else:
                        e1 = False
                    e3 = (_gthis.die(("Expected " + ":")) if ((not e1)) else None)
                    x1 = tink_core_NamedWith(x,_gthis.parseValue())
                    fields.append(x1)
                    while True:
                        tmp = None
                        if (self.pos < self.max):
                            this5 = self.source
                            i4 = self.pos
                            tmp = (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) < 33)
                        else:
                            tmp = False
                        if (not tmp):
                            break
                        _hx_local_33 = self
                        _hx_local_34 = _hx_local_33.pos
                        _hx_local_33.pos = (_hx_local_34 + 1)
                        _hx_local_34
                    tmp1 = None
                    this6 = self.source
                    i5 = self.pos
                    if (((-1 if ((i5 >= len(this6))) else ord(this6[i5]))) == 44):
                        _hx_local_35 = self
                        _hx_local_36 = _hx_local_35.pos
                        _hx_local_35.pos = (_hx_local_36 + 1)
                        _hx_local_35.pos
                        while True:
                            tmp2 = None
                            if (self.pos < self.max):
                                this7 = self.source
                                i6 = self.pos
                                tmp2 = (((-1 if ((i6 >= len(this7))) else ord(this7[i6]))) < 33)
                            else:
                                tmp2 = False
                            if (not tmp2):
                                break
                            _hx_local_37 = self
                            _hx_local_38 = _hx_local_37.pos
                            _hx_local_37.pos = (_hx_local_38 + 1)
                            _hx_local_38
                        tmp1 = True
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_39 = self
                    _hx_local_40 = _hx_local_39.pos
                    _hx_local_39.pos = (_hx_local_40 + 1)
                    _hx_local_40
                tmp = None
                this1 = self.source
                i = self.pos
                if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                    _hx_local_41 = self
                    _hx_local_42 = _hx_local_41.pos
                    _hx_local_41.pos = (_hx_local_42 + 1)
                    _hx_local_41.pos
                    tmp = True
                else:
                    tmp = False
                if (not tmp):
                    self.die(("Expected " + "}"))
            return tink_json_Value.VObject(fields)
        else:
            char = _g
            if (((char == 46) or ((char == 45))) or (((char < 58) and ((char > 47))))):
                _hx_local_43 = self
                _hx_local_44 = _hx_local_43.pos
                _hx_local_43.pos = (_hx_local_44 - 1)
                _hx_local_44
                this1 = self.doParseNumber()
                return tink_json_Value.VNumber(Std.parseFloat(HxString.substring(this1.source,this1.min,this1.max)))
            else:
                return self.invalidChar(char)

    def skipArray(self):
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if tmp:
            return
        while True:
            self.skipValue()
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_6 = self
                _hx_local_7 = _hx_local_6.pos
                _hx_local_6.pos = (_hx_local_7 + 1)
                _hx_local_7
            tmp1 = None
            this2 = self.source
            i1 = self.pos
            if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 44):
                _hx_local_8 = self
                _hx_local_9 = _hx_local_8.pos
                _hx_local_8.pos = (_hx_local_9 + 1)
                _hx_local_8.pos
                while True:
                    tmp2 = None
                    if (self.pos < self.max):
                        this3 = self.source
                        i2 = self.pos
                        tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                    else:
                        tmp2 = False
                    if (not tmp2):
                        break
                    _hx_local_10 = self
                    _hx_local_11 = _hx_local_10.pos
                    _hx_local_10.pos = (_hx_local_11 + 1)
                    _hx_local_11
                tmp1 = True
            else:
                tmp1 = False
            if (not tmp1):
                break
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_12 = self
            _hx_local_13 = _hx_local_12.pos
            _hx_local_12.pos = (_hx_local_13 + 1)
            _hx_local_13
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_14 = self
            _hx_local_15 = _hx_local_14.pos
            _hx_local_14.pos = (_hx_local_15 + 1)
            _hx_local_14.pos
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "]"))

    def skipValue(self):
        _gthis = self
        this1 = self.source
        i = self.pos
        self.pos = (self.pos + 1)
        _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
        _g1 = _g
        if (_g1 == 34):
            self.skipString()
        elif (_g1 == 91):
            self.skipArray()
        elif (_g1 == 102):
            tmp = None
            tmp1 = None
            tmp2 = None
            tmp3 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 97):
                this1 = self.source
                i = (self.pos + 1)
                tmp3 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                tmp3 = False
            if tmp3:
                this1 = self.source
                i = (self.pos + 2)
                tmp2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 115)
            else:
                tmp2 = False
            if tmp2:
                this1 = self.source
                i = (self.pos + 3)
                tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
            else:
                tmp1 = False
            if tmp1:
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 4)
                _hx_local_0.pos
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "alse"))
        elif (_g1 == 110):
            tmp = None
            tmp1 = None
            tmp2 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 117):
                this1 = self.source
                i = (self.pos + 1)
                tmp2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                tmp2 = False
            if tmp2:
                this1 = self.source
                i = (self.pos + 2)
                tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                tmp1 = False
            if tmp1:
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.pos
                _hx_local_2.pos = (_hx_local_3 + 3)
                _hx_local_2.pos
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "ull"))
        elif (_g1 == 116):
            tmp = None
            tmp1 = None
            tmp2 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 114):
                this1 = self.source
                i = (self.pos + 1)
                tmp2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 117)
            else:
                tmp2 = False
            if tmp2:
                this1 = self.source
                i = (self.pos + 2)
                tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
            else:
                tmp1 = False
            if tmp1:
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 3)
                _hx_local_4.pos
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "rue"))
        elif (_g1 == 123):
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_6 = self
                _hx_local_7 = _hx_local_6.pos
                _hx_local_6.pos = (_hx_local_7 + 1)
                _hx_local_7
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_8 = self
                _hx_local_9 = _hx_local_8.pos
                _hx_local_8.pos = (_hx_local_9 + 1)
                _hx_local_8.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_10 = self
                    _hx_local_11 = _hx_local_10.pos
                    _hx_local_10.pos = (_hx_local_11 + 1)
                    _hx_local_11
                tmp = True
            else:
                tmp = False
            if tmp:
                return
            while True:
                this1 = _gthis.source
                def _hx_local_13():
                    _hx_local_12 = _gthis.pos
                    _gthis.pos = (_gthis.pos + 1)
                    return _hx_local_12
                i = _hx_local_13()
                if (((-1 if ((i >= len(this1))) else ord(this1[i]))) != 34):
                    _gthis.die("expected string",(_gthis.pos - 1))
                _gthis.skipString()
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this2 = _gthis.source
                        i1 = _gthis.pos
                        tmp = (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                tmp1 = None
                this3 = _gthis.source
                i2 = _gthis.pos
                if (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) == 58):
                    _gthis.pos = (_gthis.pos + 1)
                    while True:
                        tmp2 = None
                        if (_gthis.pos < _gthis.max):
                            this4 = _gthis.source
                            i3 = _gthis.pos
                            tmp2 = (((-1 if ((i3 >= len(this4))) else ord(this4[i3]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _gthis.pos = (_gthis.pos + 1)
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    _gthis.die(("Expected " + ":"))
                _gthis.skipValue()
                while True:
                    tmp3 = None
                    if (self.pos < self.max):
                        this5 = self.source
                        i4 = self.pos
                        tmp3 = (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) < 33)
                    else:
                        tmp3 = False
                    if (not tmp3):
                        break
                    _hx_local_17 = self
                    _hx_local_18 = _hx_local_17.pos
                    _hx_local_17.pos = (_hx_local_18 + 1)
                    _hx_local_18
                tmp4 = None
                this6 = self.source
                i5 = self.pos
                if (((-1 if ((i5 >= len(this6))) else ord(this6[i5]))) == 44):
                    _hx_local_19 = self
                    _hx_local_20 = _hx_local_19.pos
                    _hx_local_19.pos = (_hx_local_20 + 1)
                    _hx_local_19.pos
                    while True:
                        tmp5 = None
                        if (self.pos < self.max):
                            this7 = self.source
                            i6 = self.pos
                            tmp5 = (((-1 if ((i6 >= len(this7))) else ord(this7[i6]))) < 33)
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        _hx_local_21 = self
                        _hx_local_22 = _hx_local_21.pos
                        _hx_local_21.pos = (_hx_local_22 + 1)
                        _hx_local_22
                    tmp4 = True
                else:
                    tmp4 = False
                if (not tmp4):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_23 = self
                _hx_local_24 = _hx_local_23.pos
                _hx_local_23.pos = (_hx_local_24 + 1)
                _hx_local_24
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_25 = self
                _hx_local_26 = _hx_local_25.pos
                _hx_local_25.pos = (_hx_local_26 + 1)
                _hx_local_25.pos
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        else:
            char = _g
            if (((char == 46) or ((char == 45))) or (((char < 58) and ((char > 47))))):
                self.skipNumber(char)
            else:
                self.invalidChar(char)

    def invalidChar(self,c):
        return self.die(("invalid char " + HxOverrides.stringOrNull(StringTools.hex(c,2))),(self.pos - 1))

    def die(self,s,pos = None,end = None):
        if (pos is None):
            pos = -1
        if (end is None):
            end = -1
        if (pos == -1):
            pos = self.pos
            end = pos
        elif (end == -1):
            end = self.pos
        if (end <= pos):
            end = (pos + 1)
        range = (((("characters " + Std.string(pos)) + " - ") + Std.string(end)) if ((end > ((pos + 1)))) else ("character " + Std.string(pos)))
        def _hx_local_0(s,maxLength,left):
            if (len(s) > maxLength):
                if left:
                    return ("... " + HxOverrides.stringOrNull(HxString.substr(s,(len(s) - maxLength),None)))
                else:
                    return (HxOverrides.stringOrNull(HxString.substr(s,0,maxLength)) + " ...")
            else:
                return s
        clip = _hx_local_0
        center = ((pos + end) >> 1)
        context = (((((HxOverrides.stringOrNull(clip(HxString.substring(self.source,0,pos),20,True)) + "  ---->  ") + HxOverrides.stringOrNull(clip(HxString.substring(self.source,pos,center),20,False))) + HxOverrides.stringOrNull(clip(HxString.substring(self.source,center,end),20,True))) + "  <----  ") + HxOverrides.stringOrNull(clip(HxString.substring(self.source,end,self.max),20,False)))
        return tink_core_TypedError.withData(422,(("null" if s is None else s) + HxOverrides.stringOrNull(((((" at " + ("null" if range is None else range)) + " in ") + ("null" if context is None else context))))),_hx_AnonObject({'source': self.source, 'start': pos, 'end': end}),_hx_AnonObject({'fileName': "tink/json/Parser.hx", 'lineNumber': 472, 'className': "tink.json.BasicParser", 'methodName': "die"})).throwSelf()

    def parseBool(self):
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        tmp1 = None
        tmp2 = None
        tmp3 = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 116):
            this1 = self.source
            i = (self.pos + 1)
            tmp3 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 114)
        else:
            tmp3 = False
        if tmp3:
            this1 = self.source
            i = (self.pos + 2)
            tmp2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 117)
        else:
            tmp2 = False
        if tmp2:
            this1 = self.source
            i = (self.pos + 3)
            tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
        else:
            tmp1 = False
        if tmp1:
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 4)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if tmp:
            return True
        else:
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_6 = self
                _hx_local_7 = _hx_local_6.pos
                _hx_local_6.pos = (_hx_local_7 + 1)
                _hx_local_7
            tmp = None
            tmp1 = None
            tmp2 = None
            tmp3 = None
            tmp4 = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 102):
                this1 = self.source
                i = (self.pos + 1)
                tmp4 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 97)
            else:
                tmp4 = False
            if tmp4:
                this1 = self.source
                i = (self.pos + 2)
                tmp3 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 108)
            else:
                tmp3 = False
            if tmp3:
                this1 = self.source
                i = (self.pos + 3)
                tmp2 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 115)
            else:
                tmp2 = False
            if tmp2:
                this1 = self.source
                i = (self.pos + 4)
                tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 101)
            else:
                tmp1 = False
            if tmp1:
                _hx_local_8 = self
                _hx_local_9 = _hx_local_8.pos
                _hx_local_8.pos = (_hx_local_9 + 5)
                _hx_local_8.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_10 = self
                    _hx_local_11 = _hx_local_10.pos
                    _hx_local_10.pos = (_hx_local_11 + 1)
                    _hx_local_11
                tmp = True
            else:
                tmp = False
            if tmp:
                return False
            else:
                return self.die("expected boolean value")

    @staticmethod
    def isDigit(char):
        if (char < 58):
            return (char > 47)
        else:
            return False

    @staticmethod
    def startsNumber(char):
        if (not (((char == 46) or ((char == 45))))):
            if (char < 58):
                return (char > 47)
            else:
                return False
        else:
            return True

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.plugins = None
        _hx_o.source = None
        _hx_o.pos = None
        _hx_o.max = None
        _hx_o.afterParsing = None
tink_json_BasicParser._hx_class = tink_json_BasicParser
_hx_classes["tink.json.BasicParser"] = tink_json_BasicParser


class tink_json_Parser0(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser0"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_components = None
        hasv_components = False
        v_files = None
        hasv_files = False
        v_id = None
        hasv_id = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 99):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 111):
                        this4 = self.source
                        i3 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                        if (cur == 109):
                            this5 = self.source
                            i4 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i4 >= len(this5))) else ord(this5[i4]))
                            if (cur == 112):
                                this6 = self.source
                                i5 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i5 >= len(this6))) else ord(this6[i5]))
                                if (cur == 111):
                                    this7 = self.source
                                    i6 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i6 >= len(this7))) else ord(this7[i6]))
                                    if (cur == 110):
                                        this8 = self.source
                                        i7 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i7 >= len(this8))) else ord(this8[i7]))
                                        if (cur == 101):
                                            this9 = self.source
                                            i8 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i8 >= len(this9))) else ord(this9[i8]))
                                            if (cur == 110):
                                                this10 = self.source
                                                i9 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i9 >= len(this10))) else ord(this10[i9]))
                                                if (cur == 116):
                                                    this11 = self.source
                                                    i10 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i10 >= len(this11))) else ord(this11[i10]))
                                                    if (cur == 115):
                                                        this12 = self.source
                                                        i11 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i11 >= len(this12))) else ord(this12[i11]))
                                                        if (cur == 34):
                                                            while True:
                                                                this13 = self.source
                                                                i12 = self.pos
                                                                self.pos = (self.pos + 1)
                                                                _g2 = (-1 if ((i12 >= len(this13))) else ord(this13[i12]))
                                                                _hx_tmp1 = None
                                                                if ((_g2 == 58) == True):
                                                                    break
                                                                else:
                                                                    _hx_tmp1 = (_g2 < 33)
                                                                    if (_hx_tmp1 != True):
                                                                        self.die(("expected " + ":"))
                                                            while True:
                                                                tmp = None
                                                                if (self.pos < self.max):
                                                                    this14 = self.source
                                                                    i13 = self.pos
                                                                    tmp = (((-1 if ((i13 >= len(this14))) else ord(this14[i13]))) < 33)
                                                                else:
                                                                    tmp = False
                                                                if (not tmp):
                                                                    break
                                                                _hx_local_6 = self
                                                                _hx_local_7 = _hx_local_6.pos
                                                                _hx_local_6.pos = (_hx_local_7 + 1)
                                                                _hx_local_7
                                                            while True:
                                                                v_components1 = None
                                                                if (self.pos < self.max):
                                                                    this15 = self.source
                                                                    i14 = self.pos
                                                                    v_components1 = (((-1 if ((i14 >= len(this15))) else ord(this15[i14]))) < 33)
                                                                else:
                                                                    v_components1 = False
                                                                if (not v_components1):
                                                                    break
                                                                _hx_local_8 = self
                                                                _hx_local_9 = _hx_local_8.pos
                                                                _hx_local_8.pos = (_hx_local_9 + 1)
                                                                _hx_local_9
                                                            v_components2 = None
                                                            v_components3 = None
                                                            v_components4 = None
                                                            v_components5 = None
                                                            this16 = self.source
                                                            i15 = self.pos
                                                            if (((-1 if ((i15 >= len(this16))) else ord(this16[i15]))) == 110):
                                                                this17 = self.source
                                                                i16 = (self.pos + 1)
                                                                v_components5 = (((-1 if ((i16 >= len(this17))) else ord(this17[i16]))) == 117)
                                                            else:
                                                                v_components5 = False
                                                            if v_components5:
                                                                this18 = self.source
                                                                i17 = (self.pos + 2)
                                                                v_components4 = (((-1 if ((i17 >= len(this18))) else ord(this18[i17]))) == 108)
                                                            else:
                                                                v_components4 = False
                                                            if v_components4:
                                                                this19 = self.source
                                                                i18 = (self.pos + 3)
                                                                v_components3 = (((-1 if ((i18 >= len(this19))) else ord(this19[i18]))) == 108)
                                                            else:
                                                                v_components3 = False
                                                            if v_components3:
                                                                _hx_local_10 = self
                                                                _hx_local_11 = _hx_local_10.pos
                                                                _hx_local_10.pos = (_hx_local_11 + 4)
                                                                _hx_local_10.pos
                                                                while True:
                                                                    v_components6 = None
                                                                    if (self.pos < self.max):
                                                                        this20 = self.source
                                                                        i19 = self.pos
                                                                        v_components6 = (((-1 if ((i19 >= len(this20))) else ord(this20[i19]))) < 33)
                                                                    else:
                                                                        v_components6 = False
                                                                    if (not v_components6):
                                                                        break
                                                                    _hx_local_12 = self
                                                                    _hx_local_13 = _hx_local_12.pos
                                                                    _hx_local_12.pos = (_hx_local_13 + 1)
                                                                    _hx_local_13
                                                                v_components2 = True
                                                            else:
                                                                v_components2 = False
                                                            if v_components2:
                                                                v_components = None
                                                            else:
                                                                while True:
                                                                    v_components7 = None
                                                                    if (self.pos < self.max):
                                                                        this21 = self.source
                                                                        i20 = self.pos
                                                                        v_components7 = (((-1 if ((i20 >= len(this21))) else ord(this21[i20]))) < 33)
                                                                    else:
                                                                        v_components7 = False
                                                                    if (not v_components7):
                                                                        break
                                                                    _hx_local_14 = self
                                                                    _hx_local_15 = _hx_local_14.pos
                                                                    _hx_local_14.pos = (_hx_local_15 + 1)
                                                                    _hx_local_15
                                                                v_components8 = None
                                                                this22 = self.source
                                                                i21 = self.pos
                                                                if (((-1 if ((i21 >= len(this22))) else ord(this22[i21]))) == 91):
                                                                    _hx_local_16 = self
                                                                    _hx_local_17 = _hx_local_16.pos
                                                                    _hx_local_16.pos = (_hx_local_17 + 1)
                                                                    _hx_local_16.pos
                                                                    while True:
                                                                        v_components9 = None
                                                                        if (self.pos < self.max):
                                                                            this23 = self.source
                                                                            i22 = self.pos
                                                                            v_components9 = (((-1 if ((i22 >= len(this23))) else ord(this23[i22]))) < 33)
                                                                        else:
                                                                            v_components9 = False
                                                                        if (not v_components9):
                                                                            break
                                                                        _hx_local_18 = self
                                                                        _hx_local_19 = _hx_local_18.pos
                                                                        _hx_local_18.pos = (_hx_local_19 + 1)
                                                                        _hx_local_19
                                                                    v_components8 = True
                                                                else:
                                                                    v_components8 = False
                                                                if (not v_components8):
                                                                    self.die(("Expected " + "["))
                                                                _hx___ret = haxe_ds_StringMap()
                                                                while True:
                                                                    v_components10 = None
                                                                    if (self.pos < self.max):
                                                                        this24 = self.source
                                                                        i23 = self.pos
                                                                        v_components10 = (((-1 if ((i23 >= len(this24))) else ord(this24[i23]))) < 33)
                                                                    else:
                                                                        v_components10 = False
                                                                    if (not v_components10):
                                                                        break
                                                                    _hx_local_20 = self
                                                                    _hx_local_21 = _hx_local_20.pos
                                                                    _hx_local_20.pos = (_hx_local_21 + 1)
                                                                    _hx_local_21
                                                                v_components11 = None
                                                                this25 = self.source
                                                                i24 = self.pos
                                                                if (((-1 if ((i24 >= len(this25))) else ord(this25[i24]))) == 93):
                                                                    _hx_local_22 = self
                                                                    _hx_local_23 = _hx_local_22.pos
                                                                    _hx_local_22.pos = (_hx_local_23 + 1)
                                                                    _hx_local_22.pos
                                                                    while True:
                                                                        v_components12 = None
                                                                        if (self.pos < self.max):
                                                                            this26 = self.source
                                                                            i25 = self.pos
                                                                            v_components12 = (((-1 if ((i25 >= len(this26))) else ord(this26[i25]))) < 33)
                                                                        else:
                                                                            v_components12 = False
                                                                        if (not v_components12):
                                                                            break
                                                                        _hx_local_24 = self
                                                                        _hx_local_25 = _hx_local_24.pos
                                                                        _hx_local_24.pos = (_hx_local_25 + 1)
                                                                        _hx_local_25
                                                                    v_components11 = True
                                                                else:
                                                                    v_components11 = False
                                                                if (not v_components11):
                                                                    while True:
                                                                        while True:
                                                                            v_components13 = None
                                                                            if (self.pos < self.max):
                                                                                this27 = self.source
                                                                                i26 = self.pos
                                                                                v_components13 = (((-1 if ((i26 >= len(this27))) else ord(this27[i26]))) < 33)
                                                                            else:
                                                                                v_components13 = False
                                                                            if (not v_components13):
                                                                                break
                                                                            _hx_local_26 = self
                                                                            _hx_local_27 = _hx_local_26.pos
                                                                            _hx_local_26.pos = (_hx_local_27 + 1)
                                                                            _hx_local_27
                                                                        v_components14 = None
                                                                        this28 = self.source
                                                                        i27 = self.pos
                                                                        if (((-1 if ((i27 >= len(this28))) else ord(this28[i27]))) == 91):
                                                                            _hx_local_28 = self
                                                                            _hx_local_29 = _hx_local_28.pos
                                                                            _hx_local_28.pos = (_hx_local_29 + 1)
                                                                            _hx_local_28.pos
                                                                            while True:
                                                                                v_components15 = None
                                                                                if (self.pos < self.max):
                                                                                    this29 = self.source
                                                                                    i28 = self.pos
                                                                                    v_components15 = (((-1 if ((i28 >= len(this29))) else ord(this29[i28]))) < 33)
                                                                                else:
                                                                                    v_components15 = False
                                                                                if (not v_components15):
                                                                                    break
                                                                                _hx_local_30 = self
                                                                                _hx_local_31 = _hx_local_30.pos
                                                                                _hx_local_30.pos = (_hx_local_31 + 1)
                                                                                _hx_local_31
                                                                            v_components14 = True
                                                                        else:
                                                                            v_components14 = False
                                                                        if (not v_components14):
                                                                            self.die(("Expected " + "["))
                                                                        _e0 = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                                                                        while True:
                                                                            e = None
                                                                            if (self.pos < self.max):
                                                                                this30 = self.source
                                                                                i29 = self.pos
                                                                                e = (((-1 if ((i29 >= len(this30))) else ord(this30[i29]))) < 33)
                                                                            else:
                                                                                e = False
                                                                            if (not e):
                                                                                break
                                                                            _hx_local_32 = self
                                                                            _hx_local_33 = _hx_local_32.pos
                                                                            _hx_local_32.pos = (_hx_local_33 + 1)
                                                                            _hx_local_33
                                                                        e1 = None
                                                                        this31 = self.source
                                                                        i30 = self.pos
                                                                        if (((-1 if ((i30 >= len(this31))) else ord(this31[i30]))) == 44):
                                                                            _hx_local_34 = self
                                                                            _hx_local_35 = _hx_local_34.pos
                                                                            _hx_local_34.pos = (_hx_local_35 + 1)
                                                                            _hx_local_34.pos
                                                                            while True:
                                                                                e2 = None
                                                                                if (self.pos < self.max):
                                                                                    this32 = self.source
                                                                                    i31 = self.pos
                                                                                    e2 = (((-1 if ((i31 >= len(this32))) else ord(this32[i31]))) < 33)
                                                                                else:
                                                                                    e2 = False
                                                                                if (not e2):
                                                                                    break
                                                                                _hx_local_36 = self
                                                                                _hx_local_37 = _hx_local_36.pos
                                                                                _hx_local_36.pos = (_hx_local_37 + 1)
                                                                                _hx_local_37
                                                                            e1 = True
                                                                        else:
                                                                            e1 = False
                                                                        e3 = (self.die(("Expected " + ",")) if ((not e1)) else None)
                                                                        _e1 = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                                                                        _hx___ret.h[_e0] = _e1
                                                                        while True:
                                                                            v_components16 = None
                                                                            if (self.pos < self.max):
                                                                                this33 = self.source
                                                                                i32 = self.pos
                                                                                v_components16 = (((-1 if ((i32 >= len(this33))) else ord(this33[i32]))) < 33)
                                                                            else:
                                                                                v_components16 = False
                                                                            if (not v_components16):
                                                                                break
                                                                            _hx_local_38 = self
                                                                            _hx_local_39 = _hx_local_38.pos
                                                                            _hx_local_38.pos = (_hx_local_39 + 1)
                                                                            _hx_local_39
                                                                        v_components17 = None
                                                                        this34 = self.source
                                                                        i33 = self.pos
                                                                        if (((-1 if ((i33 >= len(this34))) else ord(this34[i33]))) == 93):
                                                                            _hx_local_40 = self
                                                                            _hx_local_41 = _hx_local_40.pos
                                                                            _hx_local_40.pos = (_hx_local_41 + 1)
                                                                            _hx_local_40.pos
                                                                            while True:
                                                                                v_components18 = None
                                                                                if (self.pos < self.max):
                                                                                    this35 = self.source
                                                                                    i34 = self.pos
                                                                                    v_components18 = (((-1 if ((i34 >= len(this35))) else ord(this35[i34]))) < 33)
                                                                                else:
                                                                                    v_components18 = False
                                                                                if (not v_components18):
                                                                                    break
                                                                                _hx_local_42 = self
                                                                                _hx_local_43 = _hx_local_42.pos
                                                                                _hx_local_42.pos = (_hx_local_43 + 1)
                                                                                _hx_local_43
                                                                            v_components17 = True
                                                                        else:
                                                                            v_components17 = False
                                                                        if (not v_components17):
                                                                            self.die(("Expected " + "]"))
                                                                        while True:
                                                                            v_components19 = None
                                                                            if (self.pos < self.max):
                                                                                this36 = self.source
                                                                                i35 = self.pos
                                                                                v_components19 = (((-1 if ((i35 >= len(this36))) else ord(this36[i35]))) < 33)
                                                                            else:
                                                                                v_components19 = False
                                                                            if (not v_components19):
                                                                                break
                                                                            _hx_local_44 = self
                                                                            _hx_local_45 = _hx_local_44.pos
                                                                            _hx_local_44.pos = (_hx_local_45 + 1)
                                                                            _hx_local_45
                                                                        v_components20 = None
                                                                        this37 = self.source
                                                                        i36 = self.pos
                                                                        if (((-1 if ((i36 >= len(this37))) else ord(this37[i36]))) == 44):
                                                                            _hx_local_46 = self
                                                                            _hx_local_47 = _hx_local_46.pos
                                                                            _hx_local_46.pos = (_hx_local_47 + 1)
                                                                            _hx_local_46.pos
                                                                            while True:
                                                                                v_components21 = None
                                                                                if (self.pos < self.max):
                                                                                    this38 = self.source
                                                                                    i37 = self.pos
                                                                                    v_components21 = (((-1 if ((i37 >= len(this38))) else ord(this38[i37]))) < 33)
                                                                                else:
                                                                                    v_components21 = False
                                                                                if (not v_components21):
                                                                                    break
                                                                                _hx_local_48 = self
                                                                                _hx_local_49 = _hx_local_48.pos
                                                                                _hx_local_48.pos = (_hx_local_49 + 1)
                                                                                _hx_local_49
                                                                            v_components20 = True
                                                                        else:
                                                                            v_components20 = False
                                                                        if (not v_components20):
                                                                            break
                                                                    while True:
                                                                        v_components22 = None
                                                                        if (self.pos < self.max):
                                                                            this39 = self.source
                                                                            i38 = self.pos
                                                                            v_components22 = (((-1 if ((i38 >= len(this39))) else ord(this39[i38]))) < 33)
                                                                        else:
                                                                            v_components22 = False
                                                                        if (not v_components22):
                                                                            break
                                                                        _hx_local_50 = self
                                                                        _hx_local_51 = _hx_local_50.pos
                                                                        _hx_local_50.pos = (_hx_local_51 + 1)
                                                                        _hx_local_51
                                                                    v_components23 = None
                                                                    this40 = self.source
                                                                    i39 = self.pos
                                                                    if (((-1 if ((i39 >= len(this40))) else ord(this40[i39]))) == 93):
                                                                        _hx_local_52 = self
                                                                        _hx_local_53 = _hx_local_52.pos
                                                                        _hx_local_52.pos = (_hx_local_53 + 1)
                                                                        _hx_local_52.pos
                                                                        while True:
                                                                            v_components24 = None
                                                                            if (self.pos < self.max):
                                                                                this41 = self.source
                                                                                i40 = self.pos
                                                                                v_components24 = (((-1 if ((i40 >= len(this41))) else ord(this41[i40]))) < 33)
                                                                            else:
                                                                                v_components24 = False
                                                                            if (not v_components24):
                                                                                break
                                                                            _hx_local_54 = self
                                                                            _hx_local_55 = _hx_local_54.pos
                                                                            _hx_local_54.pos = (_hx_local_55 + 1)
                                                                            _hx_local_55
                                                                        v_components23 = True
                                                                    else:
                                                                        v_components23 = False
                                                                    if (not v_components23):
                                                                        self.die(("Expected " + "]"))
                                                                v_components = _hx___ret
                                                            hasv_components = True
                                                            while True:
                                                                tmp1 = None
                                                                if (self.pos < self.max):
                                                                    this42 = self.source
                                                                    i41 = self.pos
                                                                    tmp1 = (((-1 if ((i41 >= len(this42))) else ord(this42[i41]))) < 33)
                                                                else:
                                                                    tmp1 = False
                                                                if (not tmp1):
                                                                    break
                                                                _hx_local_56 = self
                                                                _hx_local_57 = _hx_local_56.pos
                                                                _hx_local_56.pos = (_hx_local_57 + 1)
                                                                _hx_local_57
                                                            tmp2 = None
                                                            this43 = self.source
                                                            i42 = self.pos
                                                            if (((-1 if ((i42 >= len(this43))) else ord(this43[i42]))) == 44):
                                                                _hx_local_58 = self
                                                                _hx_local_59 = _hx_local_58.pos
                                                                _hx_local_58.pos = (_hx_local_59 + 1)
                                                                _hx_local_58.pos
                                                                tmp2 = True
                                                            else:
                                                                tmp2 = False
                                                            if (not tmp2):
                                                                break
                                                            else:
                                                                continue
                elif (_g1 == 102):
                    this44 = self.source
                    i43 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i43 >= len(this44))) else ord(this44[i43]))
                    if (cur == 105):
                        this45 = self.source
                        i44 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i44 >= len(this45))) else ord(this45[i44]))
                        if (cur == 108):
                            this46 = self.source
                            i45 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i45 >= len(this46))) else ord(this46[i45]))
                            if (cur == 101):
                                this47 = self.source
                                i46 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i46 >= len(this47))) else ord(this47[i46]))
                                if (cur == 115):
                                    this48 = self.source
                                    i47 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i47 >= len(this48))) else ord(this48[i47]))
                                    if (cur == 34):
                                        while True:
                                            this49 = self.source
                                            i48 = self.pos
                                            self.pos = (self.pos + 1)
                                            _g3 = (-1 if ((i48 >= len(this49))) else ord(this49[i48]))
                                            _hx_tmp2 = None
                                            if ((_g3 == 58) == True):
                                                break
                                            else:
                                                _hx_tmp2 = (_g3 < 33)
                                                if (_hx_tmp2 != True):
                                                    self.die(("expected " + ":"))
                                        while True:
                                            tmp3 = None
                                            if (self.pos < self.max):
                                                this50 = self.source
                                                i49 = self.pos
                                                tmp3 = (((-1 if ((i49 >= len(this50))) else ord(this50[i49]))) < 33)
                                            else:
                                                tmp3 = False
                                            if (not tmp3):
                                                break
                                            _hx_local_60 = self
                                            _hx_local_61 = _hx_local_60.pos
                                            _hx_local_60.pos = (_hx_local_61 + 1)
                                            _hx_local_61
                                        while True:
                                            v_files1 = None
                                            if (self.pos < self.max):
                                                this51 = self.source
                                                i50 = self.pos
                                                v_files1 = (((-1 if ((i50 >= len(this51))) else ord(this51[i50]))) < 33)
                                            else:
                                                v_files1 = False
                                            if (not v_files1):
                                                break
                                            _hx_local_62 = self
                                            _hx_local_63 = _hx_local_62.pos
                                            _hx_local_62.pos = (_hx_local_63 + 1)
                                            _hx_local_63
                                        v_files2 = None
                                        v_files3 = None
                                        v_files4 = None
                                        v_files5 = None
                                        this52 = self.source
                                        i51 = self.pos
                                        if (((-1 if ((i51 >= len(this52))) else ord(this52[i51]))) == 110):
                                            this53 = self.source
                                            i52 = (self.pos + 1)
                                            v_files5 = (((-1 if ((i52 >= len(this53))) else ord(this53[i52]))) == 117)
                                        else:
                                            v_files5 = False
                                        if v_files5:
                                            this54 = self.source
                                            i53 = (self.pos + 2)
                                            v_files4 = (((-1 if ((i53 >= len(this54))) else ord(this54[i53]))) == 108)
                                        else:
                                            v_files4 = False
                                        if v_files4:
                                            this55 = self.source
                                            i54 = (self.pos + 3)
                                            v_files3 = (((-1 if ((i54 >= len(this55))) else ord(this55[i54]))) == 108)
                                        else:
                                            v_files3 = False
                                        if v_files3:
                                            _hx_local_64 = self
                                            _hx_local_65 = _hx_local_64.pos
                                            _hx_local_64.pos = (_hx_local_65 + 4)
                                            _hx_local_64.pos
                                            while True:
                                                v_files6 = None
                                                if (self.pos < self.max):
                                                    this56 = self.source
                                                    i55 = self.pos
                                                    v_files6 = (((-1 if ((i55 >= len(this56))) else ord(this56[i55]))) < 33)
                                                else:
                                                    v_files6 = False
                                                if (not v_files6):
                                                    break
                                                _hx_local_66 = self
                                                _hx_local_67 = _hx_local_66.pos
                                                _hx_local_66.pos = (_hx_local_67 + 1)
                                                _hx_local_67
                                            v_files2 = True
                                        else:
                                            v_files2 = False
                                        if v_files2:
                                            v_files = None
                                        else:
                                            while True:
                                                v_files7 = None
                                                if (self.pos < self.max):
                                                    this57 = self.source
                                                    i56 = self.pos
                                                    v_files7 = (((-1 if ((i56 >= len(this57))) else ord(this57[i56]))) < 33)
                                                else:
                                                    v_files7 = False
                                                if (not v_files7):
                                                    break
                                                _hx_local_68 = self
                                                _hx_local_69 = _hx_local_68.pos
                                                _hx_local_68.pos = (_hx_local_69 + 1)
                                                _hx_local_69
                                            v_files8 = None
                                            this58 = self.source
                                            i57 = self.pos
                                            if (((-1 if ((i57 >= len(this58))) else ord(this58[i57]))) == 91):
                                                _hx_local_70 = self
                                                _hx_local_71 = _hx_local_70.pos
                                                _hx_local_70.pos = (_hx_local_71 + 1)
                                                _hx_local_70.pos
                                                while True:
                                                    v_files9 = None
                                                    if (self.pos < self.max):
                                                        this59 = self.source
                                                        i58 = self.pos
                                                        v_files9 = (((-1 if ((i58 >= len(this59))) else ord(this59[i58]))) < 33)
                                                    else:
                                                        v_files9 = False
                                                    if (not v_files9):
                                                        break
                                                    _hx_local_72 = self
                                                    _hx_local_73 = _hx_local_72.pos
                                                    _hx_local_72.pos = (_hx_local_73 + 1)
                                                    _hx_local_73
                                                v_files8 = True
                                            else:
                                                v_files8 = False
                                            if (not v_files8):
                                                self.die(("Expected " + "["))
                                            _hx___ret1 = []
                                            while True:
                                                v_files10 = None
                                                if (self.pos < self.max):
                                                    this60 = self.source
                                                    i59 = self.pos
                                                    v_files10 = (((-1 if ((i59 >= len(this60))) else ord(this60[i59]))) < 33)
                                                else:
                                                    v_files10 = False
                                                if (not v_files10):
                                                    break
                                                _hx_local_74 = self
                                                _hx_local_75 = _hx_local_74.pos
                                                _hx_local_74.pos = (_hx_local_75 + 1)
                                                _hx_local_75
                                            v_files11 = None
                                            this61 = self.source
                                            i60 = self.pos
                                            if (((-1 if ((i60 >= len(this61))) else ord(this61[i60]))) == 93):
                                                _hx_local_76 = self
                                                _hx_local_77 = _hx_local_76.pos
                                                _hx_local_76.pos = (_hx_local_77 + 1)
                                                _hx_local_76.pos
                                                while True:
                                                    v_files12 = None
                                                    if (self.pos < self.max):
                                                        this62 = self.source
                                                        i61 = self.pos
                                                        v_files12 = (((-1 if ((i61 >= len(this62))) else ord(this62[i61]))) < 33)
                                                    else:
                                                        v_files12 = False
                                                    if (not v_files12):
                                                        break
                                                    _hx_local_78 = self
                                                    _hx_local_79 = _hx_local_78.pos
                                                    _hx_local_78.pos = (_hx_local_79 + 1)
                                                    _hx_local_79
                                                v_files11 = True
                                            else:
                                                v_files11 = False
                                            if (not v_files11):
                                                while True:
                                                    x = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                                                    _hx___ret1.append(x)
                                                    while True:
                                                        v_files13 = None
                                                        if (self.pos < self.max):
                                                            this63 = self.source
                                                            i62 = self.pos
                                                            v_files13 = (((-1 if ((i62 >= len(this63))) else ord(this63[i62]))) < 33)
                                                        else:
                                                            v_files13 = False
                                                        if (not v_files13):
                                                            break
                                                        _hx_local_80 = self
                                                        _hx_local_81 = _hx_local_80.pos
                                                        _hx_local_80.pos = (_hx_local_81 + 1)
                                                        _hx_local_81
                                                    v_files14 = None
                                                    this64 = self.source
                                                    i63 = self.pos
                                                    if (((-1 if ((i63 >= len(this64))) else ord(this64[i63]))) == 44):
                                                        _hx_local_82 = self
                                                        _hx_local_83 = _hx_local_82.pos
                                                        _hx_local_82.pos = (_hx_local_83 + 1)
                                                        _hx_local_82.pos
                                                        while True:
                                                            v_files15 = None
                                                            if (self.pos < self.max):
                                                                this65 = self.source
                                                                i64 = self.pos
                                                                v_files15 = (((-1 if ((i64 >= len(this65))) else ord(this65[i64]))) < 33)
                                                            else:
                                                                v_files15 = False
                                                            if (not v_files15):
                                                                break
                                                            _hx_local_84 = self
                                                            _hx_local_85 = _hx_local_84.pos
                                                            _hx_local_84.pos = (_hx_local_85 + 1)
                                                            _hx_local_85
                                                        v_files14 = True
                                                    else:
                                                        v_files14 = False
                                                    if (not v_files14):
                                                        break
                                                while True:
                                                    v_files16 = None
                                                    if (self.pos < self.max):
                                                        this66 = self.source
                                                        i65 = self.pos
                                                        v_files16 = (((-1 if ((i65 >= len(this66))) else ord(this66[i65]))) < 33)
                                                    else:
                                                        v_files16 = False
                                                    if (not v_files16):
                                                        break
                                                    _hx_local_86 = self
                                                    _hx_local_87 = _hx_local_86.pos
                                                    _hx_local_86.pos = (_hx_local_87 + 1)
                                                    _hx_local_87
                                                v_files17 = None
                                                this67 = self.source
                                                i66 = self.pos
                                                if (((-1 if ((i66 >= len(this67))) else ord(this67[i66]))) == 93):
                                                    _hx_local_88 = self
                                                    _hx_local_89 = _hx_local_88.pos
                                                    _hx_local_88.pos = (_hx_local_89 + 1)
                                                    _hx_local_88.pos
                                                    while True:
                                                        v_files18 = None
                                                        if (self.pos < self.max):
                                                            this68 = self.source
                                                            i67 = self.pos
                                                            v_files18 = (((-1 if ((i67 >= len(this68))) else ord(this68[i67]))) < 33)
                                                        else:
                                                            v_files18 = False
                                                        if (not v_files18):
                                                            break
                                                        _hx_local_90 = self
                                                        _hx_local_91 = _hx_local_90.pos
                                                        _hx_local_90.pos = (_hx_local_91 + 1)
                                                        _hx_local_91
                                                    v_files17 = True
                                                else:
                                                    v_files17 = False
                                                if (not v_files17):
                                                    self.die(("Expected " + "]"))
                                            v_files = _hx___ret1
                                        hasv_files = True
                                        while True:
                                            tmp4 = None
                                            if (self.pos < self.max):
                                                this69 = self.source
                                                i68 = self.pos
                                                tmp4 = (((-1 if ((i68 >= len(this69))) else ord(this69[i68]))) < 33)
                                            else:
                                                tmp4 = False
                                            if (not tmp4):
                                                break
                                            _hx_local_92 = self
                                            _hx_local_93 = _hx_local_92.pos
                                            _hx_local_92.pos = (_hx_local_93 + 1)
                                            _hx_local_93
                                        tmp5 = None
                                        this70 = self.source
                                        i69 = self.pos
                                        if (((-1 if ((i69 >= len(this70))) else ord(this70[i69]))) == 44):
                                            _hx_local_94 = self
                                            _hx_local_95 = _hx_local_94.pos
                                            _hx_local_94.pos = (_hx_local_95 + 1)
                                            _hx_local_94.pos
                                            tmp5 = True
                                        else:
                                            tmp5 = False
                                        if (not tmp5):
                                            break
                                        else:
                                            continue
                elif (_g1 == 105):
                    this71 = self.source
                    i70 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i70 >= len(this71))) else ord(this71[i70]))
                    if (cur == 100):
                        this72 = self.source
                        i71 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i71 >= len(this72))) else ord(this72[i71]))
                        if (cur == 34):
                            while True:
                                this73 = self.source
                                i72 = self.pos
                                self.pos = (self.pos + 1)
                                _g4 = (-1 if ((i72 >= len(this73))) else ord(this73[i72]))
                                _hx_tmp3 = None
                                if ((_g4 == 58) == True):
                                    break
                                else:
                                    _hx_tmp3 = (_g4 < 33)
                                    if (_hx_tmp3 != True):
                                        self.die(("expected " + ":"))
                            while True:
                                tmp6 = None
                                if (self.pos < self.max):
                                    this74 = self.source
                                    i73 = self.pos
                                    tmp6 = (((-1 if ((i73 >= len(this74))) else ord(this74[i73]))) < 33)
                                else:
                                    tmp6 = False
                                if (not tmp6):
                                    break
                                _hx_local_96 = self
                                _hx_local_97 = _hx_local_96.pos
                                _hx_local_96.pos = (_hx_local_97 + 1)
                                _hx_local_97
                            while True:
                                v_id1 = None
                                if (self.pos < self.max):
                                    this75 = self.source
                                    i74 = self.pos
                                    v_id1 = (((-1 if ((i74 >= len(this75))) else ord(this75[i74]))) < 33)
                                else:
                                    v_id1 = False
                                if (not v_id1):
                                    break
                                _hx_local_98 = self
                                _hx_local_99 = _hx_local_98.pos
                                _hx_local_98.pos = (_hx_local_99 + 1)
                                _hx_local_99
                            v_id2 = None
                            v_id3 = None
                            v_id4 = None
                            v_id5 = None
                            this76 = self.source
                            i75 = self.pos
                            if (((-1 if ((i75 >= len(this76))) else ord(this76[i75]))) == 110):
                                this77 = self.source
                                i76 = (self.pos + 1)
                                v_id5 = (((-1 if ((i76 >= len(this77))) else ord(this77[i76]))) == 117)
                            else:
                                v_id5 = False
                            if v_id5:
                                this78 = self.source
                                i77 = (self.pos + 2)
                                v_id4 = (((-1 if ((i77 >= len(this78))) else ord(this78[i77]))) == 108)
                            else:
                                v_id4 = False
                            if v_id4:
                                this79 = self.source
                                i78 = (self.pos + 3)
                                v_id3 = (((-1 if ((i78 >= len(this79))) else ord(this79[i78]))) == 108)
                            else:
                                v_id3 = False
                            if v_id3:
                                _hx_local_100 = self
                                _hx_local_101 = _hx_local_100.pos
                                _hx_local_100.pos = (_hx_local_101 + 4)
                                _hx_local_100.pos
                                while True:
                                    v_id6 = None
                                    if (self.pos < self.max):
                                        this80 = self.source
                                        i79 = self.pos
                                        v_id6 = (((-1 if ((i79 >= len(this80))) else ord(this80[i79]))) < 33)
                                    else:
                                        v_id6 = False
                                    if (not v_id6):
                                        break
                                    _hx_local_102 = self
                                    _hx_local_103 = _hx_local_102.pos
                                    _hx_local_102.pos = (_hx_local_103 + 1)
                                    _hx_local_103
                                v_id2 = True
                            else:
                                v_id2 = False
                            v_id = (None if v_id2 else tink_json__Parser_JsonString_Impl_.toString(self.parseString()))
                            hasv_id = True
                            while True:
                                tmp7 = None
                                if (self.pos < self.max):
                                    this81 = self.source
                                    i80 = self.pos
                                    tmp7 = (((-1 if ((i80 >= len(this81))) else ord(this81[i80]))) < 33)
                                else:
                                    tmp7 = False
                                if (not tmp7):
                                    break
                                _hx_local_104 = self
                                _hx_local_105 = _hx_local_104.pos
                                _hx_local_104.pos = (_hx_local_105 + 1)
                                _hx_local_105
                            tmp8 = None
                            this82 = self.source
                            i81 = self.pos
                            if (((-1 if ((i81 >= len(this82))) else ord(this82[i81]))) == 44):
                                _hx_local_106 = self
                                _hx_local_107 = _hx_local_106.pos
                                _hx_local_106.pos = (_hx_local_107 + 1)
                                _hx_local_106.pos
                                tmp8 = True
                            else:
                                tmp8 = False
                            if (not tmp8):
                                break
                            else:
                                continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this83 = self.source
                    i82 = self.pos
                    self.pos = (self.pos + 1)
                    _g5 = (-1 if ((i82 >= len(this83))) else ord(this83[i82]))
                    _hx_tmp4 = None
                    if ((_g5 == 58) == True):
                        break
                    else:
                        _hx_tmp4 = (_g5 < 33)
                        if (_hx_tmp4 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp9 = None
                    if (self.pos < self.max):
                        this84 = self.source
                        i83 = self.pos
                        tmp9 = (((-1 if ((i83 >= len(this84))) else ord(this84[i83]))) < 33)
                    else:
                        tmp9 = False
                    if (not tmp9):
                        break
                    _hx_local_108 = self
                    _hx_local_109 = _hx_local_108.pos
                    _hx_local_108.pos = (_hx_local_109 + 1)
                    _hx_local_109
                self.skipValue()
                while True:
                    tmp10 = None
                    if (self.pos < self.max):
                        this85 = self.source
                        i84 = self.pos
                        tmp10 = (((-1 if ((i84 >= len(this85))) else ord(this85[i84]))) < 33)
                    else:
                        tmp10 = False
                    if (not tmp10):
                        break
                    _hx_local_110 = self
                    _hx_local_111 = _hx_local_110.pos
                    _hx_local_110.pos = (_hx_local_111 + 1)
                    _hx_local_111
                tmp11 = None
                this86 = self.source
                i85 = self.pos
                if (((-1 if ((i85 >= len(this86))) else ord(this86[i85]))) == 44):
                    _hx_local_112 = self
                    _hx_local_113 = _hx_local_112.pos
                    _hx_local_112.pos = (_hx_local_113 + 1)
                    _hx_local_112.pos
                    tmp11 = True
                else:
                    tmp11 = False
                if (not tmp11):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_114 = self
                _hx_local_115 = _hx_local_114.pos
                _hx_local_114.pos = (_hx_local_115 + 1)
                _hx_local_115
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_116 = self
                _hx_local_117 = _hx_local_116.pos
                _hx_local_116.pos = (_hx_local_117 + 1)
                _hx_local_116.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_118 = self
                    _hx_local_119 = _hx_local_118.pos
                    _hx_local_118.pos = (_hx_local_119 + 1)
                    _hx_local_119
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_120(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_120
        return _hx_AnonObject({'components': (v_components if hasv_components else __missing__("components")), 'files': (v_files if hasv_files else __missing__("files")), 'id': (v_id if hasv_id else __missing__("id"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        json = self.process0()
        ret = nat_Entry(json.id,json.components,json.files)
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser0", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser0._hx_class = tink_json_Parser0
_hx_classes["tink.json.Parser0"] = tink_json_Parser0


class tink_json_Parser1(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser1"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 91):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "["))
        _hx___ret = haxe_ds_StringMap()
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_8.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_10 = self
                _hx_local_11 = _hx_local_10.pos
                _hx_local_10.pos = (_hx_local_11 + 1)
                _hx_local_11
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp1 = None
                this2 = self.source
                i1 = self.pos
                if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 91):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    while True:
                        tmp2 = None
                        if (self.pos < self.max):
                            this3 = self.source
                            i2 = self.pos
                            tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _hx_local_16 = self
                        _hx_local_17 = _hx_local_16.pos
                        _hx_local_16.pos = (_hx_local_17 + 1)
                        _hx_local_17
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    self.die(("Expected " + "["))
                _e0 = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                while True:
                    e = None
                    if (self.pos < self.max):
                        this4 = self.source
                        i3 = self.pos
                        e = (((-1 if ((i3 >= len(this4))) else ord(this4[i3]))) < 33)
                    else:
                        e = False
                    if (not e):
                        break
                    _hx_local_18 = self
                    _hx_local_19 = _hx_local_18.pos
                    _hx_local_18.pos = (_hx_local_19 + 1)
                    _hx_local_19
                e1 = None
                this5 = self.source
                i4 = self.pos
                if (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) == 44):
                    _hx_local_20 = self
                    _hx_local_21 = _hx_local_20.pos
                    _hx_local_20.pos = (_hx_local_21 + 1)
                    _hx_local_20.pos
                    while True:
                        e2 = None
                        if (self.pos < self.max):
                            this6 = self.source
                            i5 = self.pos
                            e2 = (((-1 if ((i5 >= len(this6))) else ord(this6[i5]))) < 33)
                        else:
                            e2 = False
                        if (not e2):
                            break
                        _hx_local_22 = self
                        _hx_local_23 = _hx_local_22.pos
                        _hx_local_22.pos = (_hx_local_23 + 1)
                        _hx_local_23
                    e1 = True
                else:
                    e1 = False
                e3 = (self.die(("Expected " + ",")) if ((not e1)) else None)
                this7 = self.parseNumber()
                _e1 = Std.parseInt(HxString.substring(this7.source,this7.min,this7.max))
                _hx___ret.h[_e0] = _e1
                while True:
                    tmp3 = None
                    if (self.pos < self.max):
                        this8 = self.source
                        i6 = self.pos
                        tmp3 = (((-1 if ((i6 >= len(this8))) else ord(this8[i6]))) < 33)
                    else:
                        tmp3 = False
                    if (not tmp3):
                        break
                    _hx_local_24 = self
                    _hx_local_25 = _hx_local_24.pos
                    _hx_local_24.pos = (_hx_local_25 + 1)
                    _hx_local_25
                tmp4 = None
                this9 = self.source
                i7 = self.pos
                if (((-1 if ((i7 >= len(this9))) else ord(this9[i7]))) == 93):
                    _hx_local_26 = self
                    _hx_local_27 = _hx_local_26.pos
                    _hx_local_26.pos = (_hx_local_27 + 1)
                    _hx_local_26.pos
                    while True:
                        tmp5 = None
                        if (self.pos < self.max):
                            this10 = self.source
                            i8 = self.pos
                            tmp5 = (((-1 if ((i8 >= len(this10))) else ord(this10[i8]))) < 33)
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        _hx_local_28 = self
                        _hx_local_29 = _hx_local_28.pos
                        _hx_local_28.pos = (_hx_local_29 + 1)
                        _hx_local_29
                    tmp4 = True
                else:
                    tmp4 = False
                if (not tmp4):
                    self.die(("Expected " + "]"))
                while True:
                    tmp6 = None
                    if (self.pos < self.max):
                        this11 = self.source
                        i9 = self.pos
                        tmp6 = (((-1 if ((i9 >= len(this11))) else ord(this11[i9]))) < 33)
                    else:
                        tmp6 = False
                    if (not tmp6):
                        break
                    _hx_local_30 = self
                    _hx_local_31 = _hx_local_30.pos
                    _hx_local_30.pos = (_hx_local_31 + 1)
                    _hx_local_31
                tmp7 = None
                this12 = self.source
                i10 = self.pos
                if (((-1 if ((i10 >= len(this12))) else ord(this12[i10]))) == 44):
                    _hx_local_32 = self
                    _hx_local_33 = _hx_local_32.pos
                    _hx_local_32.pos = (_hx_local_33 + 1)
                    _hx_local_32.pos
                    while True:
                        tmp8 = None
                        if (self.pos < self.max):
                            this13 = self.source
                            i11 = self.pos
                            tmp8 = (((-1 if ((i11 >= len(this13))) else ord(this13[i11]))) < 33)
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        _hx_local_34 = self
                        _hx_local_35 = _hx_local_34.pos
                        _hx_local_34.pos = (_hx_local_35 + 1)
                        _hx_local_35
                    tmp7 = True
                else:
                    tmp7 = False
                if (not tmp7):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_36 = self
                _hx_local_37 = _hx_local_36.pos
                _hx_local_36.pos = (_hx_local_37 + 1)
                _hx_local_37
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_38 = self
                _hx_local_39 = _hx_local_38.pos
                _hx_local_38.pos = (_hx_local_39 + 1)
                _hx_local_38.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_40 = self
                    _hx_local_41 = _hx_local_40.pos
                    _hx_local_40.pos = (_hx_local_41 + 1)
                    _hx_local_41
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "]"))
        ret = _hx___ret
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser1", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser1._hx_class = tink_json_Parser1
_hx_classes["tink.json.Parser1"] = tink_json_Parser1


class tink_json_Parser10(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser10"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_a = .0
        hasv_a = False
        v_b = .0
        hasv_b = False
        v_g = .0
        hasv_g = False
        v_r = .0
        hasv_r = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 97):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 34):
                        while True:
                            this4 = self.source
                            i3 = self.pos
                            self.pos = (self.pos + 1)
                            _g2 = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                            _hx_tmp1 = None
                            if ((_g2 == 58) == True):
                                break
                            else:
                                _hx_tmp1 = (_g2 < 33)
                                if (_hx_tmp1 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp = None
                            if (self.pos < self.max):
                                this5 = self.source
                                i4 = self.pos
                                tmp = (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) < 33)
                            else:
                                tmp = False
                            if (not tmp):
                                break
                            _hx_local_6 = self
                            _hx_local_7 = _hx_local_6.pos
                            _hx_local_6.pos = (_hx_local_7 + 1)
                            _hx_local_7
                        this6 = self.parseNumber()
                        v_a = Std.parseFloat(HxString.substring(this6.source,this6.min,this6.max))
                        hasv_a = True
                        while True:
                            tmp1 = None
                            if (self.pos < self.max):
                                this7 = self.source
                                i5 = self.pos
                                tmp1 = (((-1 if ((i5 >= len(this7))) else ord(this7[i5]))) < 33)
                            else:
                                tmp1 = False
                            if (not tmp1):
                                break
                            _hx_local_8 = self
                            _hx_local_9 = _hx_local_8.pos
                            _hx_local_8.pos = (_hx_local_9 + 1)
                            _hx_local_9
                        tmp2 = None
                        this8 = self.source
                        i6 = self.pos
                        if (((-1 if ((i6 >= len(this8))) else ord(this8[i6]))) == 44):
                            _hx_local_10 = self
                            _hx_local_11 = _hx_local_10.pos
                            _hx_local_10.pos = (_hx_local_11 + 1)
                            _hx_local_10.pos
                            tmp2 = True
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        else:
                            continue
                elif (_g1 == 98):
                    this9 = self.source
                    i7 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i7 >= len(this9))) else ord(this9[i7]))
                    if (cur == 34):
                        while True:
                            this10 = self.source
                            i8 = self.pos
                            self.pos = (self.pos + 1)
                            _g3 = (-1 if ((i8 >= len(this10))) else ord(this10[i8]))
                            _hx_tmp2 = None
                            if ((_g3 == 58) == True):
                                break
                            else:
                                _hx_tmp2 = (_g3 < 33)
                                if (_hx_tmp2 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp3 = None
                            if (self.pos < self.max):
                                this11 = self.source
                                i9 = self.pos
                                tmp3 = (((-1 if ((i9 >= len(this11))) else ord(this11[i9]))) < 33)
                            else:
                                tmp3 = False
                            if (not tmp3):
                                break
                            _hx_local_12 = self
                            _hx_local_13 = _hx_local_12.pos
                            _hx_local_12.pos = (_hx_local_13 + 1)
                            _hx_local_13
                        this12 = self.parseNumber()
                        v_b = Std.parseFloat(HxString.substring(this12.source,this12.min,this12.max))
                        hasv_b = True
                        while True:
                            tmp4 = None
                            if (self.pos < self.max):
                                this13 = self.source
                                i10 = self.pos
                                tmp4 = (((-1 if ((i10 >= len(this13))) else ord(this13[i10]))) < 33)
                            else:
                                tmp4 = False
                            if (not tmp4):
                                break
                            _hx_local_14 = self
                            _hx_local_15 = _hx_local_14.pos
                            _hx_local_14.pos = (_hx_local_15 + 1)
                            _hx_local_15
                        tmp5 = None
                        this14 = self.source
                        i11 = self.pos
                        if (((-1 if ((i11 >= len(this14))) else ord(this14[i11]))) == 44):
                            _hx_local_16 = self
                            _hx_local_17 = _hx_local_16.pos
                            _hx_local_16.pos = (_hx_local_17 + 1)
                            _hx_local_16.pos
                            tmp5 = True
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        else:
                            continue
                elif (_g1 == 103):
                    this15 = self.source
                    i12 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i12 >= len(this15))) else ord(this15[i12]))
                    if (cur == 34):
                        while True:
                            this16 = self.source
                            i13 = self.pos
                            self.pos = (self.pos + 1)
                            _g4 = (-1 if ((i13 >= len(this16))) else ord(this16[i13]))
                            _hx_tmp3 = None
                            if ((_g4 == 58) == True):
                                break
                            else:
                                _hx_tmp3 = (_g4 < 33)
                                if (_hx_tmp3 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp6 = None
                            if (self.pos < self.max):
                                this17 = self.source
                                i14 = self.pos
                                tmp6 = (((-1 if ((i14 >= len(this17))) else ord(this17[i14]))) < 33)
                            else:
                                tmp6 = False
                            if (not tmp6):
                                break
                            _hx_local_18 = self
                            _hx_local_19 = _hx_local_18.pos
                            _hx_local_18.pos = (_hx_local_19 + 1)
                            _hx_local_19
                        this18 = self.parseNumber()
                        v_g = Std.parseFloat(HxString.substring(this18.source,this18.min,this18.max))
                        hasv_g = True
                        while True:
                            tmp7 = None
                            if (self.pos < self.max):
                                this19 = self.source
                                i15 = self.pos
                                tmp7 = (((-1 if ((i15 >= len(this19))) else ord(this19[i15]))) < 33)
                            else:
                                tmp7 = False
                            if (not tmp7):
                                break
                            _hx_local_20 = self
                            _hx_local_21 = _hx_local_20.pos
                            _hx_local_20.pos = (_hx_local_21 + 1)
                            _hx_local_21
                        tmp8 = None
                        this20 = self.source
                        i16 = self.pos
                        if (((-1 if ((i16 >= len(this20))) else ord(this20[i16]))) == 44):
                            _hx_local_22 = self
                            _hx_local_23 = _hx_local_22.pos
                            _hx_local_22.pos = (_hx_local_23 + 1)
                            _hx_local_22.pos
                            tmp8 = True
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        else:
                            continue
                elif (_g1 == 114):
                    this21 = self.source
                    i17 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i17 >= len(this21))) else ord(this21[i17]))
                    if (cur == 34):
                        while True:
                            this22 = self.source
                            i18 = self.pos
                            self.pos = (self.pos + 1)
                            _g5 = (-1 if ((i18 >= len(this22))) else ord(this22[i18]))
                            _hx_tmp4 = None
                            if ((_g5 == 58) == True):
                                break
                            else:
                                _hx_tmp4 = (_g5 < 33)
                                if (_hx_tmp4 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp9 = None
                            if (self.pos < self.max):
                                this23 = self.source
                                i19 = self.pos
                                tmp9 = (((-1 if ((i19 >= len(this23))) else ord(this23[i19]))) < 33)
                            else:
                                tmp9 = False
                            if (not tmp9):
                                break
                            _hx_local_24 = self
                            _hx_local_25 = _hx_local_24.pos
                            _hx_local_24.pos = (_hx_local_25 + 1)
                            _hx_local_25
                        this24 = self.parseNumber()
                        v_r = Std.parseFloat(HxString.substring(this24.source,this24.min,this24.max))
                        hasv_r = True
                        while True:
                            tmp10 = None
                            if (self.pos < self.max):
                                this25 = self.source
                                i20 = self.pos
                                tmp10 = (((-1 if ((i20 >= len(this25))) else ord(this25[i20]))) < 33)
                            else:
                                tmp10 = False
                            if (not tmp10):
                                break
                            _hx_local_26 = self
                            _hx_local_27 = _hx_local_26.pos
                            _hx_local_26.pos = (_hx_local_27 + 1)
                            _hx_local_27
                        tmp11 = None
                        this26 = self.source
                        i21 = self.pos
                        if (((-1 if ((i21 >= len(this26))) else ord(this26[i21]))) == 44):
                            _hx_local_28 = self
                            _hx_local_29 = _hx_local_28.pos
                            _hx_local_28.pos = (_hx_local_29 + 1)
                            _hx_local_28.pos
                            tmp11 = True
                        else:
                            tmp11 = False
                        if (not tmp11):
                            break
                        else:
                            continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this27 = self.source
                    i22 = self.pos
                    self.pos = (self.pos + 1)
                    _g6 = (-1 if ((i22 >= len(this27))) else ord(this27[i22]))
                    _hx_tmp5 = None
                    if ((_g6 == 58) == True):
                        break
                    else:
                        _hx_tmp5 = (_g6 < 33)
                        if (_hx_tmp5 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp12 = None
                    if (self.pos < self.max):
                        this28 = self.source
                        i23 = self.pos
                        tmp12 = (((-1 if ((i23 >= len(this28))) else ord(this28[i23]))) < 33)
                    else:
                        tmp12 = False
                    if (not tmp12):
                        break
                    _hx_local_30 = self
                    _hx_local_31 = _hx_local_30.pos
                    _hx_local_30.pos = (_hx_local_31 + 1)
                    _hx_local_31
                self.skipValue()
                while True:
                    tmp13 = None
                    if (self.pos < self.max):
                        this29 = self.source
                        i24 = self.pos
                        tmp13 = (((-1 if ((i24 >= len(this29))) else ord(this29[i24]))) < 33)
                    else:
                        tmp13 = False
                    if (not tmp13):
                        break
                    _hx_local_32 = self
                    _hx_local_33 = _hx_local_32.pos
                    _hx_local_32.pos = (_hx_local_33 + 1)
                    _hx_local_33
                tmp14 = None
                this30 = self.source
                i25 = self.pos
                if (((-1 if ((i25 >= len(this30))) else ord(this30[i25]))) == 44):
                    _hx_local_34 = self
                    _hx_local_35 = _hx_local_34.pos
                    _hx_local_34.pos = (_hx_local_35 + 1)
                    _hx_local_34.pos
                    tmp14 = True
                else:
                    tmp14 = False
                if (not tmp14):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_36 = self
                _hx_local_37 = _hx_local_36.pos
                _hx_local_36.pos = (_hx_local_37 + 1)
                _hx_local_37
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_38 = self
                _hx_local_39 = _hx_local_38.pos
                _hx_local_38.pos = (_hx_local_39 + 1)
                _hx_local_38.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_40 = self
                    _hx_local_41 = _hx_local_40.pos
                    _hx_local_40.pos = (_hx_local_41 + 1)
                    _hx_local_41
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_42(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_42
        return _hx_AnonObject({'a': (v_a if hasv_a else __missing__("a")), 'b': (v_b if hasv_b else __missing__("b")), 'g': (v_g if hasv_g else __missing__("g")), 'r': (v_r if hasv_r else __missing__("r"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        ret = self.process0()
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser10", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser10._hx_class = tink_json_Parser10
_hx_classes["tink.json.Parser10"] = tink_json_Parser10


class tink_json_Parser11(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser11"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 91):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "["))
        _hx___ret = []
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_8.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_10 = self
                _hx_local_11 = _hx_local_10.pos
                _hx_local_10.pos = (_hx_local_11 + 1)
                _hx_local_11
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                x = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                _hx___ret.append(x)
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp1 = None
                this2 = self.source
                i1 = self.pos
                if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 44):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    while True:
                        tmp2 = None
                        if (self.pos < self.max):
                            this3 = self.source
                            i2 = self.pos
                            tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _hx_local_16 = self
                        _hx_local_17 = _hx_local_16.pos
                        _hx_local_16.pos = (_hx_local_17 + 1)
                        _hx_local_17
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_18 = self
                _hx_local_19 = _hx_local_18.pos
                _hx_local_18.pos = (_hx_local_19 + 1)
                _hx_local_19
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_20 = self
                _hx_local_21 = _hx_local_20.pos
                _hx_local_20.pos = (_hx_local_21 + 1)
                _hx_local_20.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_22 = self
                    _hx_local_23 = _hx_local_22.pos
                    _hx_local_22.pos = (_hx_local_23 + 1)
                    _hx_local_23
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "]"))
        ret = _hx___ret
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser11", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser11._hx_class = tink_json_Parser11
_hx_classes["tink.json.Parser11"] = tink_json_Parser11


class tink_json_Parser2(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser2"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        ret = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser2", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser2._hx_class = tink_json_Parser2
_hx_classes["tink.json.Parser2"] = tink_json_Parser2


class tink_json_Parser3(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser3"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_imageFiles = None
        hasv_imageFiles = False
        v_pinnedImageIndex = 0
        hasv_pinnedImageIndex = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 105):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 109):
                        this4 = self.source
                        i3 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                        if (cur == 97):
                            this5 = self.source
                            i4 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i4 >= len(this5))) else ord(this5[i4]))
                            if (cur == 103):
                                this6 = self.source
                                i5 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i5 >= len(this6))) else ord(this6[i5]))
                                if (cur == 101):
                                    this7 = self.source
                                    i6 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i6 >= len(this7))) else ord(this7[i6]))
                                    if (cur == 70):
                                        this8 = self.source
                                        i7 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i7 >= len(this8))) else ord(this8[i7]))
                                        if (cur == 105):
                                            this9 = self.source
                                            i8 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i8 >= len(this9))) else ord(this9[i8]))
                                            if (cur == 108):
                                                this10 = self.source
                                                i9 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i9 >= len(this10))) else ord(this10[i9]))
                                                if (cur == 101):
                                                    this11 = self.source
                                                    i10 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i10 >= len(this11))) else ord(this11[i10]))
                                                    if (cur == 115):
                                                        this12 = self.source
                                                        i11 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i11 >= len(this12))) else ord(this12[i11]))
                                                        if (cur == 34):
                                                            while True:
                                                                this13 = self.source
                                                                i12 = self.pos
                                                                self.pos = (self.pos + 1)
                                                                _g2 = (-1 if ((i12 >= len(this13))) else ord(this13[i12]))
                                                                _hx_tmp1 = None
                                                                if ((_g2 == 58) == True):
                                                                    break
                                                                else:
                                                                    _hx_tmp1 = (_g2 < 33)
                                                                    if (_hx_tmp1 != True):
                                                                        self.die(("expected " + ":"))
                                                            while True:
                                                                tmp = None
                                                                if (self.pos < self.max):
                                                                    this14 = self.source
                                                                    i13 = self.pos
                                                                    tmp = (((-1 if ((i13 >= len(this14))) else ord(this14[i13]))) < 33)
                                                                else:
                                                                    tmp = False
                                                                if (not tmp):
                                                                    break
                                                                _hx_local_6 = self
                                                                _hx_local_7 = _hx_local_6.pos
                                                                _hx_local_6.pos = (_hx_local_7 + 1)
                                                                _hx_local_7
                                                            while True:
                                                                v_imageFiles1 = None
                                                                if (self.pos < self.max):
                                                                    this15 = self.source
                                                                    i14 = self.pos
                                                                    v_imageFiles1 = (((-1 if ((i14 >= len(this15))) else ord(this15[i14]))) < 33)
                                                                else:
                                                                    v_imageFiles1 = False
                                                                if (not v_imageFiles1):
                                                                    break
                                                                _hx_local_8 = self
                                                                _hx_local_9 = _hx_local_8.pos
                                                                _hx_local_8.pos = (_hx_local_9 + 1)
                                                                _hx_local_9
                                                            v_imageFiles2 = None
                                                            this16 = self.source
                                                            i15 = self.pos
                                                            if (((-1 if ((i15 >= len(this16))) else ord(this16[i15]))) == 91):
                                                                _hx_local_10 = self
                                                                _hx_local_11 = _hx_local_10.pos
                                                                _hx_local_10.pos = (_hx_local_11 + 1)
                                                                _hx_local_10.pos
                                                                while True:
                                                                    v_imageFiles3 = None
                                                                    if (self.pos < self.max):
                                                                        this17 = self.source
                                                                        i16 = self.pos
                                                                        v_imageFiles3 = (((-1 if ((i16 >= len(this17))) else ord(this17[i16]))) < 33)
                                                                    else:
                                                                        v_imageFiles3 = False
                                                                    if (not v_imageFiles3):
                                                                        break
                                                                    _hx_local_12 = self
                                                                    _hx_local_13 = _hx_local_12.pos
                                                                    _hx_local_12.pos = (_hx_local_13 + 1)
                                                                    _hx_local_13
                                                                v_imageFiles2 = True
                                                            else:
                                                                v_imageFiles2 = False
                                                            if (not v_imageFiles2):
                                                                self.die(("Expected " + "["))
                                                            _hx___ret = []
                                                            while True:
                                                                v_imageFiles4 = None
                                                                if (self.pos < self.max):
                                                                    this18 = self.source
                                                                    i17 = self.pos
                                                                    v_imageFiles4 = (((-1 if ((i17 >= len(this18))) else ord(this18[i17]))) < 33)
                                                                else:
                                                                    v_imageFiles4 = False
                                                                if (not v_imageFiles4):
                                                                    break
                                                                _hx_local_14 = self
                                                                _hx_local_15 = _hx_local_14.pos
                                                                _hx_local_14.pos = (_hx_local_15 + 1)
                                                                _hx_local_15
                                                            v_imageFiles5 = None
                                                            this19 = self.source
                                                            i18 = self.pos
                                                            if (((-1 if ((i18 >= len(this19))) else ord(this19[i18]))) == 93):
                                                                _hx_local_16 = self
                                                                _hx_local_17 = _hx_local_16.pos
                                                                _hx_local_16.pos = (_hx_local_17 + 1)
                                                                _hx_local_16.pos
                                                                while True:
                                                                    v_imageFiles6 = None
                                                                    if (self.pos < self.max):
                                                                        this20 = self.source
                                                                        i19 = self.pos
                                                                        v_imageFiles6 = (((-1 if ((i19 >= len(this20))) else ord(this20[i19]))) < 33)
                                                                    else:
                                                                        v_imageFiles6 = False
                                                                    if (not v_imageFiles6):
                                                                        break
                                                                    _hx_local_18 = self
                                                                    _hx_local_19 = _hx_local_18.pos
                                                                    _hx_local_18.pos = (_hx_local_19 + 1)
                                                                    _hx_local_19
                                                                v_imageFiles5 = True
                                                            else:
                                                                v_imageFiles5 = False
                                                            if (not v_imageFiles5):
                                                                while True:
                                                                    x = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                                                                    _hx___ret.append(x)
                                                                    while True:
                                                                        v_imageFiles7 = None
                                                                        if (self.pos < self.max):
                                                                            this21 = self.source
                                                                            i20 = self.pos
                                                                            v_imageFiles7 = (((-1 if ((i20 >= len(this21))) else ord(this21[i20]))) < 33)
                                                                        else:
                                                                            v_imageFiles7 = False
                                                                        if (not v_imageFiles7):
                                                                            break
                                                                        _hx_local_20 = self
                                                                        _hx_local_21 = _hx_local_20.pos
                                                                        _hx_local_20.pos = (_hx_local_21 + 1)
                                                                        _hx_local_21
                                                                    v_imageFiles8 = None
                                                                    this22 = self.source
                                                                    i21 = self.pos
                                                                    if (((-1 if ((i21 >= len(this22))) else ord(this22[i21]))) == 44):
                                                                        _hx_local_22 = self
                                                                        _hx_local_23 = _hx_local_22.pos
                                                                        _hx_local_22.pos = (_hx_local_23 + 1)
                                                                        _hx_local_22.pos
                                                                        while True:
                                                                            v_imageFiles9 = None
                                                                            if (self.pos < self.max):
                                                                                this23 = self.source
                                                                                i22 = self.pos
                                                                                v_imageFiles9 = (((-1 if ((i22 >= len(this23))) else ord(this23[i22]))) < 33)
                                                                            else:
                                                                                v_imageFiles9 = False
                                                                            if (not v_imageFiles9):
                                                                                break
                                                                            _hx_local_24 = self
                                                                            _hx_local_25 = _hx_local_24.pos
                                                                            _hx_local_24.pos = (_hx_local_25 + 1)
                                                                            _hx_local_25
                                                                        v_imageFiles8 = True
                                                                    else:
                                                                        v_imageFiles8 = False
                                                                    if (not v_imageFiles8):
                                                                        break
                                                                while True:
                                                                    v_imageFiles10 = None
                                                                    if (self.pos < self.max):
                                                                        this24 = self.source
                                                                        i23 = self.pos
                                                                        v_imageFiles10 = (((-1 if ((i23 >= len(this24))) else ord(this24[i23]))) < 33)
                                                                    else:
                                                                        v_imageFiles10 = False
                                                                    if (not v_imageFiles10):
                                                                        break
                                                                    _hx_local_26 = self
                                                                    _hx_local_27 = _hx_local_26.pos
                                                                    _hx_local_26.pos = (_hx_local_27 + 1)
                                                                    _hx_local_27
                                                                v_imageFiles11 = None
                                                                this25 = self.source
                                                                i24 = self.pos
                                                                if (((-1 if ((i24 >= len(this25))) else ord(this25[i24]))) == 93):
                                                                    _hx_local_28 = self
                                                                    _hx_local_29 = _hx_local_28.pos
                                                                    _hx_local_28.pos = (_hx_local_29 + 1)
                                                                    _hx_local_28.pos
                                                                    while True:
                                                                        v_imageFiles12 = None
                                                                        if (self.pos < self.max):
                                                                            this26 = self.source
                                                                            i25 = self.pos
                                                                            v_imageFiles12 = (((-1 if ((i25 >= len(this26))) else ord(this26[i25]))) < 33)
                                                                        else:
                                                                            v_imageFiles12 = False
                                                                        if (not v_imageFiles12):
                                                                            break
                                                                        _hx_local_30 = self
                                                                        _hx_local_31 = _hx_local_30.pos
                                                                        _hx_local_30.pos = (_hx_local_31 + 1)
                                                                        _hx_local_31
                                                                    v_imageFiles11 = True
                                                                else:
                                                                    v_imageFiles11 = False
                                                                if (not v_imageFiles11):
                                                                    self.die(("Expected " + "]"))
                                                            v_imageFiles = _hx___ret
                                                            hasv_imageFiles = True
                                                            while True:
                                                                tmp1 = None
                                                                if (self.pos < self.max):
                                                                    this27 = self.source
                                                                    i26 = self.pos
                                                                    tmp1 = (((-1 if ((i26 >= len(this27))) else ord(this27[i26]))) < 33)
                                                                else:
                                                                    tmp1 = False
                                                                if (not tmp1):
                                                                    break
                                                                _hx_local_32 = self
                                                                _hx_local_33 = _hx_local_32.pos
                                                                _hx_local_32.pos = (_hx_local_33 + 1)
                                                                _hx_local_33
                                                            tmp2 = None
                                                            this28 = self.source
                                                            i27 = self.pos
                                                            if (((-1 if ((i27 >= len(this28))) else ord(this28[i27]))) == 44):
                                                                _hx_local_34 = self
                                                                _hx_local_35 = _hx_local_34.pos
                                                                _hx_local_34.pos = (_hx_local_35 + 1)
                                                                _hx_local_34.pos
                                                                tmp2 = True
                                                            else:
                                                                tmp2 = False
                                                            if (not tmp2):
                                                                break
                                                            else:
                                                                continue
                elif (_g1 == 112):
                    this29 = self.source
                    i28 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i28 >= len(this29))) else ord(this29[i28]))
                    if (cur == 105):
                        this30 = self.source
                        i29 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i29 >= len(this30))) else ord(this30[i29]))
                        if (cur == 110):
                            this31 = self.source
                            i30 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i30 >= len(this31))) else ord(this31[i30]))
                            if (cur == 110):
                                this32 = self.source
                                i31 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i31 >= len(this32))) else ord(this32[i31]))
                                if (cur == 101):
                                    this33 = self.source
                                    i32 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i32 >= len(this33))) else ord(this33[i32]))
                                    if (cur == 100):
                                        this34 = self.source
                                        i33 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i33 >= len(this34))) else ord(this34[i33]))
                                        if (cur == 73):
                                            this35 = self.source
                                            i34 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i34 >= len(this35))) else ord(this35[i34]))
                                            if (cur == 109):
                                                this36 = self.source
                                                i35 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i35 >= len(this36))) else ord(this36[i35]))
                                                if (cur == 97):
                                                    this37 = self.source
                                                    i36 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i36 >= len(this37))) else ord(this37[i36]))
                                                    if (cur == 103):
                                                        this38 = self.source
                                                        i37 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i37 >= len(this38))) else ord(this38[i37]))
                                                        if (cur == 101):
                                                            this39 = self.source
                                                            i38 = self.pos
                                                            self.pos = (self.pos + 1)
                                                            cur = (-1 if ((i38 >= len(this39))) else ord(this39[i38]))
                                                            if (cur == 73):
                                                                this40 = self.source
                                                                i39 = self.pos
                                                                self.pos = (self.pos + 1)
                                                                cur = (-1 if ((i39 >= len(this40))) else ord(this40[i39]))
                                                                if (cur == 110):
                                                                    this41 = self.source
                                                                    i40 = self.pos
                                                                    self.pos = (self.pos + 1)
                                                                    cur = (-1 if ((i40 >= len(this41))) else ord(this41[i40]))
                                                                    if (cur == 100):
                                                                        this42 = self.source
                                                                        i41 = self.pos
                                                                        self.pos = (self.pos + 1)
                                                                        cur = (-1 if ((i41 >= len(this42))) else ord(this42[i41]))
                                                                        if (cur == 101):
                                                                            this43 = self.source
                                                                            i42 = self.pos
                                                                            self.pos = (self.pos + 1)
                                                                            cur = (-1 if ((i42 >= len(this43))) else ord(this43[i42]))
                                                                            if (cur == 120):
                                                                                this44 = self.source
                                                                                i43 = self.pos
                                                                                self.pos = (self.pos + 1)
                                                                                cur = (-1 if ((i43 >= len(this44))) else ord(this44[i43]))
                                                                                if (cur == 34):
                                                                                    while True:
                                                                                        this45 = self.source
                                                                                        i44 = self.pos
                                                                                        self.pos = (self.pos + 1)
                                                                                        _g3 = (-1 if ((i44 >= len(this45))) else ord(this45[i44]))
                                                                                        _hx_tmp2 = None
                                                                                        if ((_g3 == 58) == True):
                                                                                            break
                                                                                        else:
                                                                                            _hx_tmp2 = (_g3 < 33)
                                                                                            if (_hx_tmp2 != True):
                                                                                                self.die(("expected " + ":"))
                                                                                    while True:
                                                                                        tmp3 = None
                                                                                        if (self.pos < self.max):
                                                                                            this46 = self.source
                                                                                            i45 = self.pos
                                                                                            tmp3 = (((-1 if ((i45 >= len(this46))) else ord(this46[i45]))) < 33)
                                                                                        else:
                                                                                            tmp3 = False
                                                                                        if (not tmp3):
                                                                                            break
                                                                                        _hx_local_36 = self
                                                                                        _hx_local_37 = _hx_local_36.pos
                                                                                        _hx_local_36.pos = (_hx_local_37 + 1)
                                                                                        _hx_local_37
                                                                                    this47 = self.parseNumber()
                                                                                    v_pinnedImageIndex = Std.parseInt(HxString.substring(this47.source,this47.min,this47.max))
                                                                                    hasv_pinnedImageIndex = True
                                                                                    while True:
                                                                                        tmp4 = None
                                                                                        if (self.pos < self.max):
                                                                                            this48 = self.source
                                                                                            i46 = self.pos
                                                                                            tmp4 = (((-1 if ((i46 >= len(this48))) else ord(this48[i46]))) < 33)
                                                                                        else:
                                                                                            tmp4 = False
                                                                                        if (not tmp4):
                                                                                            break
                                                                                        _hx_local_38 = self
                                                                                        _hx_local_39 = _hx_local_38.pos
                                                                                        _hx_local_38.pos = (_hx_local_39 + 1)
                                                                                        _hx_local_39
                                                                                    tmp5 = None
                                                                                    this49 = self.source
                                                                                    i47 = self.pos
                                                                                    if (((-1 if ((i47 >= len(this49))) else ord(this49[i47]))) == 44):
                                                                                        _hx_local_40 = self
                                                                                        _hx_local_41 = _hx_local_40.pos
                                                                                        _hx_local_40.pos = (_hx_local_41 + 1)
                                                                                        _hx_local_40.pos
                                                                                        tmp5 = True
                                                                                    else:
                                                                                        tmp5 = False
                                                                                    if (not tmp5):
                                                                                        break
                                                                                    else:
                                                                                        continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this50 = self.source
                    i48 = self.pos
                    self.pos = (self.pos + 1)
                    _g4 = (-1 if ((i48 >= len(this50))) else ord(this50[i48]))
                    _hx_tmp3 = None
                    if ((_g4 == 58) == True):
                        break
                    else:
                        _hx_tmp3 = (_g4 < 33)
                        if (_hx_tmp3 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp6 = None
                    if (self.pos < self.max):
                        this51 = self.source
                        i49 = self.pos
                        tmp6 = (((-1 if ((i49 >= len(this51))) else ord(this51[i49]))) < 33)
                    else:
                        tmp6 = False
                    if (not tmp6):
                        break
                    _hx_local_42 = self
                    _hx_local_43 = _hx_local_42.pos
                    _hx_local_42.pos = (_hx_local_43 + 1)
                    _hx_local_43
                self.skipValue()
                while True:
                    tmp7 = None
                    if (self.pos < self.max):
                        this52 = self.source
                        i50 = self.pos
                        tmp7 = (((-1 if ((i50 >= len(this52))) else ord(this52[i50]))) < 33)
                    else:
                        tmp7 = False
                    if (not tmp7):
                        break
                    _hx_local_44 = self
                    _hx_local_45 = _hx_local_44.pos
                    _hx_local_44.pos = (_hx_local_45 + 1)
                    _hx_local_45
                tmp8 = None
                this53 = self.source
                i51 = self.pos
                if (((-1 if ((i51 >= len(this53))) else ord(this53[i51]))) == 44):
                    _hx_local_46 = self
                    _hx_local_47 = _hx_local_46.pos
                    _hx_local_46.pos = (_hx_local_47 + 1)
                    _hx_local_46.pos
                    tmp8 = True
                else:
                    tmp8 = False
                if (not tmp8):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_48 = self
                _hx_local_49 = _hx_local_48.pos
                _hx_local_48.pos = (_hx_local_49 + 1)
                _hx_local_49
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_50 = self
                _hx_local_51 = _hx_local_50.pos
                _hx_local_50.pos = (_hx_local_51 + 1)
                _hx_local_50.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_52 = self
                    _hx_local_53 = _hx_local_52.pos
                    _hx_local_52.pos = (_hx_local_53 + 1)
                    _hx_local_53
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_54(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_54
        return _hx_AnonObject({'imageFiles': (v_imageFiles if hasv_imageFiles else __missing__("imageFiles")), 'pinnedImageIndex': (v_pinnedImageIndex if hasv_pinnedImageIndex else __missing__("pinnedImageIndex"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        ret = self.process0()
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser3", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser3._hx_class = tink_json_Parser3
_hx_classes["tink.json.Parser3"] = tink_json_Parser3


class tink_json_Parser4(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser4"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        this1 = self.parseNumber()
        ret = Std.parseFloat(HxString.substring(this1.source,this1.min,this1.max))
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser4", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser4._hx_class = tink_json_Parser4
_hx_classes["tink.json.Parser4"] = tink_json_Parser4


class tink_json_Parser5(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser5"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 91):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "["))
        _hx___ret = []
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_8.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_10 = self
                _hx_local_11 = _hx_local_10.pos
                _hx_local_10.pos = (_hx_local_11 + 1)
                _hx_local_11
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                x = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                _hx___ret.append(x)
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp1 = None
                this2 = self.source
                i1 = self.pos
                if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 44):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    while True:
                        tmp2 = None
                        if (self.pos < self.max):
                            this3 = self.source
                            i2 = self.pos
                            tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _hx_local_16 = self
                        _hx_local_17 = _hx_local_16.pos
                        _hx_local_16.pos = (_hx_local_17 + 1)
                        _hx_local_17
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_18 = self
                _hx_local_19 = _hx_local_18.pos
                _hx_local_18.pos = (_hx_local_19 + 1)
                _hx_local_19
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_20 = self
                _hx_local_21 = _hx_local_20.pos
                _hx_local_20.pos = (_hx_local_21 + 1)
                _hx_local_20.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_22 = self
                    _hx_local_23 = _hx_local_22.pos
                    _hx_local_22.pos = (_hx_local_23 + 1)
                    _hx_local_23
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "]"))
        ret = _hx___ret
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser5", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser5._hx_class = tink_json_Parser5
_hx_classes["tink.json.Parser5"] = tink_json_Parser5


class tink_json_Parser6(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser6"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_a = 0
        hasv_a = False
        v_b = 0
        hasv_b = False
        v_g = 0
        hasv_g = False
        v_r = 0
        hasv_r = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 97):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 34):
                        while True:
                            this4 = self.source
                            i3 = self.pos
                            self.pos = (self.pos + 1)
                            _g2 = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                            _hx_tmp1 = None
                            if ((_g2 == 58) == True):
                                break
                            else:
                                _hx_tmp1 = (_g2 < 33)
                                if (_hx_tmp1 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp = None
                            if (self.pos < self.max):
                                this5 = self.source
                                i4 = self.pos
                                tmp = (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) < 33)
                            else:
                                tmp = False
                            if (not tmp):
                                break
                            _hx_local_6 = self
                            _hx_local_7 = _hx_local_6.pos
                            _hx_local_6.pos = (_hx_local_7 + 1)
                            _hx_local_7
                        this6 = self.parseNumber()
                        v_a = Std.parseInt(HxString.substring(this6.source,this6.min,this6.max))
                        hasv_a = True
                        while True:
                            tmp1 = None
                            if (self.pos < self.max):
                                this7 = self.source
                                i5 = self.pos
                                tmp1 = (((-1 if ((i5 >= len(this7))) else ord(this7[i5]))) < 33)
                            else:
                                tmp1 = False
                            if (not tmp1):
                                break
                            _hx_local_8 = self
                            _hx_local_9 = _hx_local_8.pos
                            _hx_local_8.pos = (_hx_local_9 + 1)
                            _hx_local_9
                        tmp2 = None
                        this8 = self.source
                        i6 = self.pos
                        if (((-1 if ((i6 >= len(this8))) else ord(this8[i6]))) == 44):
                            _hx_local_10 = self
                            _hx_local_11 = _hx_local_10.pos
                            _hx_local_10.pos = (_hx_local_11 + 1)
                            _hx_local_10.pos
                            tmp2 = True
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        else:
                            continue
                elif (_g1 == 98):
                    this9 = self.source
                    i7 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i7 >= len(this9))) else ord(this9[i7]))
                    if (cur == 34):
                        while True:
                            this10 = self.source
                            i8 = self.pos
                            self.pos = (self.pos + 1)
                            _g3 = (-1 if ((i8 >= len(this10))) else ord(this10[i8]))
                            _hx_tmp2 = None
                            if ((_g3 == 58) == True):
                                break
                            else:
                                _hx_tmp2 = (_g3 < 33)
                                if (_hx_tmp2 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp3 = None
                            if (self.pos < self.max):
                                this11 = self.source
                                i9 = self.pos
                                tmp3 = (((-1 if ((i9 >= len(this11))) else ord(this11[i9]))) < 33)
                            else:
                                tmp3 = False
                            if (not tmp3):
                                break
                            _hx_local_12 = self
                            _hx_local_13 = _hx_local_12.pos
                            _hx_local_12.pos = (_hx_local_13 + 1)
                            _hx_local_13
                        this12 = self.parseNumber()
                        v_b = Std.parseInt(HxString.substring(this12.source,this12.min,this12.max))
                        hasv_b = True
                        while True:
                            tmp4 = None
                            if (self.pos < self.max):
                                this13 = self.source
                                i10 = self.pos
                                tmp4 = (((-1 if ((i10 >= len(this13))) else ord(this13[i10]))) < 33)
                            else:
                                tmp4 = False
                            if (not tmp4):
                                break
                            _hx_local_14 = self
                            _hx_local_15 = _hx_local_14.pos
                            _hx_local_14.pos = (_hx_local_15 + 1)
                            _hx_local_15
                        tmp5 = None
                        this14 = self.source
                        i11 = self.pos
                        if (((-1 if ((i11 >= len(this14))) else ord(this14[i11]))) == 44):
                            _hx_local_16 = self
                            _hx_local_17 = _hx_local_16.pos
                            _hx_local_16.pos = (_hx_local_17 + 1)
                            _hx_local_16.pos
                            tmp5 = True
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        else:
                            continue
                elif (_g1 == 103):
                    this15 = self.source
                    i12 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i12 >= len(this15))) else ord(this15[i12]))
                    if (cur == 34):
                        while True:
                            this16 = self.source
                            i13 = self.pos
                            self.pos = (self.pos + 1)
                            _g4 = (-1 if ((i13 >= len(this16))) else ord(this16[i13]))
                            _hx_tmp3 = None
                            if ((_g4 == 58) == True):
                                break
                            else:
                                _hx_tmp3 = (_g4 < 33)
                                if (_hx_tmp3 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp6 = None
                            if (self.pos < self.max):
                                this17 = self.source
                                i14 = self.pos
                                tmp6 = (((-1 if ((i14 >= len(this17))) else ord(this17[i14]))) < 33)
                            else:
                                tmp6 = False
                            if (not tmp6):
                                break
                            _hx_local_18 = self
                            _hx_local_19 = _hx_local_18.pos
                            _hx_local_18.pos = (_hx_local_19 + 1)
                            _hx_local_19
                        this18 = self.parseNumber()
                        v_g = Std.parseInt(HxString.substring(this18.source,this18.min,this18.max))
                        hasv_g = True
                        while True:
                            tmp7 = None
                            if (self.pos < self.max):
                                this19 = self.source
                                i15 = self.pos
                                tmp7 = (((-1 if ((i15 >= len(this19))) else ord(this19[i15]))) < 33)
                            else:
                                tmp7 = False
                            if (not tmp7):
                                break
                            _hx_local_20 = self
                            _hx_local_21 = _hx_local_20.pos
                            _hx_local_20.pos = (_hx_local_21 + 1)
                            _hx_local_21
                        tmp8 = None
                        this20 = self.source
                        i16 = self.pos
                        if (((-1 if ((i16 >= len(this20))) else ord(this20[i16]))) == 44):
                            _hx_local_22 = self
                            _hx_local_23 = _hx_local_22.pos
                            _hx_local_22.pos = (_hx_local_23 + 1)
                            _hx_local_22.pos
                            tmp8 = True
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        else:
                            continue
                elif (_g1 == 114):
                    this21 = self.source
                    i17 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i17 >= len(this21))) else ord(this21[i17]))
                    if (cur == 34):
                        while True:
                            this22 = self.source
                            i18 = self.pos
                            self.pos = (self.pos + 1)
                            _g5 = (-1 if ((i18 >= len(this22))) else ord(this22[i18]))
                            _hx_tmp4 = None
                            if ((_g5 == 58) == True):
                                break
                            else:
                                _hx_tmp4 = (_g5 < 33)
                                if (_hx_tmp4 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp9 = None
                            if (self.pos < self.max):
                                this23 = self.source
                                i19 = self.pos
                                tmp9 = (((-1 if ((i19 >= len(this23))) else ord(this23[i19]))) < 33)
                            else:
                                tmp9 = False
                            if (not tmp9):
                                break
                            _hx_local_24 = self
                            _hx_local_25 = _hx_local_24.pos
                            _hx_local_24.pos = (_hx_local_25 + 1)
                            _hx_local_25
                        this24 = self.parseNumber()
                        v_r = Std.parseInt(HxString.substring(this24.source,this24.min,this24.max))
                        hasv_r = True
                        while True:
                            tmp10 = None
                            if (self.pos < self.max):
                                this25 = self.source
                                i20 = self.pos
                                tmp10 = (((-1 if ((i20 >= len(this25))) else ord(this25[i20]))) < 33)
                            else:
                                tmp10 = False
                            if (not tmp10):
                                break
                            _hx_local_26 = self
                            _hx_local_27 = _hx_local_26.pos
                            _hx_local_26.pos = (_hx_local_27 + 1)
                            _hx_local_27
                        tmp11 = None
                        this26 = self.source
                        i21 = self.pos
                        if (((-1 if ((i21 >= len(this26))) else ord(this26[i21]))) == 44):
                            _hx_local_28 = self
                            _hx_local_29 = _hx_local_28.pos
                            _hx_local_28.pos = (_hx_local_29 + 1)
                            _hx_local_28.pos
                            tmp11 = True
                        else:
                            tmp11 = False
                        if (not tmp11):
                            break
                        else:
                            continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this27 = self.source
                    i22 = self.pos
                    self.pos = (self.pos + 1)
                    _g6 = (-1 if ((i22 >= len(this27))) else ord(this27[i22]))
                    _hx_tmp5 = None
                    if ((_g6 == 58) == True):
                        break
                    else:
                        _hx_tmp5 = (_g6 < 33)
                        if (_hx_tmp5 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp12 = None
                    if (self.pos < self.max):
                        this28 = self.source
                        i23 = self.pos
                        tmp12 = (((-1 if ((i23 >= len(this28))) else ord(this28[i23]))) < 33)
                    else:
                        tmp12 = False
                    if (not tmp12):
                        break
                    _hx_local_30 = self
                    _hx_local_31 = _hx_local_30.pos
                    _hx_local_30.pos = (_hx_local_31 + 1)
                    _hx_local_31
                self.skipValue()
                while True:
                    tmp13 = None
                    if (self.pos < self.max):
                        this29 = self.source
                        i24 = self.pos
                        tmp13 = (((-1 if ((i24 >= len(this29))) else ord(this29[i24]))) < 33)
                    else:
                        tmp13 = False
                    if (not tmp13):
                        break
                    _hx_local_32 = self
                    _hx_local_33 = _hx_local_32.pos
                    _hx_local_32.pos = (_hx_local_33 + 1)
                    _hx_local_33
                tmp14 = None
                this30 = self.source
                i25 = self.pos
                if (((-1 if ((i25 >= len(this30))) else ord(this30[i25]))) == 44):
                    _hx_local_34 = self
                    _hx_local_35 = _hx_local_34.pos
                    _hx_local_34.pos = (_hx_local_35 + 1)
                    _hx_local_34.pos
                    tmp14 = True
                else:
                    tmp14 = False
                if (not tmp14):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_36 = self
                _hx_local_37 = _hx_local_36.pos
                _hx_local_36.pos = (_hx_local_37 + 1)
                _hx_local_37
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_38 = self
                _hx_local_39 = _hx_local_38.pos
                _hx_local_38.pos = (_hx_local_39 + 1)
                _hx_local_38.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_40 = self
                    _hx_local_41 = _hx_local_40.pos
                    _hx_local_40.pos = (_hx_local_41 + 1)
                    _hx_local_41
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_42(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_42
        return _hx_AnonObject({'a': (v_a if hasv_a else __missing__("a")), 'b': (v_b if hasv_b else __missing__("b")), 'g': (v_g if hasv_g else __missing__("g")), 'r': (v_r if hasv_r else __missing__("r"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        ret = self.process0()
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser6", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser6._hx_class = tink_json_Parser6
_hx_classes["tink.json.Parser6"] = tink_json_Parser6


class tink_json_Parser7(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser7"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_x = .0
        hasv_x = False
        v_y = .0
        hasv_y = False
        v_z = .0
        hasv_z = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 120):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 34):
                        while True:
                            this4 = self.source
                            i3 = self.pos
                            self.pos = (self.pos + 1)
                            _g2 = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                            _hx_tmp1 = None
                            if ((_g2 == 58) == True):
                                break
                            else:
                                _hx_tmp1 = (_g2 < 33)
                                if (_hx_tmp1 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp = None
                            if (self.pos < self.max):
                                this5 = self.source
                                i4 = self.pos
                                tmp = (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) < 33)
                            else:
                                tmp = False
                            if (not tmp):
                                break
                            _hx_local_6 = self
                            _hx_local_7 = _hx_local_6.pos
                            _hx_local_6.pos = (_hx_local_7 + 1)
                            _hx_local_7
                        this6 = self.parseNumber()
                        v_x = Std.parseFloat(HxString.substring(this6.source,this6.min,this6.max))
                        hasv_x = True
                        while True:
                            tmp1 = None
                            if (self.pos < self.max):
                                this7 = self.source
                                i5 = self.pos
                                tmp1 = (((-1 if ((i5 >= len(this7))) else ord(this7[i5]))) < 33)
                            else:
                                tmp1 = False
                            if (not tmp1):
                                break
                            _hx_local_8 = self
                            _hx_local_9 = _hx_local_8.pos
                            _hx_local_8.pos = (_hx_local_9 + 1)
                            _hx_local_9
                        tmp2 = None
                        this8 = self.source
                        i6 = self.pos
                        if (((-1 if ((i6 >= len(this8))) else ord(this8[i6]))) == 44):
                            _hx_local_10 = self
                            _hx_local_11 = _hx_local_10.pos
                            _hx_local_10.pos = (_hx_local_11 + 1)
                            _hx_local_10.pos
                            tmp2 = True
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        else:
                            continue
                elif (_g1 == 121):
                    this9 = self.source
                    i7 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i7 >= len(this9))) else ord(this9[i7]))
                    if (cur == 34):
                        while True:
                            this10 = self.source
                            i8 = self.pos
                            self.pos = (self.pos + 1)
                            _g3 = (-1 if ((i8 >= len(this10))) else ord(this10[i8]))
                            _hx_tmp2 = None
                            if ((_g3 == 58) == True):
                                break
                            else:
                                _hx_tmp2 = (_g3 < 33)
                                if (_hx_tmp2 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp3 = None
                            if (self.pos < self.max):
                                this11 = self.source
                                i9 = self.pos
                                tmp3 = (((-1 if ((i9 >= len(this11))) else ord(this11[i9]))) < 33)
                            else:
                                tmp3 = False
                            if (not tmp3):
                                break
                            _hx_local_12 = self
                            _hx_local_13 = _hx_local_12.pos
                            _hx_local_12.pos = (_hx_local_13 + 1)
                            _hx_local_13
                        this12 = self.parseNumber()
                        v_y = Std.parseFloat(HxString.substring(this12.source,this12.min,this12.max))
                        hasv_y = True
                        while True:
                            tmp4 = None
                            if (self.pos < self.max):
                                this13 = self.source
                                i10 = self.pos
                                tmp4 = (((-1 if ((i10 >= len(this13))) else ord(this13[i10]))) < 33)
                            else:
                                tmp4 = False
                            if (not tmp4):
                                break
                            _hx_local_14 = self
                            _hx_local_15 = _hx_local_14.pos
                            _hx_local_14.pos = (_hx_local_15 + 1)
                            _hx_local_15
                        tmp5 = None
                        this14 = self.source
                        i11 = self.pos
                        if (((-1 if ((i11 >= len(this14))) else ord(this14[i11]))) == 44):
                            _hx_local_16 = self
                            _hx_local_17 = _hx_local_16.pos
                            _hx_local_16.pos = (_hx_local_17 + 1)
                            _hx_local_16.pos
                            tmp5 = True
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        else:
                            continue
                elif (_g1 == 122):
                    this15 = self.source
                    i12 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i12 >= len(this15))) else ord(this15[i12]))
                    if (cur == 34):
                        while True:
                            this16 = self.source
                            i13 = self.pos
                            self.pos = (self.pos + 1)
                            _g4 = (-1 if ((i13 >= len(this16))) else ord(this16[i13]))
                            _hx_tmp3 = None
                            if ((_g4 == 58) == True):
                                break
                            else:
                                _hx_tmp3 = (_g4 < 33)
                                if (_hx_tmp3 != True):
                                    self.die(("expected " + ":"))
                        while True:
                            tmp6 = None
                            if (self.pos < self.max):
                                this17 = self.source
                                i14 = self.pos
                                tmp6 = (((-1 if ((i14 >= len(this17))) else ord(this17[i14]))) < 33)
                            else:
                                tmp6 = False
                            if (not tmp6):
                                break
                            _hx_local_18 = self
                            _hx_local_19 = _hx_local_18.pos
                            _hx_local_18.pos = (_hx_local_19 + 1)
                            _hx_local_19
                        this18 = self.parseNumber()
                        v_z = Std.parseFloat(HxString.substring(this18.source,this18.min,this18.max))
                        hasv_z = True
                        while True:
                            tmp7 = None
                            if (self.pos < self.max):
                                this19 = self.source
                                i15 = self.pos
                                tmp7 = (((-1 if ((i15 >= len(this19))) else ord(this19[i15]))) < 33)
                            else:
                                tmp7 = False
                            if (not tmp7):
                                break
                            _hx_local_20 = self
                            _hx_local_21 = _hx_local_20.pos
                            _hx_local_20.pos = (_hx_local_21 + 1)
                            _hx_local_21
                        tmp8 = None
                        this20 = self.source
                        i16 = self.pos
                        if (((-1 if ((i16 >= len(this20))) else ord(this20[i16]))) == 44):
                            _hx_local_22 = self
                            _hx_local_23 = _hx_local_22.pos
                            _hx_local_22.pos = (_hx_local_23 + 1)
                            _hx_local_22.pos
                            tmp8 = True
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        else:
                            continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this21 = self.source
                    i17 = self.pos
                    self.pos = (self.pos + 1)
                    _g5 = (-1 if ((i17 >= len(this21))) else ord(this21[i17]))
                    _hx_tmp4 = None
                    if ((_g5 == 58) == True):
                        break
                    else:
                        _hx_tmp4 = (_g5 < 33)
                        if (_hx_tmp4 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp9 = None
                    if (self.pos < self.max):
                        this22 = self.source
                        i18 = self.pos
                        tmp9 = (((-1 if ((i18 >= len(this22))) else ord(this22[i18]))) < 33)
                    else:
                        tmp9 = False
                    if (not tmp9):
                        break
                    _hx_local_24 = self
                    _hx_local_25 = _hx_local_24.pos
                    _hx_local_24.pos = (_hx_local_25 + 1)
                    _hx_local_25
                self.skipValue()
                while True:
                    tmp10 = None
                    if (self.pos < self.max):
                        this23 = self.source
                        i19 = self.pos
                        tmp10 = (((-1 if ((i19 >= len(this23))) else ord(this23[i19]))) < 33)
                    else:
                        tmp10 = False
                    if (not tmp10):
                        break
                    _hx_local_26 = self
                    _hx_local_27 = _hx_local_26.pos
                    _hx_local_26.pos = (_hx_local_27 + 1)
                    _hx_local_27
                tmp11 = None
                this24 = self.source
                i20 = self.pos
                if (((-1 if ((i20 >= len(this24))) else ord(this24[i20]))) == 44):
                    _hx_local_28 = self
                    _hx_local_29 = _hx_local_28.pos
                    _hx_local_28.pos = (_hx_local_29 + 1)
                    _hx_local_28.pos
                    tmp11 = True
                else:
                    tmp11 = False
                if (not tmp11):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_30 = self
                _hx_local_31 = _hx_local_30.pos
                _hx_local_30.pos = (_hx_local_31 + 1)
                _hx_local_31
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_32 = self
                _hx_local_33 = _hx_local_32.pos
                _hx_local_32.pos = (_hx_local_33 + 1)
                _hx_local_32.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_34 = self
                    _hx_local_35 = _hx_local_34.pos
                    _hx_local_34.pos = (_hx_local_35 + 1)
                    _hx_local_35
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_36(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_36
        return _hx_AnonObject({'x': (v_x if hasv_x else __missing__("x")), 'y': (v_y if hasv_y else __missing__("y")), 'z': (v_z if hasv_z else __missing__("z"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 91):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "["))
        _hx___ret = haxe_ds_StringMap()
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_8.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_10 = self
                _hx_local_11 = _hx_local_10.pos
                _hx_local_10.pos = (_hx_local_11 + 1)
                _hx_local_11
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp1 = None
                this2 = self.source
                i1 = self.pos
                if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 91):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    while True:
                        tmp2 = None
                        if (self.pos < self.max):
                            this3 = self.source
                            i2 = self.pos
                            tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _hx_local_16 = self
                        _hx_local_17 = _hx_local_16.pos
                        _hx_local_16.pos = (_hx_local_17 + 1)
                        _hx_local_17
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    self.die(("Expected " + "["))
                _e0 = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                while True:
                    e = None
                    if (self.pos < self.max):
                        this4 = self.source
                        i3 = self.pos
                        e = (((-1 if ((i3 >= len(this4))) else ord(this4[i3]))) < 33)
                    else:
                        e = False
                    if (not e):
                        break
                    _hx_local_18 = self
                    _hx_local_19 = _hx_local_18.pos
                    _hx_local_18.pos = (_hx_local_19 + 1)
                    _hx_local_19
                e1 = None
                this5 = self.source
                i4 = self.pos
                if (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) == 44):
                    _hx_local_20 = self
                    _hx_local_21 = _hx_local_20.pos
                    _hx_local_20.pos = (_hx_local_21 + 1)
                    _hx_local_20.pos
                    while True:
                        e2 = None
                        if (self.pos < self.max):
                            this6 = self.source
                            i5 = self.pos
                            e2 = (((-1 if ((i5 >= len(this6))) else ord(this6[i5]))) < 33)
                        else:
                            e2 = False
                        if (not e2):
                            break
                        _hx_local_22 = self
                        _hx_local_23 = _hx_local_22.pos
                        _hx_local_22.pos = (_hx_local_23 + 1)
                        _hx_local_23
                    e1 = True
                else:
                    e1 = False
                e3 = (self.die(("Expected " + ",")) if ((not e1)) else None)
                _e1 = self.process0()
                _hx___ret.h[_e0] = _e1
                while True:
                    tmp3 = None
                    if (self.pos < self.max):
                        this7 = self.source
                        i6 = self.pos
                        tmp3 = (((-1 if ((i6 >= len(this7))) else ord(this7[i6]))) < 33)
                    else:
                        tmp3 = False
                    if (not tmp3):
                        break
                    _hx_local_24 = self
                    _hx_local_25 = _hx_local_24.pos
                    _hx_local_24.pos = (_hx_local_25 + 1)
                    _hx_local_25
                tmp4 = None
                this8 = self.source
                i7 = self.pos
                if (((-1 if ((i7 >= len(this8))) else ord(this8[i7]))) == 93):
                    _hx_local_26 = self
                    _hx_local_27 = _hx_local_26.pos
                    _hx_local_26.pos = (_hx_local_27 + 1)
                    _hx_local_26.pos
                    while True:
                        tmp5 = None
                        if (self.pos < self.max):
                            this9 = self.source
                            i8 = self.pos
                            tmp5 = (((-1 if ((i8 >= len(this9))) else ord(this9[i8]))) < 33)
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        _hx_local_28 = self
                        _hx_local_29 = _hx_local_28.pos
                        _hx_local_28.pos = (_hx_local_29 + 1)
                        _hx_local_29
                    tmp4 = True
                else:
                    tmp4 = False
                if (not tmp4):
                    self.die(("Expected " + "]"))
                while True:
                    tmp6 = None
                    if (self.pos < self.max):
                        this10 = self.source
                        i9 = self.pos
                        tmp6 = (((-1 if ((i9 >= len(this10))) else ord(this10[i9]))) < 33)
                    else:
                        tmp6 = False
                    if (not tmp6):
                        break
                    _hx_local_30 = self
                    _hx_local_31 = _hx_local_30.pos
                    _hx_local_30.pos = (_hx_local_31 + 1)
                    _hx_local_31
                tmp7 = None
                this11 = self.source
                i10 = self.pos
                if (((-1 if ((i10 >= len(this11))) else ord(this11[i10]))) == 44):
                    _hx_local_32 = self
                    _hx_local_33 = _hx_local_32.pos
                    _hx_local_32.pos = (_hx_local_33 + 1)
                    _hx_local_32.pos
                    while True:
                        tmp8 = None
                        if (self.pos < self.max):
                            this12 = self.source
                            i11 = self.pos
                            tmp8 = (((-1 if ((i11 >= len(this12))) else ord(this12[i11]))) < 33)
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        _hx_local_34 = self
                        _hx_local_35 = _hx_local_34.pos
                        _hx_local_34.pos = (_hx_local_35 + 1)
                        _hx_local_35
                    tmp7 = True
                else:
                    tmp7 = False
                if (not tmp7):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_36 = self
                _hx_local_37 = _hx_local_36.pos
                _hx_local_36.pos = (_hx_local_37 + 1)
                _hx_local_37
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_38 = self
                _hx_local_39 = _hx_local_38.pos
                _hx_local_38.pos = (_hx_local_39 + 1)
                _hx_local_38.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_40 = self
                    _hx_local_41 = _hx_local_40.pos
                    _hx_local_40.pos = (_hx_local_41 + 1)
                    _hx_local_41
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "]"))
        ret = _hx___ret
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser7", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser7._hx_class = tink_json_Parser7
_hx_classes["tink.json.Parser7"] = tink_json_Parser7


class tink_json_Parser8(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser8"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 91):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            self.die(("Expected " + "["))
        _hx___ret = haxe_ds_StringMap()
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_8.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_10 = self
                _hx_local_11 = _hx_local_10.pos
                _hx_local_10.pos = (_hx_local_11 + 1)
                _hx_local_11
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    tmp = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _hx_local_12 = self
                    _hx_local_13 = _hx_local_12.pos
                    _hx_local_12.pos = (_hx_local_13 + 1)
                    _hx_local_13
                tmp1 = None
                this2 = self.source
                i1 = self.pos
                if (((-1 if ((i1 >= len(this2))) else ord(this2[i1]))) == 91):
                    _hx_local_14 = self
                    _hx_local_15 = _hx_local_14.pos
                    _hx_local_14.pos = (_hx_local_15 + 1)
                    _hx_local_14.pos
                    while True:
                        tmp2 = None
                        if (self.pos < self.max):
                            this3 = self.source
                            i2 = self.pos
                            tmp2 = (((-1 if ((i2 >= len(this3))) else ord(this3[i2]))) < 33)
                        else:
                            tmp2 = False
                        if (not tmp2):
                            break
                        _hx_local_16 = self
                        _hx_local_17 = _hx_local_16.pos
                        _hx_local_16.pos = (_hx_local_17 + 1)
                        _hx_local_17
                    tmp1 = True
                else:
                    tmp1 = False
                if (not tmp1):
                    self.die(("Expected " + "["))
                _e0 = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                while True:
                    e = None
                    if (self.pos < self.max):
                        this4 = self.source
                        i3 = self.pos
                        e = (((-1 if ((i3 >= len(this4))) else ord(this4[i3]))) < 33)
                    else:
                        e = False
                    if (not e):
                        break
                    _hx_local_18 = self
                    _hx_local_19 = _hx_local_18.pos
                    _hx_local_18.pos = (_hx_local_19 + 1)
                    _hx_local_19
                e1 = None
                this5 = self.source
                i4 = self.pos
                if (((-1 if ((i4 >= len(this5))) else ord(this5[i4]))) == 44):
                    _hx_local_20 = self
                    _hx_local_21 = _hx_local_20.pos
                    _hx_local_20.pos = (_hx_local_21 + 1)
                    _hx_local_20.pos
                    while True:
                        e2 = None
                        if (self.pos < self.max):
                            this6 = self.source
                            i5 = self.pos
                            e2 = (((-1 if ((i5 >= len(this6))) else ord(this6[i5]))) < 33)
                        else:
                            e2 = False
                        if (not e2):
                            break
                        _hx_local_22 = self
                        _hx_local_23 = _hx_local_22.pos
                        _hx_local_22.pos = (_hx_local_23 + 1)
                        _hx_local_23
                    e1 = True
                else:
                    e1 = False
                e3 = (self.die(("Expected " + ",")) if ((not e1)) else None)
                this7 = self.parseNumber()
                _e1 = Std.parseInt(HxString.substring(this7.source,this7.min,this7.max))
                _hx___ret.h[_e0] = _e1
                while True:
                    tmp3 = None
                    if (self.pos < self.max):
                        this8 = self.source
                        i6 = self.pos
                        tmp3 = (((-1 if ((i6 >= len(this8))) else ord(this8[i6]))) < 33)
                    else:
                        tmp3 = False
                    if (not tmp3):
                        break
                    _hx_local_24 = self
                    _hx_local_25 = _hx_local_24.pos
                    _hx_local_24.pos = (_hx_local_25 + 1)
                    _hx_local_25
                tmp4 = None
                this9 = self.source
                i7 = self.pos
                if (((-1 if ((i7 >= len(this9))) else ord(this9[i7]))) == 93):
                    _hx_local_26 = self
                    _hx_local_27 = _hx_local_26.pos
                    _hx_local_26.pos = (_hx_local_27 + 1)
                    _hx_local_26.pos
                    while True:
                        tmp5 = None
                        if (self.pos < self.max):
                            this10 = self.source
                            i8 = self.pos
                            tmp5 = (((-1 if ((i8 >= len(this10))) else ord(this10[i8]))) < 33)
                        else:
                            tmp5 = False
                        if (not tmp5):
                            break
                        _hx_local_28 = self
                        _hx_local_29 = _hx_local_28.pos
                        _hx_local_28.pos = (_hx_local_29 + 1)
                        _hx_local_29
                    tmp4 = True
                else:
                    tmp4 = False
                if (not tmp4):
                    self.die(("Expected " + "]"))
                while True:
                    tmp6 = None
                    if (self.pos < self.max):
                        this11 = self.source
                        i9 = self.pos
                        tmp6 = (((-1 if ((i9 >= len(this11))) else ord(this11[i9]))) < 33)
                    else:
                        tmp6 = False
                    if (not tmp6):
                        break
                    _hx_local_30 = self
                    _hx_local_31 = _hx_local_30.pos
                    _hx_local_30.pos = (_hx_local_31 + 1)
                    _hx_local_31
                tmp7 = None
                this12 = self.source
                i10 = self.pos
                if (((-1 if ((i10 >= len(this12))) else ord(this12[i10]))) == 44):
                    _hx_local_32 = self
                    _hx_local_33 = _hx_local_32.pos
                    _hx_local_32.pos = (_hx_local_33 + 1)
                    _hx_local_32.pos
                    while True:
                        tmp8 = None
                        if (self.pos < self.max):
                            this13 = self.source
                            i11 = self.pos
                            tmp8 = (((-1 if ((i11 >= len(this13))) else ord(this13[i11]))) < 33)
                        else:
                            tmp8 = False
                        if (not tmp8):
                            break
                        _hx_local_34 = self
                        _hx_local_35 = _hx_local_34.pos
                        _hx_local_34.pos = (_hx_local_35 + 1)
                        _hx_local_35
                    tmp7 = True
                else:
                    tmp7 = False
                if (not tmp7):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_36 = self
                _hx_local_37 = _hx_local_36.pos
                _hx_local_36.pos = (_hx_local_37 + 1)
                _hx_local_37
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 93):
                _hx_local_38 = self
                _hx_local_39 = _hx_local_38.pos
                _hx_local_38.pos = (_hx_local_39 + 1)
                _hx_local_38.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_40 = self
                    _hx_local_41 = _hx_local_40.pos
                    _hx_local_40.pos = (_hx_local_41 + 1)
                    _hx_local_41
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "]"))
        ret = _hx___ret
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser8", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser8._hx_class = tink_json_Parser8
_hx_classes["tink.json.Parser8"] = tink_json_Parser8


class tink_json_Parser9(tink_json_BasicParser):
    _hx_class_name = "tink.json.Parser9"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "parse", "tryParse"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicParser


    def __init__(self):
        super().__init__()

    def process0(self):
        _gthis = self
        cur = 0
        v_imageFiles = None
        hasv_imageFiles = False
        v_imageScales = None
        hasv_imageScales = False
        v_pinnedImageIndex = 0
        hasv_pinnedImageIndex = False
        __start__ = self.pos
        while True:
            this1 = self.source
            i = self.pos
            self.pos = (self.pos + 1)
            _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
            _hx_tmp = None
            if ((_g == 123) == True):
                break
            else:
                _hx_tmp = (_g < 33)
                if (_hx_tmp != True):
                    self.die(("expected " + "{"))
        while True:
            tmp = None
            if (self.pos < self.max):
                this1 = self.source
                i = self.pos
                tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
            else:
                tmp = False
            if (not tmp):
                break
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
        tmp = None
        this1 = self.source
        i = self.pos
        if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_2.pos
            while True:
                tmp1 = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp1 = False
                if (not tmp1):
                    break
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.pos
                _hx_local_4.pos = (_hx_local_5 + 1)
                _hx_local_5
            tmp = True
        else:
            tmp = False
        if (not tmp):
            while True:
                while True:
                    this1 = self.source
                    i = self.pos
                    self.pos = (self.pos + 1)
                    _g = (-1 if ((i >= len(this1))) else ord(this1[i]))
                    _hx_tmp = None
                    if ((_g == 34) == True):
                        break
                    else:
                        _hx_tmp = (_g < 33)
                        if (_hx_tmp != True):
                            self.die(("expected " + "\""))
                this2 = self.source
                i1 = self.pos
                self.pos = (self.pos + 1)
                cur = (-1 if ((i1 >= len(this2))) else ord(this2[i1]))
                _g1 = cur
                if (_g1 == 105):
                    this3 = self.source
                    i2 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i2 >= len(this3))) else ord(this3[i2]))
                    if (cur == 109):
                        this4 = self.source
                        i3 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i3 >= len(this4))) else ord(this4[i3]))
                        if (cur == 97):
                            this5 = self.source
                            i4 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i4 >= len(this5))) else ord(this5[i4]))
                            if (cur == 103):
                                this6 = self.source
                                i5 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i5 >= len(this6))) else ord(this6[i5]))
                                if (cur == 101):
                                    this7 = self.source
                                    i6 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i6 >= len(this7))) else ord(this7[i6]))
                                    _g2 = cur
                                    if (_g2 == 70):
                                        this8 = self.source
                                        i7 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i7 >= len(this8))) else ord(this8[i7]))
                                        if (cur == 105):
                                            this9 = self.source
                                            i8 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i8 >= len(this9))) else ord(this9[i8]))
                                            if (cur == 108):
                                                this10 = self.source
                                                i9 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i9 >= len(this10))) else ord(this10[i9]))
                                                if (cur == 101):
                                                    this11 = self.source
                                                    i10 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i10 >= len(this11))) else ord(this11[i10]))
                                                    if (cur == 115):
                                                        this12 = self.source
                                                        i11 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i11 >= len(this12))) else ord(this12[i11]))
                                                        if (cur == 34):
                                                            while True:
                                                                this13 = self.source
                                                                i12 = self.pos
                                                                self.pos = (self.pos + 1)
                                                                _g3 = (-1 if ((i12 >= len(this13))) else ord(this13[i12]))
                                                                _hx_tmp1 = None
                                                                if ((_g3 == 58) == True):
                                                                    break
                                                                else:
                                                                    _hx_tmp1 = (_g3 < 33)
                                                                    if (_hx_tmp1 != True):
                                                                        self.die(("expected " + ":"))
                                                            while True:
                                                                tmp = None
                                                                if (self.pos < self.max):
                                                                    this14 = self.source
                                                                    i13 = self.pos
                                                                    tmp = (((-1 if ((i13 >= len(this14))) else ord(this14[i13]))) < 33)
                                                                else:
                                                                    tmp = False
                                                                if (not tmp):
                                                                    break
                                                                _hx_local_6 = self
                                                                _hx_local_7 = _hx_local_6.pos
                                                                _hx_local_6.pos = (_hx_local_7 + 1)
                                                                _hx_local_7
                                                            while True:
                                                                v_imageFiles1 = None
                                                                if (self.pos < self.max):
                                                                    this15 = self.source
                                                                    i14 = self.pos
                                                                    v_imageFiles1 = (((-1 if ((i14 >= len(this15))) else ord(this15[i14]))) < 33)
                                                                else:
                                                                    v_imageFiles1 = False
                                                                if (not v_imageFiles1):
                                                                    break
                                                                _hx_local_8 = self
                                                                _hx_local_9 = _hx_local_8.pos
                                                                _hx_local_8.pos = (_hx_local_9 + 1)
                                                                _hx_local_9
                                                            v_imageFiles2 = None
                                                            this16 = self.source
                                                            i15 = self.pos
                                                            if (((-1 if ((i15 >= len(this16))) else ord(this16[i15]))) == 91):
                                                                _hx_local_10 = self
                                                                _hx_local_11 = _hx_local_10.pos
                                                                _hx_local_10.pos = (_hx_local_11 + 1)
                                                                _hx_local_10.pos
                                                                while True:
                                                                    v_imageFiles3 = None
                                                                    if (self.pos < self.max):
                                                                        this17 = self.source
                                                                        i16 = self.pos
                                                                        v_imageFiles3 = (((-1 if ((i16 >= len(this17))) else ord(this17[i16]))) < 33)
                                                                    else:
                                                                        v_imageFiles3 = False
                                                                    if (not v_imageFiles3):
                                                                        break
                                                                    _hx_local_12 = self
                                                                    _hx_local_13 = _hx_local_12.pos
                                                                    _hx_local_12.pos = (_hx_local_13 + 1)
                                                                    _hx_local_13
                                                                v_imageFiles2 = True
                                                            else:
                                                                v_imageFiles2 = False
                                                            if (not v_imageFiles2):
                                                                self.die(("Expected " + "["))
                                                            _hx___ret = []
                                                            while True:
                                                                v_imageFiles4 = None
                                                                if (self.pos < self.max):
                                                                    this18 = self.source
                                                                    i17 = self.pos
                                                                    v_imageFiles4 = (((-1 if ((i17 >= len(this18))) else ord(this18[i17]))) < 33)
                                                                else:
                                                                    v_imageFiles4 = False
                                                                if (not v_imageFiles4):
                                                                    break
                                                                _hx_local_14 = self
                                                                _hx_local_15 = _hx_local_14.pos
                                                                _hx_local_14.pos = (_hx_local_15 + 1)
                                                                _hx_local_15
                                                            v_imageFiles5 = None
                                                            this19 = self.source
                                                            i18 = self.pos
                                                            if (((-1 if ((i18 >= len(this19))) else ord(this19[i18]))) == 93):
                                                                _hx_local_16 = self
                                                                _hx_local_17 = _hx_local_16.pos
                                                                _hx_local_16.pos = (_hx_local_17 + 1)
                                                                _hx_local_16.pos
                                                                while True:
                                                                    v_imageFiles6 = None
                                                                    if (self.pos < self.max):
                                                                        this20 = self.source
                                                                        i19 = self.pos
                                                                        v_imageFiles6 = (((-1 if ((i19 >= len(this20))) else ord(this20[i19]))) < 33)
                                                                    else:
                                                                        v_imageFiles6 = False
                                                                    if (not v_imageFiles6):
                                                                        break
                                                                    _hx_local_18 = self
                                                                    _hx_local_19 = _hx_local_18.pos
                                                                    _hx_local_18.pos = (_hx_local_19 + 1)
                                                                    _hx_local_19
                                                                v_imageFiles5 = True
                                                            else:
                                                                v_imageFiles5 = False
                                                            if (not v_imageFiles5):
                                                                while True:
                                                                    x = tink_json__Parser_JsonString_Impl_.toString(self.parseString())
                                                                    _hx___ret.append(x)
                                                                    while True:
                                                                        v_imageFiles7 = None
                                                                        if (self.pos < self.max):
                                                                            this21 = self.source
                                                                            i20 = self.pos
                                                                            v_imageFiles7 = (((-1 if ((i20 >= len(this21))) else ord(this21[i20]))) < 33)
                                                                        else:
                                                                            v_imageFiles7 = False
                                                                        if (not v_imageFiles7):
                                                                            break
                                                                        _hx_local_20 = self
                                                                        _hx_local_21 = _hx_local_20.pos
                                                                        _hx_local_20.pos = (_hx_local_21 + 1)
                                                                        _hx_local_21
                                                                    v_imageFiles8 = None
                                                                    this22 = self.source
                                                                    i21 = self.pos
                                                                    if (((-1 if ((i21 >= len(this22))) else ord(this22[i21]))) == 44):
                                                                        _hx_local_22 = self
                                                                        _hx_local_23 = _hx_local_22.pos
                                                                        _hx_local_22.pos = (_hx_local_23 + 1)
                                                                        _hx_local_22.pos
                                                                        while True:
                                                                            v_imageFiles9 = None
                                                                            if (self.pos < self.max):
                                                                                this23 = self.source
                                                                                i22 = self.pos
                                                                                v_imageFiles9 = (((-1 if ((i22 >= len(this23))) else ord(this23[i22]))) < 33)
                                                                            else:
                                                                                v_imageFiles9 = False
                                                                            if (not v_imageFiles9):
                                                                                break
                                                                            _hx_local_24 = self
                                                                            _hx_local_25 = _hx_local_24.pos
                                                                            _hx_local_24.pos = (_hx_local_25 + 1)
                                                                            _hx_local_25
                                                                        v_imageFiles8 = True
                                                                    else:
                                                                        v_imageFiles8 = False
                                                                    if (not v_imageFiles8):
                                                                        break
                                                                while True:
                                                                    v_imageFiles10 = None
                                                                    if (self.pos < self.max):
                                                                        this24 = self.source
                                                                        i23 = self.pos
                                                                        v_imageFiles10 = (((-1 if ((i23 >= len(this24))) else ord(this24[i23]))) < 33)
                                                                    else:
                                                                        v_imageFiles10 = False
                                                                    if (not v_imageFiles10):
                                                                        break
                                                                    _hx_local_26 = self
                                                                    _hx_local_27 = _hx_local_26.pos
                                                                    _hx_local_26.pos = (_hx_local_27 + 1)
                                                                    _hx_local_27
                                                                v_imageFiles11 = None
                                                                this25 = self.source
                                                                i24 = self.pos
                                                                if (((-1 if ((i24 >= len(this25))) else ord(this25[i24]))) == 93):
                                                                    _hx_local_28 = self
                                                                    _hx_local_29 = _hx_local_28.pos
                                                                    _hx_local_28.pos = (_hx_local_29 + 1)
                                                                    _hx_local_28.pos
                                                                    while True:
                                                                        v_imageFiles12 = None
                                                                        if (self.pos < self.max):
                                                                            this26 = self.source
                                                                            i25 = self.pos
                                                                            v_imageFiles12 = (((-1 if ((i25 >= len(this26))) else ord(this26[i25]))) < 33)
                                                                        else:
                                                                            v_imageFiles12 = False
                                                                        if (not v_imageFiles12):
                                                                            break
                                                                        _hx_local_30 = self
                                                                        _hx_local_31 = _hx_local_30.pos
                                                                        _hx_local_30.pos = (_hx_local_31 + 1)
                                                                        _hx_local_31
                                                                    v_imageFiles11 = True
                                                                else:
                                                                    v_imageFiles11 = False
                                                                if (not v_imageFiles11):
                                                                    self.die(("Expected " + "]"))
                                                            v_imageFiles = _hx___ret
                                                            hasv_imageFiles = True
                                                            while True:
                                                                tmp1 = None
                                                                if (self.pos < self.max):
                                                                    this27 = self.source
                                                                    i26 = self.pos
                                                                    tmp1 = (((-1 if ((i26 >= len(this27))) else ord(this27[i26]))) < 33)
                                                                else:
                                                                    tmp1 = False
                                                                if (not tmp1):
                                                                    break
                                                                _hx_local_32 = self
                                                                _hx_local_33 = _hx_local_32.pos
                                                                _hx_local_32.pos = (_hx_local_33 + 1)
                                                                _hx_local_33
                                                            tmp2 = None
                                                            this28 = self.source
                                                            i27 = self.pos
                                                            if (((-1 if ((i27 >= len(this28))) else ord(this28[i27]))) == 44):
                                                                _hx_local_34 = self
                                                                _hx_local_35 = _hx_local_34.pos
                                                                _hx_local_34.pos = (_hx_local_35 + 1)
                                                                _hx_local_34.pos
                                                                tmp2 = True
                                                            else:
                                                                tmp2 = False
                                                            if (not tmp2):
                                                                break
                                                            else:
                                                                continue
                                    elif (_g2 == 83):
                                        this29 = self.source
                                        i28 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i28 >= len(this29))) else ord(this29[i28]))
                                        if (cur == 99):
                                            this30 = self.source
                                            i29 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i29 >= len(this30))) else ord(this30[i29]))
                                            if (cur == 97):
                                                this31 = self.source
                                                i30 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i30 >= len(this31))) else ord(this31[i30]))
                                                if (cur == 108):
                                                    this32 = self.source
                                                    i31 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i31 >= len(this32))) else ord(this32[i31]))
                                                    if (cur == 101):
                                                        this33 = self.source
                                                        i32 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i32 >= len(this33))) else ord(this33[i32]))
                                                        if (cur == 115):
                                                            this34 = self.source
                                                            i33 = self.pos
                                                            self.pos = (self.pos + 1)
                                                            cur = (-1 if ((i33 >= len(this34))) else ord(this34[i33]))
                                                            if (cur == 34):
                                                                while True:
                                                                    this35 = self.source
                                                                    i34 = self.pos
                                                                    self.pos = (self.pos + 1)
                                                                    _g4 = (-1 if ((i34 >= len(this35))) else ord(this35[i34]))
                                                                    _hx_tmp2 = None
                                                                    if ((_g4 == 58) == True):
                                                                        break
                                                                    else:
                                                                        _hx_tmp2 = (_g4 < 33)
                                                                        if (_hx_tmp2 != True):
                                                                            self.die(("expected " + ":"))
                                                                while True:
                                                                    tmp3 = None
                                                                    if (self.pos < self.max):
                                                                        this36 = self.source
                                                                        i35 = self.pos
                                                                        tmp3 = (((-1 if ((i35 >= len(this36))) else ord(this36[i35]))) < 33)
                                                                    else:
                                                                        tmp3 = False
                                                                    if (not tmp3):
                                                                        break
                                                                    _hx_local_36 = self
                                                                    _hx_local_37 = _hx_local_36.pos
                                                                    _hx_local_36.pos = (_hx_local_37 + 1)
                                                                    _hx_local_37
                                                                while True:
                                                                    v_imageScales1 = None
                                                                    if (self.pos < self.max):
                                                                        this37 = self.source
                                                                        i36 = self.pos
                                                                        v_imageScales1 = (((-1 if ((i36 >= len(this37))) else ord(this37[i36]))) < 33)
                                                                    else:
                                                                        v_imageScales1 = False
                                                                    if (not v_imageScales1):
                                                                        break
                                                                    _hx_local_38 = self
                                                                    _hx_local_39 = _hx_local_38.pos
                                                                    _hx_local_38.pos = (_hx_local_39 + 1)
                                                                    _hx_local_39
                                                                v_imageScales2 = None
                                                                this38 = self.source
                                                                i37 = self.pos
                                                                if (((-1 if ((i37 >= len(this38))) else ord(this38[i37]))) == 91):
                                                                    _hx_local_40 = self
                                                                    _hx_local_41 = _hx_local_40.pos
                                                                    _hx_local_40.pos = (_hx_local_41 + 1)
                                                                    _hx_local_40.pos
                                                                    while True:
                                                                        v_imageScales3 = None
                                                                        if (self.pos < self.max):
                                                                            this39 = self.source
                                                                            i38 = self.pos
                                                                            v_imageScales3 = (((-1 if ((i38 >= len(this39))) else ord(this39[i38]))) < 33)
                                                                        else:
                                                                            v_imageScales3 = False
                                                                        if (not v_imageScales3):
                                                                            break
                                                                        _hx_local_42 = self
                                                                        _hx_local_43 = _hx_local_42.pos
                                                                        _hx_local_42.pos = (_hx_local_43 + 1)
                                                                        _hx_local_43
                                                                    v_imageScales2 = True
                                                                else:
                                                                    v_imageScales2 = False
                                                                if (not v_imageScales2):
                                                                    self.die(("Expected " + "["))
                                                                _hx___ret1 = []
                                                                while True:
                                                                    v_imageScales4 = None
                                                                    if (self.pos < self.max):
                                                                        this40 = self.source
                                                                        i39 = self.pos
                                                                        v_imageScales4 = (((-1 if ((i39 >= len(this40))) else ord(this40[i39]))) < 33)
                                                                    else:
                                                                        v_imageScales4 = False
                                                                    if (not v_imageScales4):
                                                                        break
                                                                    _hx_local_44 = self
                                                                    _hx_local_45 = _hx_local_44.pos
                                                                    _hx_local_44.pos = (_hx_local_45 + 1)
                                                                    _hx_local_45
                                                                v_imageScales5 = None
                                                                this41 = self.source
                                                                i40 = self.pos
                                                                if (((-1 if ((i40 >= len(this41))) else ord(this41[i40]))) == 93):
                                                                    _hx_local_46 = self
                                                                    _hx_local_47 = _hx_local_46.pos
                                                                    _hx_local_46.pos = (_hx_local_47 + 1)
                                                                    _hx_local_46.pos
                                                                    while True:
                                                                        v_imageScales6 = None
                                                                        if (self.pos < self.max):
                                                                            this42 = self.source
                                                                            i41 = self.pos
                                                                            v_imageScales6 = (((-1 if ((i41 >= len(this42))) else ord(this42[i41]))) < 33)
                                                                        else:
                                                                            v_imageScales6 = False
                                                                        if (not v_imageScales6):
                                                                            break
                                                                        _hx_local_48 = self
                                                                        _hx_local_49 = _hx_local_48.pos
                                                                        _hx_local_48.pos = (_hx_local_49 + 1)
                                                                        _hx_local_49
                                                                    v_imageScales5 = True
                                                                else:
                                                                    v_imageScales5 = False
                                                                if (not v_imageScales5):
                                                                    while True:
                                                                        this43 = self.parseNumber()
                                                                        x1 = Std.parseFloat(HxString.substring(this43.source,this43.min,this43.max))
                                                                        _hx___ret1.append(x1)
                                                                        while True:
                                                                            v_imageScales7 = None
                                                                            if (self.pos < self.max):
                                                                                this44 = self.source
                                                                                i42 = self.pos
                                                                                v_imageScales7 = (((-1 if ((i42 >= len(this44))) else ord(this44[i42]))) < 33)
                                                                            else:
                                                                                v_imageScales7 = False
                                                                            if (not v_imageScales7):
                                                                                break
                                                                            _hx_local_50 = self
                                                                            _hx_local_51 = _hx_local_50.pos
                                                                            _hx_local_50.pos = (_hx_local_51 + 1)
                                                                            _hx_local_51
                                                                        v_imageScales8 = None
                                                                        this45 = self.source
                                                                        i43 = self.pos
                                                                        if (((-1 if ((i43 >= len(this45))) else ord(this45[i43]))) == 44):
                                                                            _hx_local_52 = self
                                                                            _hx_local_53 = _hx_local_52.pos
                                                                            _hx_local_52.pos = (_hx_local_53 + 1)
                                                                            _hx_local_52.pos
                                                                            while True:
                                                                                v_imageScales9 = None
                                                                                if (self.pos < self.max):
                                                                                    this46 = self.source
                                                                                    i44 = self.pos
                                                                                    v_imageScales9 = (((-1 if ((i44 >= len(this46))) else ord(this46[i44]))) < 33)
                                                                                else:
                                                                                    v_imageScales9 = False
                                                                                if (not v_imageScales9):
                                                                                    break
                                                                                _hx_local_54 = self
                                                                                _hx_local_55 = _hx_local_54.pos
                                                                                _hx_local_54.pos = (_hx_local_55 + 1)
                                                                                _hx_local_55
                                                                            v_imageScales8 = True
                                                                        else:
                                                                            v_imageScales8 = False
                                                                        if (not v_imageScales8):
                                                                            break
                                                                    while True:
                                                                        v_imageScales10 = None
                                                                        if (self.pos < self.max):
                                                                            this47 = self.source
                                                                            i45 = self.pos
                                                                            v_imageScales10 = (((-1 if ((i45 >= len(this47))) else ord(this47[i45]))) < 33)
                                                                        else:
                                                                            v_imageScales10 = False
                                                                        if (not v_imageScales10):
                                                                            break
                                                                        _hx_local_56 = self
                                                                        _hx_local_57 = _hx_local_56.pos
                                                                        _hx_local_56.pos = (_hx_local_57 + 1)
                                                                        _hx_local_57
                                                                    v_imageScales11 = None
                                                                    this48 = self.source
                                                                    i46 = self.pos
                                                                    if (((-1 if ((i46 >= len(this48))) else ord(this48[i46]))) == 93):
                                                                        _hx_local_58 = self
                                                                        _hx_local_59 = _hx_local_58.pos
                                                                        _hx_local_58.pos = (_hx_local_59 + 1)
                                                                        _hx_local_58.pos
                                                                        while True:
                                                                            v_imageScales12 = None
                                                                            if (self.pos < self.max):
                                                                                this49 = self.source
                                                                                i47 = self.pos
                                                                                v_imageScales12 = (((-1 if ((i47 >= len(this49))) else ord(this49[i47]))) < 33)
                                                                            else:
                                                                                v_imageScales12 = False
                                                                            if (not v_imageScales12):
                                                                                break
                                                                            _hx_local_60 = self
                                                                            _hx_local_61 = _hx_local_60.pos
                                                                            _hx_local_60.pos = (_hx_local_61 + 1)
                                                                            _hx_local_61
                                                                        v_imageScales11 = True
                                                                    else:
                                                                        v_imageScales11 = False
                                                                    if (not v_imageScales11):
                                                                        self.die(("Expected " + "]"))
                                                                v_imageScales = _hx___ret1
                                                                hasv_imageScales = True
                                                                while True:
                                                                    tmp4 = None
                                                                    if (self.pos < self.max):
                                                                        this50 = self.source
                                                                        i48 = self.pos
                                                                        tmp4 = (((-1 if ((i48 >= len(this50))) else ord(this50[i48]))) < 33)
                                                                    else:
                                                                        tmp4 = False
                                                                    if (not tmp4):
                                                                        break
                                                                    _hx_local_62 = self
                                                                    _hx_local_63 = _hx_local_62.pos
                                                                    _hx_local_62.pos = (_hx_local_63 + 1)
                                                                    _hx_local_63
                                                                tmp5 = None
                                                                this51 = self.source
                                                                i49 = self.pos
                                                                if (((-1 if ((i49 >= len(this51))) else ord(this51[i49]))) == 44):
                                                                    _hx_local_64 = self
                                                                    _hx_local_65 = _hx_local_64.pos
                                                                    _hx_local_64.pos = (_hx_local_65 + 1)
                                                                    _hx_local_64.pos
                                                                    tmp5 = True
                                                                else:
                                                                    tmp5 = False
                                                                if (not tmp5):
                                                                    break
                                                                else:
                                                                    continue
                                    else:
                                        pass
                elif (_g1 == 112):
                    this52 = self.source
                    i50 = self.pos
                    self.pos = (self.pos + 1)
                    cur = (-1 if ((i50 >= len(this52))) else ord(this52[i50]))
                    if (cur == 105):
                        this53 = self.source
                        i51 = self.pos
                        self.pos = (self.pos + 1)
                        cur = (-1 if ((i51 >= len(this53))) else ord(this53[i51]))
                        if (cur == 110):
                            this54 = self.source
                            i52 = self.pos
                            self.pos = (self.pos + 1)
                            cur = (-1 if ((i52 >= len(this54))) else ord(this54[i52]))
                            if (cur == 110):
                                this55 = self.source
                                i53 = self.pos
                                self.pos = (self.pos + 1)
                                cur = (-1 if ((i53 >= len(this55))) else ord(this55[i53]))
                                if (cur == 101):
                                    this56 = self.source
                                    i54 = self.pos
                                    self.pos = (self.pos + 1)
                                    cur = (-1 if ((i54 >= len(this56))) else ord(this56[i54]))
                                    if (cur == 100):
                                        this57 = self.source
                                        i55 = self.pos
                                        self.pos = (self.pos + 1)
                                        cur = (-1 if ((i55 >= len(this57))) else ord(this57[i55]))
                                        if (cur == 73):
                                            this58 = self.source
                                            i56 = self.pos
                                            self.pos = (self.pos + 1)
                                            cur = (-1 if ((i56 >= len(this58))) else ord(this58[i56]))
                                            if (cur == 109):
                                                this59 = self.source
                                                i57 = self.pos
                                                self.pos = (self.pos + 1)
                                                cur = (-1 if ((i57 >= len(this59))) else ord(this59[i57]))
                                                if (cur == 97):
                                                    this60 = self.source
                                                    i58 = self.pos
                                                    self.pos = (self.pos + 1)
                                                    cur = (-1 if ((i58 >= len(this60))) else ord(this60[i58]))
                                                    if (cur == 103):
                                                        this61 = self.source
                                                        i59 = self.pos
                                                        self.pos = (self.pos + 1)
                                                        cur = (-1 if ((i59 >= len(this61))) else ord(this61[i59]))
                                                        if (cur == 101):
                                                            this62 = self.source
                                                            i60 = self.pos
                                                            self.pos = (self.pos + 1)
                                                            cur = (-1 if ((i60 >= len(this62))) else ord(this62[i60]))
                                                            if (cur == 73):
                                                                this63 = self.source
                                                                i61 = self.pos
                                                                self.pos = (self.pos + 1)
                                                                cur = (-1 if ((i61 >= len(this63))) else ord(this63[i61]))
                                                                if (cur == 110):
                                                                    this64 = self.source
                                                                    i62 = self.pos
                                                                    self.pos = (self.pos + 1)
                                                                    cur = (-1 if ((i62 >= len(this64))) else ord(this64[i62]))
                                                                    if (cur == 100):
                                                                        this65 = self.source
                                                                        i63 = self.pos
                                                                        self.pos = (self.pos + 1)
                                                                        cur = (-1 if ((i63 >= len(this65))) else ord(this65[i63]))
                                                                        if (cur == 101):
                                                                            this66 = self.source
                                                                            i64 = self.pos
                                                                            self.pos = (self.pos + 1)
                                                                            cur = (-1 if ((i64 >= len(this66))) else ord(this66[i64]))
                                                                            if (cur == 120):
                                                                                this67 = self.source
                                                                                i65 = self.pos
                                                                                self.pos = (self.pos + 1)
                                                                                cur = (-1 if ((i65 >= len(this67))) else ord(this67[i65]))
                                                                                if (cur == 34):
                                                                                    while True:
                                                                                        this68 = self.source
                                                                                        i66 = self.pos
                                                                                        self.pos = (self.pos + 1)
                                                                                        _g5 = (-1 if ((i66 >= len(this68))) else ord(this68[i66]))
                                                                                        _hx_tmp3 = None
                                                                                        if ((_g5 == 58) == True):
                                                                                            break
                                                                                        else:
                                                                                            _hx_tmp3 = (_g5 < 33)
                                                                                            if (_hx_tmp3 != True):
                                                                                                self.die(("expected " + ":"))
                                                                                    while True:
                                                                                        tmp6 = None
                                                                                        if (self.pos < self.max):
                                                                                            this69 = self.source
                                                                                            i67 = self.pos
                                                                                            tmp6 = (((-1 if ((i67 >= len(this69))) else ord(this69[i67]))) < 33)
                                                                                        else:
                                                                                            tmp6 = False
                                                                                        if (not tmp6):
                                                                                            break
                                                                                        _hx_local_66 = self
                                                                                        _hx_local_67 = _hx_local_66.pos
                                                                                        _hx_local_66.pos = (_hx_local_67 + 1)
                                                                                        _hx_local_67
                                                                                    this70 = self.parseNumber()
                                                                                    v_pinnedImageIndex = Std.parseInt(HxString.substring(this70.source,this70.min,this70.max))
                                                                                    hasv_pinnedImageIndex = True
                                                                                    while True:
                                                                                        tmp7 = None
                                                                                        if (self.pos < self.max):
                                                                                            this71 = self.source
                                                                                            i68 = self.pos
                                                                                            tmp7 = (((-1 if ((i68 >= len(this71))) else ord(this71[i68]))) < 33)
                                                                                        else:
                                                                                            tmp7 = False
                                                                                        if (not tmp7):
                                                                                            break
                                                                                        _hx_local_68 = self
                                                                                        _hx_local_69 = _hx_local_68.pos
                                                                                        _hx_local_68.pos = (_hx_local_69 + 1)
                                                                                        _hx_local_69
                                                                                    tmp8 = None
                                                                                    this72 = self.source
                                                                                    i69 = self.pos
                                                                                    if (((-1 if ((i69 >= len(this72))) else ord(this72[i69]))) == 44):
                                                                                        _hx_local_70 = self
                                                                                        _hx_local_71 = _hx_local_70.pos
                                                                                        _hx_local_70.pos = (_hx_local_71 + 1)
                                                                                        _hx_local_70.pos
                                                                                        tmp8 = True
                                                                                    else:
                                                                                        tmp8 = False
                                                                                    if (not tmp8):
                                                                                        break
                                                                                    else:
                                                                                        continue
                else:
                    pass
                if (cur != 34):
                    self.skipString()
                while True:
                    this73 = self.source
                    i70 = self.pos
                    self.pos = (self.pos + 1)
                    _g6 = (-1 if ((i70 >= len(this73))) else ord(this73[i70]))
                    _hx_tmp4 = None
                    if ((_g6 == 58) == True):
                        break
                    else:
                        _hx_tmp4 = (_g6 < 33)
                        if (_hx_tmp4 != True):
                            self.die(("expected " + ":"))
                while True:
                    tmp9 = None
                    if (self.pos < self.max):
                        this74 = self.source
                        i71 = self.pos
                        tmp9 = (((-1 if ((i71 >= len(this74))) else ord(this74[i71]))) < 33)
                    else:
                        tmp9 = False
                    if (not tmp9):
                        break
                    _hx_local_72 = self
                    _hx_local_73 = _hx_local_72.pos
                    _hx_local_72.pos = (_hx_local_73 + 1)
                    _hx_local_73
                self.skipValue()
                while True:
                    tmp10 = None
                    if (self.pos < self.max):
                        this75 = self.source
                        i72 = self.pos
                        tmp10 = (((-1 if ((i72 >= len(this75))) else ord(this75[i72]))) < 33)
                    else:
                        tmp10 = False
                    if (not tmp10):
                        break
                    _hx_local_74 = self
                    _hx_local_75 = _hx_local_74.pos
                    _hx_local_74.pos = (_hx_local_75 + 1)
                    _hx_local_75
                tmp11 = None
                this76 = self.source
                i73 = self.pos
                if (((-1 if ((i73 >= len(this76))) else ord(this76[i73]))) == 44):
                    _hx_local_76 = self
                    _hx_local_77 = _hx_local_76.pos
                    _hx_local_76.pos = (_hx_local_77 + 1)
                    _hx_local_76.pos
                    tmp11 = True
                else:
                    tmp11 = False
                if (not tmp11):
                    break
            while True:
                tmp = None
                if (self.pos < self.max):
                    this1 = self.source
                    i = self.pos
                    tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                else:
                    tmp = False
                if (not tmp):
                    break
                _hx_local_78 = self
                _hx_local_79 = _hx_local_78.pos
                _hx_local_78.pos = (_hx_local_79 + 1)
                _hx_local_79
            tmp = None
            this1 = self.source
            i = self.pos
            if (((-1 if ((i >= len(this1))) else ord(this1[i]))) == 125):
                _hx_local_80 = self
                _hx_local_81 = _hx_local_80.pos
                _hx_local_80.pos = (_hx_local_81 + 1)
                _hx_local_80.pos
                while True:
                    tmp1 = None
                    if (self.pos < self.max):
                        this1 = self.source
                        i = self.pos
                        tmp1 = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp1 = False
                    if (not tmp1):
                        break
                    _hx_local_82 = self
                    _hx_local_83 = _hx_local_82.pos
                    _hx_local_82.pos = (_hx_local_83 + 1)
                    _hx_local_83
                tmp = True
            else:
                tmp = False
            if (not tmp):
                self.die(("Expected " + "}"))
        def _hx_local_84(field):
            return _gthis.die((("missing field \"" + ("null" if field is None else field)) + "\""),__start__)
        __missing__ = _hx_local_84
        return _hx_AnonObject({'imageFiles': (v_imageFiles if hasv_imageFiles else __missing__("imageFiles")), 'imageScales': (v_imageScales if hasv_imageScales else __missing__("imageScales")), 'pinnedImageIndex': (v_pinnedImageIndex if hasv_pinnedImageIndex else __missing__("pinnedImageIndex"))})

    def parse(self,source):
        _gthis = self
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        self.init(source)
        ret = self.process0()
        _g = 0
        _g1 = self.afterParsing
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            f()
        if (len(_gthis.afterParsing) > 0):
            _gthis.afterParsing = []
        return ret

    def tryParse(self,source):
        _gthis = self
        def _hx_local_2():
            def _hx_local_1():
                ret = _gthis.parse(source)
                while True:
                    tmp = None
                    if (_gthis.pos < _gthis.max):
                        this1 = _gthis.source
                        i = _gthis.pos
                        tmp = (((-1 if ((i >= len(this1))) else ord(this1[i]))) < 33)
                    else:
                        tmp = False
                    if (not tmp):
                        break
                    _gthis.pos = (_gthis.pos + 1)
                if (_gthis.pos < _gthis.max):
                    _gthis.die("Invalid data after JSON document")
                return ret
            return tink_core_TypedError.catchExceptions(_hx_local_1,None,_hx_AnonObject({'fileName': "tink/json/macros/Macro.hx", 'lineNumber': 107, 'className': "tink.json.Parser9", 'methodName': "tryParse"}))
        return _hx_local_2()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Parser9._hx_class = tink_json_Parser9
_hx_classes["tink.json.Parser9"] = tink_json_Parser9


class tink_json__Representation_Representation_Impl_:
    _hx_class_name = "tink.json._Representation.Representation_Impl_"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["get", "_new", "of"]

    @staticmethod
    def get(this1):
        return this1

    @staticmethod
    def _new(v):
        return v

    @staticmethod
    def of(v):
        return v
tink_json__Representation_Representation_Impl_._hx_class = tink_json__Representation_Representation_Impl_
_hx_classes["tink.json._Representation.Representation_Impl_"] = tink_json__Representation_Representation_Impl_

class tink_json_Value(Enum):
    __slots__ = ()
    _hx_class_name = "tink.json.Value"
    _hx_constructs = ["VNumber", "VString", "VNull", "VBool", "VArray", "VObject"]

    @staticmethod
    def VNumber(f):
        return tink_json_Value("VNumber", 0, (f,))

    @staticmethod
    def VString(s):
        return tink_json_Value("VString", 1, (s,))

    @staticmethod
    def VBool(b):
        return tink_json_Value("VBool", 3, (b,))

    @staticmethod
    def VArray(a):
        return tink_json_Value("VArray", 4, (a,))

    @staticmethod
    def VObject(a):
        return tink_json_Value("VObject", 5, (a,))
tink_json_Value.VNull = tink_json_Value("VNull", 2, ())
tink_json_Value._hx_class = tink_json_Value
_hx_classes["tink.json.Value"] = tink_json_Value


class tink_json_Writer:
    _hx_class_name = "tink.json.Writer"
    _hx_is_interface = "False"
    __slots__ = ()
tink_json_Writer._hx_class = tink_json_Writer
_hx_classes["tink.json.Writer"] = tink_json_Writer


class tink_json_BasicWriter:
    _hx_class_name = "tink.json.BasicWriter"
    _hx_is_interface = "False"
    __slots__ = ("plugins", "buf")
    _hx_fields = ["plugins", "buf"]
    _hx_methods = ["init", "output", "char", "writeInt", "writeFloat", "writeBool", "writeString", "writeDynamic", "writeValue", "expandScientificNotation"]

    def __init__(self):
        self.buf = None
        self.plugins = None
        self.plugins = tink_core_Annex(self)

    def init(self):
        self.buf = StringBuf()

    def output(self,s):
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)

    def char(self,c):
        _this = self.buf
        s = "".join(map(chr,[c]))
        _this.b.write(s)

    def writeInt(self,v):
        s = Std.string(v)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)

    def writeFloat(self,v):
        s = Std.string(v)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)

    def writeBool(self,b):
        self.buf.b.write(("true" if b else "false"))

    def writeString(self,s):
        s1 = tink_json__Writer_StringWriter.encoder.encode(s)
        _this = self.buf
        s = Std.string(s1)
        _this.b.write(s)

    def writeDynamic(self,value):
        s = haxe_format_JsonPrinter.print(value)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)

    def writeValue(self,value):
        _gthis = self
        tmp = value.index
        if (tmp == 0):
            f = value.params[0]
            s = Std.string(f)
            _this = self.buf
            s1 = Std.string(s)
            _this.b.write(s1)
        elif (tmp == 1):
            s = value.params[0]
            s1 = tink_json__Writer_StringWriter.encoder.encode(s)
            _this = self.buf
            s = Std.string(s1)
            _this.b.write(s)
        elif (tmp == 2):
            self.buf.b.write("null")
        elif (tmp == 3):
            b = value.params[0]
            self.buf.b.write(("true" if b else "false"))
        elif (tmp == 4):
            _g = value.params[0]
            if (len(_g) == 0):
                self.buf.b.write("[]")
            else:
                a = _g
                _this = self.buf
                s = "".join(map(chr,[91]))
                _this.b.write(s)
                self.writeValue((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = len(a)
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    _this = self.buf
                    s = "".join(map(chr,[44]))
                    _this.b.write(s)
                    self.writeValue((a[i] if i >= 0 and i < len(a) else None))
                _this = self.buf
                s = "".join(map(chr,[93]))
                _this.b.write(s)
        elif (tmp == 5):
            _g = value.params[0]
            if (len(_g) == 0):
                self.buf.b.write("{}")
            else:
                a = _g
                _this = self.buf
                s = "".join(map(chr,[123]))
                _this.b.write(s)
                p = (a[0] if 0 < len(a) else None)
                s = tink_json__Writer_StringWriter.encoder.encode(p.name)
                _this = _gthis.buf
                s1 = Std.string(s)
                _this.b.write(s1)
                _this = _gthis.buf
                s = "".join(map(chr,[58]))
                _this.b.write(s)
                _gthis.writeValue(p.value)
                _g = 1
                _g1 = len(a)
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    _this = self.buf
                    s = "".join(map(chr,[44]))
                    _this.b.write(s)
                    p = (a[i] if i >= 0 and i < len(a) else None)
                    s1 = tink_json__Writer_StringWriter.encoder.encode(p.name)
                    _this1 = _gthis.buf
                    s2 = Std.string(s1)
                    _this1.b.write(s2)
                    _this2 = _gthis.buf
                    s3 = "".join(map(chr,[58]))
                    _this2.b.write(s3)
                    _gthis.writeValue(p.value)
                _this = self.buf
                s = "".join(map(chr,[125]))
                _this.b.write(s)
        else:
            pass

    def expandScientificNotation(self,v):
        _this = v.lower()
        _g = _this.split("e")
        _g1 = len(_g)
        if (_g1 == 1):
            d = (_g[0] if 0 < len(_g) else None)
            return d
        elif (_g1 == 2):
            d = (_g[0] if 0 < len(_g) else None)
            e = (_g[1] if 1 < len(_g) else None)
            _g = d.split(".")
            _g1 = len(_g)
            if (_g1 == 1):
                v = (_g[0] if 0 < len(_g) else None)
                return (("null" if v is None else v) + HxOverrides.stringOrNull(StringTools.rpad("","0",Std.parseInt(e))))
            elif (_g1 == 2):
                d = (_g[0] if 0 < len(_g) else None)
                f = (_g[1] if 1 < len(_g) else None)
                return (("null" if d is None else d) + HxOverrides.stringOrNull(StringTools.rpad(f,"0",Std.parseInt(e))))
            else:
                raise haxe_Exception.thrown("Invalid value")
        else:
            raise haxe_Exception.thrown("Invalid value")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.plugins = None
        _hx_o.buf = None
tink_json_BasicWriter._hx_class = tink_json_BasicWriter
_hx_classes["tink.json.BasicWriter"] = tink_json_BasicWriter


class tink_json__Writer_StringWriter:
    _hx_class_name = "tink.json._Writer.StringWriter"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["encoder", "stringify"]

    @staticmethod
    def stringify(v):
        return tink_json__Writer_StringWriter.encoder.encode(v)
tink_json__Writer_StringWriter._hx_class = tink_json__Writer_StringWriter
_hx_classes["tink.json._Writer.StringWriter"] = tink_json__Writer_StringWriter


class tink_json__Writer_StdWriter:
    _hx_class_name = "tink.json._Writer.StdWriter"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["stringify"]

    @staticmethod
    def stringify(v):
        return haxe_format_JsonPrinter.print(v)
tink_json__Writer_StdWriter._hx_class = tink_json__Writer_StdWriter
_hx_classes["tink.json._Writer.StdWriter"] = tink_json__Writer_StdWriter


class tink_json_Writer0(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer0"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        s = tink_json__Writer_StringWriter.encoder.encode(value)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer0._hx_class = tink_json_Writer0
_hx_classes["tink.json.Writer0"] = tink_json_Writer0


class tink_json_Writer1(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer1"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.components
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"components\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value1.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value2 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value2)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value3 = value1.h.get(k1,None)
            s5 = tink_json__Writer_StringWriter.encoder.encode(value3)
            _this4 = self.buf
            s6 = Std.string(s5)
            _this4.b.write(s6)
            _this5 = self.buf
            s7 = "".join(map(chr,[93]))
            _this5.b.write(s7)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.files
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"files\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value1)):
            value2 = (value1[_g] if _g >= 0 and _g < len(value1) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = tink_json__Writer_StringWriter.encoder.encode(value2)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.id
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"id\":")
        s = tink_json__Writer_StringWriter.encoder.encode(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer1._hx_class = tink_json_Writer1
_hx_classes["tink.json.Writer1"] = tink_json_Writer1


class tink_json_Writer10(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer10"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.height
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"height\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.width
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"width\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer10._hx_class = tink_json_Writer10
_hx_classes["tink.json.Writer10"] = tink_json_Writer10


class tink_json_Writer11(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer11"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value)):
            value1 = (value[_g] if _g >= 0 and _g < len(value) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer11._hx_class = tink_json_Writer11
_hx_classes["tink.json.Writer11"] = tink_json_Writer11


class tink_json_Writer12(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer12"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        s = Std.string(value)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer12._hx_class = tink_json_Writer12
_hx_classes["tink.json.Writer12"] = tink_json_Writer12


class tink_json_Writer13(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer13"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value)):
            value1 = (value[_g] if _g >= 0 and _g < len(value) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer13._hx_class = tink_json_Writer13
_hx_classes["tink.json.Writer13"] = tink_json_Writer13


class tink_json_Writer14(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer14"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            s5 = Std.string(value2)
            _this4 = self.buf
            s6 = Std.string(s5)
            _this4.b.write(s6)
            _this5 = self.buf
            s7 = "".join(map(chr,[93]))
            _this5.b.write(s7)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer14._hx_class = tink_json_Writer14
_hx_classes["tink.json.Writer14"] = tink_json_Writer14


class tink_json_Writer15(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer15"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.accounts
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"accounts\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value1)):
            value2 = (value1[_g] if _g >= 0 and _g < len(value1) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = Std.string(value2)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.energy
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"energy\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.hope
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"hope\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.monthlyExpenses
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"monthlyExpenses\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value1)):
            value2 = (value1[_g] if _g >= 0 and _g < len(value1) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = Std.string(value2)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.note
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"note\":")
        s = tink_json__Writer_StringWriter.encoder.encode(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer15._hx_class = tink_json_Writer15
_hx_classes["tink.json.Writer15"] = tink_json_Writer15


class tink_json_Writer16(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer16"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            s5 = Std.string((value2.date.timestamp() * 1000))
            _this4 = self.buf
            s6 = Std.string(s5)
            _this4.b.write(s6)
            _this5 = self.buf
            s7 = "".join(map(chr,[93]))
            _this5.b.write(s7)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer16._hx_class = tink_json_Writer16
_hx_classes["tink.json.Writer16"] = tink_json_Writer16


class tink_json_Writer2(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer2"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            _this4 = self.buf
            s5 = "".join(map(chr,[91]))
            _this4.b.write(s5)
            first1 = True
            _g = 0
            while (_g < len(value2)):
                value3 = (value2[_g] if _g >= 0 and _g < len(value2) else None)
                _g = (_g + 1)
                if first1:
                    first1 = False
                else:
                    _this5 = self.buf
                    s6 = "".join(map(chr,[44]))
                    _this5.b.write(s6)
                s7 = tink_json__Writer_StringWriter.encoder.encode(value3)
                _this6 = self.buf
                s8 = Std.string(s7)
                _this6.b.write(s8)
            _this7 = self.buf
            s9 = "".join(map(chr,[93]))
            _this7.b.write(s9)
            _this8 = self.buf
            s10 = "".join(map(chr,[93]))
            _this8.b.write(s10)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer2._hx_class = tink_json_Writer2
_hx_classes["tink.json.Writer2"] = tink_json_Writer2


class tink_json_Writer3(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer3"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            s5 = tink_json__Writer_StringWriter.encoder.encode(value2)
            _this4 = self.buf
            s6 = Std.string(s5)
            _this4.b.write(s6)
            _this5 = self.buf
            s7 = "".join(map(chr,[93]))
            _this5.b.write(s7)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer3._hx_class = tink_json_Writer3
_hx_classes["tink.json.Writer3"] = tink_json_Writer3


class tink_json_Writer4(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer4"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            s5 = Std.string(value2)
            _this4 = self.buf
            s6 = Std.string(s5)
            _this4.b.write(s6)
            _this5 = self.buf
            s7 = "".join(map(chr,[93]))
            _this5.b.write(s7)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer4._hx_class = tink_json_Writer4
_hx_classes["tink.json.Writer4"] = tink_json_Writer4


class tink_json_Writer5(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer5"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.imageFiles
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"imageFiles\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value1)):
            value2 = (value1[_g] if _g >= 0 and _g < len(value1) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = tink_json__Writer_StringWriter.encoder.encode(value2)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.imageScales
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"imageScales\":")
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        _g = 0
        while (_g < len(value1)):
            value2 = (value1[_g] if _g >= 0 and _g < len(value1) else None)
            _g = (_g + 1)
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            s1 = Std.string(value2)
            _this1 = self.buf
            s2 = Std.string(s1)
            _this1.b.write(s2)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        value1 = value.pinnedImageIndex
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"pinnedImageIndex\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer5._hx_class = tink_json_Writer5
_hx_classes["tink.json.Writer5"] = tink_json_Writer5


class tink_json_Writer6(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer6"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.a
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"a\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.b
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"b\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.g
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"g\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.r
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"r\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer6._hx_class = tink_json_Writer6
_hx_classes["tink.json.Writer6"] = tink_json_Writer6


class tink_json_Writer7(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer7"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.a
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"a\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.b
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"b\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.g
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"g\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.r
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"r\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer7._hx_class = tink_json_Writer7
_hx_classes["tink.json.Writer7"] = tink_json_Writer7


class tink_json_Writer8(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer8"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.x
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"x\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.y
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"y\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        value1 = value.z
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"z\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        _this = self.buf
        s = "".join(map(chr,[91]))
        _this.b.write(s)
        first = True
        k = value.keys()
        while k.hasNext():
            k1 = k.next()
            if first:
                first = False
            else:
                _this = self.buf
                s = "".join(map(chr,[44]))
                _this.b.write(s)
            _this1 = self.buf
            s1 = "".join(map(chr,[91]))
            _this1.b.write(s1)
            value1 = k1
            s2 = tink_json__Writer_StringWriter.encoder.encode(value1)
            _this2 = self.buf
            s3 = Std.string(s2)
            _this2.b.write(s3)
            _this3 = self.buf
            s4 = "".join(map(chr,[44]))
            _this3.b.write(s4)
            value2 = value.h.get(k1,None)
            self.process0(value2)
            _this4 = self.buf
            s5 = "".join(map(chr,[93]))
            _this4.b.write(s5)
        _this = self.buf
        s = "".join(map(chr,[93]))
        _this.b.write(s)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer8._hx_class = tink_json_Writer8
_hx_classes["tink.json.Writer8"] = tink_json_Writer8


class tink_json_Writer9(tink_json_BasicWriter):
    _hx_class_name = "tink.json.Writer9"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["process0", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = tink_json_BasicWriter


    def __init__(self):
        super().__init__()

    def process0(self,value):
        _hx___first = True
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        value1 = value.radius
        if _hx___first:
            _hx___first = False
        else:
            _this = self.buf
            s = "".join(map(chr,[44]))
            _this.b.write(s)
        self.buf.b.write("\"radius\":")
        s = Std.string(value1)
        _this = self.buf
        s1 = Std.string(s)
        _this.b.write(s1)
        _this = self.buf
        s = "".join(map(chr,[125]))
        _this.b.write(s)

    def write(self,value):
        self.init()
        self.process0(value)
        return self.buf.b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
tink_json_Writer9._hx_class = tink_json_Writer9
_hx_classes["tink.json.Writer9"] = tink_json_Writer9


class uuid_Uuid:
    _hx_class_name = "uuid.Uuid"
    _hx_is_interface = "False"
    __slots__ = ()
    _hx_statics = ["DNS", "URL", "ISO_OID", "X500_DN", "NIL", "LOWERCASE_BASE26", "UPPERCASE_BASE26", "NO_LOOK_ALIKES_BASE51", "FLICKR_BASE58", "BASE_70", "BASE_85", "COOKIE_BASE90", "NANO_ID_ALPHABET", "NUMBERS_BIN", "NUMBERS_OCT", "NUMBERS_DEC", "NUMBERS_HEX", "lastMSecs", "lastNSecs", "clockSequenceBuffer", "regexp", "rndSeed", "state0", "state1", "DVS", "splitmix64_seed", "randomFromRange", "randomByte", "fromShort", "toShort", "fromNano", "toNano", "v1", "v3", "v4", "v5", "stringify", "parse", "validate", "version", "hexToUuid", "convert", "nanoId", "short"]

    @staticmethod
    def splitmix64_seed(index):
        b_high = -1640531527
        b_low = 2135587861
        high = (((index.high + b_high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((index.low + b_low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,index.low) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        result = haxe__Int64____Int64(high,low)
        b = 30
        b = (b & 63)
        b1 = (haxe__Int64____Int64(result.high,result.low) if ((b == 0)) else (haxe__Int64____Int64(((((result.high >> b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((((((result.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(result.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((result.high >> 31)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((result.high >> ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))))
        a_high = ((((result.high ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_low = ((((result.low ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        b_high = -1084733587
        b_low = 484763065
        mask = 65535
        al = (a_low & mask)
        ah = HxOverrides.rshift(a_low, 16)
        bl = (b_low & mask)
        bh = HxOverrides.rshift(b_low, 16)
        p00 = haxe__Int32_Int32_Impl_.mul(al,bl)
        p10 = haxe__Int32_Int32_Impl_.mul(ah,bl)
        p01 = haxe__Int32_Int32_Impl_.mul(al,bh)
        p11 = haxe__Int32_Int32_Impl_.mul(ah,bh)
        low = p00
        high = ((((((p11 + (HxOverrides.rshift(p01, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + (HxOverrides.rshift(p10, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p01 = ((((p01 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p01) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p01) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p10 = ((((p10 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p10) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p10) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        high = (((high + ((((haxe__Int32_Int32_Impl_.mul(a_low,b_high) + haxe__Int32_Int32_Impl_.mul(a_high,b_low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        result = haxe__Int64____Int64(high,low)
        b = 27
        b = (b & 63)
        b1 = (haxe__Int64____Int64(result.high,result.low) if ((b == 0)) else (haxe__Int64____Int64(((((result.high >> b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((((((result.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(result.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((result.high >> 31)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((result.high >> ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))))
        a_high = ((((result.high ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_low = ((((result.low ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        b_high = -1798288965
        b_low = 321982955
        mask = 65535
        al = (a_low & mask)
        ah = HxOverrides.rshift(a_low, 16)
        bl = (b_low & mask)
        bh = HxOverrides.rshift(b_low, 16)
        p00 = haxe__Int32_Int32_Impl_.mul(al,bl)
        p10 = haxe__Int32_Int32_Impl_.mul(ah,bl)
        p01 = haxe__Int32_Int32_Impl_.mul(al,bh)
        p11 = haxe__Int32_Int32_Impl_.mul(ah,bh)
        low = p00
        high = ((((((p11 + (HxOverrides.rshift(p01, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + (HxOverrides.rshift(p10, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p01 = ((((p01 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p01) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p01) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p10 = ((((p10 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p10) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p10) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        high = (((high + ((((haxe__Int32_Int32_Impl_.mul(a_low,b_high) + haxe__Int32_Int32_Impl_.mul(a_high,b_low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        result = haxe__Int64____Int64(high,low)
        b = 31
        b = (b & 63)
        b1 = (haxe__Int64____Int64(result.high,result.low) if ((b == 0)) else (haxe__Int64____Int64(((((result.high >> b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((((((result.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(result.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((result.high >> 31)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((result.high >> ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))))
        return haxe__Int64____Int64(((((result.high ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((result.low ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))

    @staticmethod
    def randomFromRange(_hx_min,_hx_max):
        s1 = uuid_Uuid.state0
        s0 = uuid_Uuid.state1
        uuid_Uuid.state0 = s0
        b = 23
        b = (b & 63)
        b1 = (haxe__Int64____Int64(s1.high,s1.low) if ((b == 0)) else (haxe__Int64____Int64(((((((((s1.high << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(s1.low, ((32 - b))))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((s1.low << b)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(((((s1.low << ((b - 32)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),0)))
        s1 = haxe__Int64____Int64(((((s1.high ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((s1.low ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))
        a_high = ((((s1.high ^ s0.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_low = ((((s1.low ^ s0.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        b = 18
        b = (b & 63)
        b1 = (haxe__Int64____Int64(s1.high,s1.low) if ((b == 0)) else (haxe__Int64____Int64(HxOverrides.rshift(s1.high, b),((((((((s1.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(s1.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(0,HxOverrides.rshift(s1.high, ((b - 32))))))
        a_high1 = ((((a_high ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_low1 = ((((a_low ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        b = 5
        b = (b & 63)
        b1 = (haxe__Int64____Int64(s0.high,s0.low) if ((b == 0)) else (haxe__Int64____Int64(HxOverrides.rshift(s0.high, b),((((((((s0.high << ((32 - b)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) | HxOverrides.rshift(s0.low, b))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))) if ((b < 32)) else haxe__Int64____Int64(0,HxOverrides.rshift(s0.high, ((b - 32))))))
        uuid_Uuid.state1 = haxe__Int64____Int64(((((a_high1 ^ b1.high)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)),((((a_low1 ^ b1.low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))
        a = uuid_Uuid.state1
        high = (((a.high + s0.high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((a.low + s0.low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,a.low) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        x = ((_hx_max - _hx_min) + 1)
        result = haxe__Int64_Int64_Impl_.divMod(haxe__Int64____Int64(high,low),haxe__Int64____Int64((x >> 31),x)).modulus.low
        if (result < 0):
            result = -result
        return (result + _hx_min)

    @staticmethod
    def randomByte():
        return uuid_Uuid.randomFromRange(0,255)

    @staticmethod
    def fromShort(shortUuid,separator = None,fromAlphabet = None):
        if (separator is None):
            separator = "-"
        if (fromAlphabet is None):
            fromAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        uuid = uuid_Uuid.convert(shortUuid,fromAlphabet,"0123456789abcdef")
        return uuid_Uuid.hexToUuid(uuid,separator)

    @staticmethod
    def toShort(uuid,separator = None,toAlphabet = None):
        if (separator is None):
            separator = "-"
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        uuid = StringTools.replace(uuid,separator,"").lower()
        return uuid_Uuid.convert(uuid,"0123456789abcdef",toAlphabet)

    @staticmethod
    def fromNano(nanoUuid,separator = None,fromAlphabet = None):
        if (separator is None):
            separator = "-"
        if (fromAlphabet is None):
            fromAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        uuid = uuid_Uuid.convert(nanoUuid,fromAlphabet,"0123456789abcdef")
        return uuid_Uuid.hexToUuid(uuid,separator)

    @staticmethod
    def toNano(uuid,separator = None,toAlphabet = None):
        if (separator is None):
            separator = "-"
        if (toAlphabet is None):
            toAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        uuid = StringTools.replace(uuid,separator,"").lower()
        return uuid_Uuid.convert(uuid,"0123456789abcdef",toAlphabet)

    @staticmethod
    def v1(node = None,optClockSequence = None,msecs = None,optNsecs = None,randomFunc = None,separator = None,shortUuid = None,toAlphabet = None):
        if (optClockSequence is None):
            optClockSequence = -1
        if (msecs is None):
            msecs = -1
        if (optNsecs is None):
            optNsecs = -1
        if (separator is None):
            separator = "-"
        if (shortUuid is None):
            shortUuid = False
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        if (randomFunc is None):
            randomFunc = uuid_Uuid.randomByte
        buffer = haxe_io_Bytes.alloc(16)
        if (node is None):
            node = haxe_io_Bytes.alloc(6)
            v = randomFunc()
            node.b[0] = (v & 255)
            v = randomFunc()
            node.b[1] = (v & 255)
            v = randomFunc()
            node.b[2] = (v & 255)
            v = randomFunc()
            node.b[3] = (v & 255)
            v = randomFunc()
            node.b[4] = (v & 255)
            v = randomFunc()
            node.b[5] = (v & 255)
            v = (node.b[0] | 1)
            node.b[0] = (v & 255)
        if (uuid_Uuid.clockSequenceBuffer == -1):
            uuid_Uuid.clockSequenceBuffer = ((((randomFunc() << 8) | randomFunc())) & 16383)
        clockSeq = optClockSequence
        if (optClockSequence == -1):
            clockSeq = uuid_Uuid.clockSequenceBuffer
        if (msecs == -1):
            v = (python_lib_Time.time() * 1000)
            msecs = (v if (((v == Math.POSITIVE_INFINITY) or ((v == Math.NEGATIVE_INFINITY)))) else (Math.NaN if (python_lib_Math.isnan(v)) else Math.floor((v + 0.5))))
        nsecs = optNsecs
        if (optNsecs == -1):
            nsecs = (uuid_Uuid.lastNSecs + 1)
        dt = ((msecs - uuid_Uuid.lastMSecs) + ((((nsecs - uuid_Uuid.lastNSecs)) / 10000)))
        if ((dt < 0) and ((optClockSequence == -1))):
            clockSeq = ((clockSeq + 1) & 16383)
        if ((((dt < 0) or ((msecs > uuid_Uuid.lastMSecs)))) and ((optNsecs == -1))):
            nsecs = 0
        if (nsecs >= 10000):
            raise haxe_Exception.thrown("Can't create more than 10M uuids/sec")
        uuid_Uuid.lastMSecs = msecs
        uuid_Uuid.lastNSecs = nsecs
        uuid_Uuid.clockSequenceBuffer = clockSeq
        msecs = (msecs + 12219292800000)
        imsecs = haxe_Int64Helper.fromFloat(msecs)
        b_high = 0
        b_low = 268435455
        a_high = (imsecs.high & b_high)
        a_low = (imsecs.low & b_low)
        b_high = 0
        b_low = 10000
        mask = 65535
        al = (a_low & mask)
        ah = HxOverrides.rshift(a_low, 16)
        bl = (b_low & mask)
        bh = HxOverrides.rshift(b_low, 16)
        p00 = haxe__Int32_Int32_Impl_.mul(al,bl)
        p10 = haxe__Int32_Int32_Impl_.mul(ah,bl)
        p01 = haxe__Int32_Int32_Impl_.mul(al,bh)
        p11 = haxe__Int32_Int32_Impl_.mul(ah,bh)
        low = p00
        high = ((((((p11 + (HxOverrides.rshift(p01, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + (HxOverrides.rshift(p10, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p01 = ((((p01 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p01) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p01) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p10 = ((((p10 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p10) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p10) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        high = (((high + ((((haxe__Int32_Int32_Impl_.mul(a_low,b_high) + haxe__Int32_Int32_Impl_.mul(a_high,b_low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_high = high
        a_low = low
        b_high = (nsecs >> 31)
        b_low = nsecs
        high = (((a_high + b_high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((a_low + b_low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,a_low) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        tl = haxe__Int64_Int64_Impl_.divMod(haxe__Int64____Int64(high,low),uuid_Uuid.DVS).modulus.low
        buffer.b[0] = ((HxOverrides.rshift(tl, 24) & 255) & 255)
        buffer.b[1] = ((HxOverrides.rshift(tl, 16) & 255) & 255)
        buffer.b[2] = ((HxOverrides.rshift(tl, 8) & 255) & 255)
        buffer.b[3] = ((tl & 255) & 255)
        a = haxe__Int64_Int64_Impl_.divMod(imsecs,uuid_Uuid.DVS).quotient
        b_high = 0
        b_low = 10000
        mask = 65535
        al = (a.low & mask)
        ah = HxOverrides.rshift(a.low, 16)
        bl = (b_low & mask)
        bh = HxOverrides.rshift(b_low, 16)
        p00 = haxe__Int32_Int32_Impl_.mul(al,bl)
        p10 = haxe__Int32_Int32_Impl_.mul(ah,bl)
        p01 = haxe__Int32_Int32_Impl_.mul(al,bh)
        p11 = haxe__Int32_Int32_Impl_.mul(ah,bh)
        low = p00
        high = ((((((p11 + (HxOverrides.rshift(p01, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31)) + (HxOverrides.rshift(p10, 16))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p01 = ((((p01 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p01) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p01) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        p10 = ((((p10 << 16)) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((low + p10) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,p10) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        high = (((high + ((((haxe__Int32_Int32_Impl_.mul(a.low,b_high) + haxe__Int32_Int32_Impl_.mul(a.high,b_low)) + (2 ** 31)) % (2 ** 32) - (2 ** 31)))) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_high = high
        a_low = low
        b_high = 0
        b_low = 268435455
        this_high = (a_high & b_high)
        this_low = (a_low & b_low)
        tmh = this_low
        buffer.b[4] = ((HxOverrides.rshift(tmh, 8) & 255) & 255)
        buffer.b[5] = ((tmh & 255) & 255)
        buffer.b[6] = ((((HxOverrides.rshift(tmh, 24) & 15) | 16)) & 255)
        buffer.b[7] = ((HxOverrides.rshift(tmh, 16) & 255) & 255)
        buffer.b[8] = (((HxOverrides.rshift(clockSeq, 8) | 128)) & 255)
        buffer.b[9] = ((clockSeq & 255) & 255)
        v = node.b[0]
        buffer.b[10] = (v & 255)
        v = node.b[1]
        buffer.b[11] = (v & 255)
        v = node.b[2]
        buffer.b[12] = (v & 255)
        v = node.b[3]
        buffer.b[13] = (v & 255)
        v = node.b[4]
        buffer.b[14] = (v & 255)
        v = node.b[5]
        buffer.b[15] = (v & 255)
        uuid = uuid_Uuid.stringify(buffer,separator)
        if shortUuid:
            uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet)
        return uuid

    @staticmethod
    def v3(name,namespace = None,separator = None,shortUuid = None,toAlphabet = None):
        if (namespace is None):
            namespace = ""
        if (separator is None):
            separator = "-"
        if (shortUuid is None):
            shortUuid = False
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        namespace = StringTools.replace(namespace,"-","")
        buffer = haxe_crypto_Md5.make(haxe_io_Bytes.ofHex((("null" if namespace is None else namespace) + HxOverrides.stringOrNull(haxe_io_Bytes.ofString(name).toHex()))))
        v = ((buffer.b[6] & 15) | 48)
        buffer.b[6] = (v & 255)
        v = ((buffer.b[8] & 63) | 128)
        buffer.b[8] = (v & 255)
        uuid = uuid_Uuid.stringify(buffer,separator)
        if shortUuid:
            uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet)
        return uuid

    @staticmethod
    def v4(randBytes = None,randomFunc = None,separator = None,shortUuid = None,toAlphabet = None):
        if (separator is None):
            separator = "-"
        if (shortUuid is None):
            shortUuid = False
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        if (randomFunc is None):
            randomFunc = uuid_Uuid.randomByte
        buffer = randBytes
        if (buffer is None):
            buffer = haxe_io_Bytes.alloc(16)
            v = randomFunc()
            buffer.b[0] = (v & 255)
            v = randomFunc()
            buffer.b[1] = (v & 255)
            v = randomFunc()
            buffer.b[2] = (v & 255)
            v = randomFunc()
            buffer.b[3] = (v & 255)
            v = randomFunc()
            buffer.b[4] = (v & 255)
            v = randomFunc()
            buffer.b[5] = (v & 255)
            v = randomFunc()
            buffer.b[6] = (v & 255)
            v = randomFunc()
            buffer.b[7] = (v & 255)
            v = randomFunc()
            buffer.b[8] = (v & 255)
            v = randomFunc()
            buffer.b[9] = (v & 255)
            v = randomFunc()
            buffer.b[10] = (v & 255)
            v = randomFunc()
            buffer.b[11] = (v & 255)
            v = randomFunc()
            buffer.b[12] = (v & 255)
            v = randomFunc()
            buffer.b[13] = (v & 255)
            v = randomFunc()
            buffer.b[14] = (v & 255)
            v = randomFunc()
            buffer.b[15] = (v & 255)
        elif (buffer.length < 16):
            raise haxe_Exception.thrown("Random bytes should be at least 16 bytes")
        v = ((buffer.b[6] & 15) | 64)
        buffer.b[6] = (v & 255)
        v = ((buffer.b[8] & 63) | 128)
        buffer.b[8] = (v & 255)
        uuid = uuid_Uuid.stringify(buffer,separator)
        if shortUuid:
            uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet)
        return uuid

    @staticmethod
    def v5(name,namespace = None,separator = None,shortUuid = None,toAlphabet = None):
        if (namespace is None):
            namespace = ""
        if (separator is None):
            separator = "-"
        if (shortUuid is None):
            shortUuid = False
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        namespace = StringTools.replace(namespace,"-","")
        buffer = haxe_crypto_Sha1.make(haxe_io_Bytes.ofHex((("null" if namespace is None else namespace) + HxOverrides.stringOrNull(haxe_io_Bytes.ofString(name).toHex()))))
        v = ((buffer.b[6] & 15) | 80)
        buffer.b[6] = (v & 255)
        v = ((buffer.b[8] & 63) | 128)
        buffer.b[8] = (v & 255)
        uuid = uuid_Uuid.stringify(buffer,separator)
        if shortUuid:
            uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet)
        return uuid

    @staticmethod
    def stringify(data,separator = None):
        if (separator is None):
            separator = "-"
        return uuid_Uuid.hexToUuid(data.toHex(),separator)

    @staticmethod
    def parse(uuid,separator = None):
        if (separator is None):
            separator = "-"
        return haxe_io_Bytes.ofHex(StringTools.replace(uuid,separator,""))

    @staticmethod
    def validate(uuid,separator = None):
        if (separator is None):
            separator = "-"
        if (separator == ""):
            uuid = ((((((((HxOverrides.stringOrNull(HxString.substr(uuid,0,8)) + "-") + HxOverrides.stringOrNull(HxString.substr(uuid,8,4))) + "-") + HxOverrides.stringOrNull(HxString.substr(uuid,12,4))) + "-") + HxOverrides.stringOrNull(HxString.substr(uuid,16,4))) + "-") + HxOverrides.stringOrNull(HxString.substr(uuid,20,12)))
        elif (separator != "-"):
            uuid = StringTools.replace(uuid,separator,"-")
        _this = uuid_Uuid.regexp
        _this.matchObj = python_lib_Re.search(_this.pattern,uuid)
        return (_this.matchObj is not None)

    @staticmethod
    def version(uuid,separator = None):
        if (separator is None):
            separator = "-"
        uuid = StringTools.replace(uuid,separator,"")
        return Std.parseInt(("0x" + HxOverrides.stringOrNull(HxString.substr(uuid,12,1))))

    @staticmethod
    def hexToUuid(hex,separator):
        return ((((((((HxOverrides.stringOrNull(HxString.substr(hex,0,8)) + ("null" if separator is None else separator)) + HxOverrides.stringOrNull(HxString.substr(hex,8,4))) + ("null" if separator is None else separator)) + HxOverrides.stringOrNull(HxString.substr(hex,12,4))) + ("null" if separator is None else separator)) + HxOverrides.stringOrNull(HxString.substr(hex,16,4))) + ("null" if separator is None else separator)) + HxOverrides.stringOrNull(HxString.substr(hex,20,12)))

    @staticmethod
    def convert(number,fromAlphabet,toAlphabet):
        fromBase = len(fromAlphabet)
        toBase = len(toAlphabet)
        _hx_len = len(number)
        buf = ""
        numberMap = ([None]*_hx_len)
        divide = 0
        newlen = 0
        _g = 0
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            _hx_str = ("" if (((i < 0) or ((i >= len(number))))) else number[i])
            startIndex = None
            val = (fromAlphabet.find(_hx_str) if ((startIndex is None)) else HxString.indexOfImpl(fromAlphabet,_hx_str,startIndex))
            numberMap[i] = val
        while True:
            divide = 0
            newlen = 0
            _g = 0
            _g1 = _hx_len
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                divide = ((divide * fromBase) + numberMap[i])
                if (divide >= toBase):
                    index = newlen
                    newlen = (newlen + 1)
                    val = Math.floor((divide / toBase))
                    numberMap[index] = val
                    divide = HxOverrides.mod(divide, toBase)
                elif (newlen > 0):
                    index1 = newlen
                    newlen = (newlen + 1)
                    numberMap[index1] = 0
            _hx_len = newlen
            buf = (HxOverrides.stringOrNull((("" if (((divide < 0) or ((divide >= len(toAlphabet))))) else toAlphabet[divide]))) + ("null" if buf is None else buf))
            if (not ((newlen != 0))):
                break
        return buf

    @staticmethod
    def nanoId(_hx_len = None,alphabet = None,randomFunc = None):
        if (_hx_len is None):
            _hx_len = 21
        if (alphabet is None):
            alphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        if (randomFunc is None):
            randomFunc = uuid_Uuid.randomByte
        if (alphabet is None):
            raise haxe_Exception.thrown("Alphabet cannot be null")
        if ((len(alphabet) == 0) or ((len(alphabet) >= 256))):
            raise haxe_Exception.thrown("Alphabet must contain between 1 and 255 symbols")
        if (_hx_len <= 0):
            raise haxe_Exception.thrown("Length must be greater than zero")
        v = (len(alphabet) - 1)
        mask = (((2 << Math.floor((((Math.NEGATIVE_INFINITY if ((v == 0.0)) else (Math.NaN if ((v < 0.0)) else python_lib_Math.log(v)))) / python_lib_Math.log(2))))) - 1)
        step = Math.ceil((((1.6 * mask) * _hx_len) / len(alphabet)))
        sb = StringBuf()
        while (sb.get_length() != _hx_len):
            _g = 0
            _g1 = step
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                rnd = randomFunc()
                aIndex = (rnd & mask)
                if (aIndex < len(alphabet)):
                    s = Std.string(("" if (((aIndex < 0) or ((aIndex >= len(alphabet))))) else alphabet[aIndex]))
                    sb.b.write(s)
                    if (sb.get_length() == _hx_len):
                        break
        return sb.b.getvalue()

    @staticmethod
    def short(toAlphabet = None,randomFunc = None):
        if (toAlphabet is None):
            toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
        return uuid_Uuid.v4(None,randomFunc,None,True,toAlphabet)
uuid_Uuid._hx_class = uuid_Uuid
_hx_classes["uuid.Uuid"] = uuid_Uuid

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi
sys_thread__Thread_HxThread.threads = haxe_ds_ObjectMap()
sys_thread__Thread_HxThread.threadsMutex = sys_thread_Mutex()
sys_thread__Thread_HxThread.mainThread = sys_thread__Thread_HxThread(python_lib_Threading.current_thread())
sys_thread__Thread_HxThread.mainThread.events = sys_thread_EventLoop()

haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS)
hscript_Parser.p1 = 0
hscript_Parser.tokenMin = 0
hscript_Parser.tokenMax = 0
hx_strings__Char_Char_Impl_.CHAR_CASE_MAPPER = hx_strings__Char_CharCaseMapper()
hx_strings__Char_Char_Impl_.BACKSPACE = 8
hx_strings__Char_Char_Impl_.TAB = 9
hx_strings__Char_Char_Impl_.LF = 10
hx_strings__Char_Char_Impl_.CR = 13
hx_strings__Char_Char_Impl_.ESC = 27
hx_strings__Char_Char_Impl_.SPACE = 32
hx_strings__Char_Char_Impl_.EXCLAMATION_MARK = 33
hx_strings__Char_Char_Impl_.DOUBLE_QUOTE = 34
hx_strings__Char_Char_Impl_.HASH = 35
hx_strings__Char_Char_Impl_.DOLLAR = 36
hx_strings__Char_Char_Impl_.AMPERSAND = 38
hx_strings__Char_Char_Impl_.SINGLE_QUOTE = 39
hx_strings__Char_Char_Impl_.BRACKET_ROUND_LEFT = 40
hx_strings__Char_Char_Impl_.BRACKET_ROUND_RIGHT = 41
hx_strings__Char_Char_Impl_.ASTERISK = 42
hx_strings__Char_Char_Impl_.PLUS = 43
hx_strings__Char_Char_Impl_.COMMA = 44
hx_strings__Char_Char_Impl_.MINUS = 45
hx_strings__Char_Char_Impl_.DOT = 46
hx_strings__Char_Char_Impl_.SLASH = 47
hx_strings__Char_Char_Impl_.ZERO = 48
hx_strings__Char_Char_Impl_.ONE = 49
hx_strings__Char_Char_Impl_.TWO = 50
hx_strings__Char_Char_Impl_.TRHEE = 51
hx_strings__Char_Char_Impl_.FOUR = 52
hx_strings__Char_Char_Impl_.FIVE = 53
hx_strings__Char_Char_Impl_.SIX = 54
hx_strings__Char_Char_Impl_.SEVEN = 55
hx_strings__Char_Char_Impl_.EIGHT = 56
hx_strings__Char_Char_Impl_.NINE = 57
hx_strings__Char_Char_Impl_.COLON = 58
hx_strings__Char_Char_Impl_.SEMICOLON = 59
hx_strings__Char_Char_Impl_.LOWER_THAN = 60
hx_strings__Char_Char_Impl_.EQUALS = 61
hx_strings__Char_Char_Impl_.GREATER_THAN = 62
hx_strings__Char_Char_Impl_.QUESTION_MARK = 63
hx_strings__Char_Char_Impl_.BRACKET_SQUARE_LEFT = 91
hx_strings__Char_Char_Impl_.BACKSLASH = 92
hx_strings__Char_Char_Impl_.BRACKET_SQUARE_RIGHT = 93
hx_strings__Char_Char_Impl_.CARET = 94
hx_strings__Char_Char_Impl_.UNDERSCORE = 95
hx_strings__Char_Char_Impl_.BRACKET_CURLY_LEFT = 123
hx_strings__Char_Char_Impl_.PIPE = 124
hx_strings__Char_Char_Impl_.BRACKET_CURLY_RIGHT = 125
hx_strings__CharIterator_NullCharIterator.INSTANCE = hx_strings__CharIterator_NullCharIterator()
hx_strings_Pattern.__meta__ = _hx_AnonObject({'obj': _hx_AnonObject({'immutable': None, 'threadSafe': None})})
hx_strings_Matcher.__meta__ = _hx_AnonObject({'obj': _hx_AnonObject({'notThreadSafe': None})})
hx_strings_StringBuilder.__meta__ = _hx_AnonObject({'obj': _hx_AnonObject({'notThreadSafe': None})})
def _hx_init_hx_strings_internal_OS_isWindows():
    def _hx_local_0():
        os = Sys.systemName()
        _this = EReg("win","i")
        _this.matchObj = python_lib_Re.search(_this.pattern,os)
        return (_this.matchObj is not None)
    return _hx_local_0()
hx_strings_internal_OS.isWindows = _hx_init_hx_strings_internal_OS_isWindows()
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")
hx_strings_Strings.REGEX_ANSI_ESC = hx_strings_Pattern.compile((HxOverrides.stringOrNull("".join(map(chr,[27]))) + "\\[[;\\d]*m"),hx_strings_internal__Either3__Either3.b("g"))
hx_strings_Strings.REGEX_HTML_UNESCAPE = hx_strings_Pattern.compile("&(#\\d+|amp|nbsp|apos|lt|gt|quot);",hx_strings_internal__Either3__Either3.b("g"))
hx_strings_Strings.REGEX_SPLIT_LINES = hx_strings_Pattern.compile("\\r?\\n",hx_strings_internal__Either3__Either3.b("g"))
hx_strings_Strings.REGEX_REMOVE_XML_TAGS = hx_strings_Pattern.compile("<[!a-zA-Z\\/][^>]*>",hx_strings_internal__Either3__Either3.b("g"))
hx_strings_Strings.POS_NOT_FOUND = -1
hx_strings_Strings.NEW_LINE_NIX = "\n"
hx_strings_Strings.NEW_LINE_WIN = "\r\n"
hx_strings_Strings.NEW_LINE = ("\r\n" if (hx_strings_internal_OS.isWindows) else "\n")
kiss_FuzzyMapTools.serializingMaps = haxe_ds_ObjectMap()
kiss_FuzzyMapTools.threshold = 0.4
python_Lib.lineEnd = ("\r\n" if ((Sys.systemName() == "Windows")) else "\n")
kiss_Prelude._hx_and = Reflect.makeVarArgs(kiss_Prelude._and)
kiss_Prelude._hx_or = Reflect.makeVarArgs(kiss_Prelude._or)
kiss_Prelude.add = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._add,"+")
kiss_Prelude.subtract = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._subtract,"-")
kiss_Prelude.multiply = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._multiply,"*")
kiss_Prelude.divide = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._divide,"/")
kiss_Prelude.min = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._min,"min")
kiss_Prelude.max = kiss_Prelude.makeVarArgsWithArrayCheck(kiss_Prelude._max,"max")
def _hx_init_kiss_Prelude_greaterThan():
    def _hx_local_0():
        op = ">"
        def _hx_local_2():
            def _hx_local_1(values):
                return kiss_Prelude._comparison(op,values)
            return kiss_Prelude.makeVarArgsWithArrayCheck(_hx_local_1,">")
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.greaterThan = _hx_init_kiss_Prelude_greaterThan()
def _hx_init_kiss_Prelude_greaterEqual():
    def _hx_local_0():
        op = ">="
        def _hx_local_2():
            def _hx_local_1(values):
                return kiss_Prelude._comparison(op,values)
            return kiss_Prelude.makeVarArgsWithArrayCheck(_hx_local_1,">=")
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.greaterEqual = _hx_init_kiss_Prelude_greaterEqual()
def _hx_init_kiss_Prelude_lessThan():
    def _hx_local_0():
        op = "<"
        def _hx_local_2():
            def _hx_local_1(values):
                return kiss_Prelude._comparison(op,values)
            return kiss_Prelude.makeVarArgsWithArrayCheck(_hx_local_1,"<")
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.lessThan = _hx_init_kiss_Prelude_lessThan()
def _hx_init_kiss_Prelude_lesserEqual():
    def _hx_local_0():
        op = "<="
        def _hx_local_2():
            def _hx_local_1(values):
                return kiss_Prelude._comparison(op,values)
            return kiss_Prelude.makeVarArgsWithArrayCheck(_hx_local_1,"<=")
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.lesserEqual = _hx_init_kiss_Prelude_lesserEqual()
def _hx_init_kiss_Prelude_areEqual():
    def _hx_local_0():
        op = "=="
        def _hx_local_2():
            def _hx_local_1(values):
                return kiss_Prelude._comparison(op,values)
            return kiss_Prelude.makeVarArgsWithArrayCheck(_hx_local_1,"=")
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.areEqual = _hx_init_kiss_Prelude_areEqual()
def _hx_init_kiss_Prelude_iHalf():
    def _hx_local_0():
        denom = 2
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iHalf = _hx_init_kiss_Prelude_iHalf()
def _hx_init_kiss_Prelude_iThird():
    def _hx_local_0():
        denom = 3
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iThird = _hx_init_kiss_Prelude_iThird()
def _hx_init_kiss_Prelude_iFourth():
    def _hx_local_0():
        denom = 4
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iFourth = _hx_init_kiss_Prelude_iFourth()
def _hx_init_kiss_Prelude_iFifth():
    def _hx_local_0():
        denom = 5
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iFifth = _hx_init_kiss_Prelude_iFifth()
def _hx_init_kiss_Prelude_iSixth():
    def _hx_local_0():
        denom = 6
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iSixth = _hx_init_kiss_Prelude_iSixth()
def _hx_init_kiss_Prelude_iSeventh():
    def _hx_local_0():
        denom = 7
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iSeventh = _hx_init_kiss_Prelude_iSeventh()
def _hx_init_kiss_Prelude_iEighth():
    def _hx_local_0():
        denom = 8
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iEighth = _hx_init_kiss_Prelude_iEighth()
def _hx_init_kiss_Prelude_iNinth():
    def _hx_local_0():
        denom = 9
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iNinth = _hx_init_kiss_Prelude_iNinth()
def _hx_init_kiss_Prelude_iTenth():
    def _hx_local_0():
        denom = 10
        def _hx_local_1(num):
            return kiss_Prelude.iFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.iTenth = _hx_init_kiss_Prelude_iTenth()
def _hx_init_kiss_Prelude_fHalf():
    def _hx_local_0():
        denom = 2
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fHalf = _hx_init_kiss_Prelude_fHalf()
def _hx_init_kiss_Prelude_fThird():
    def _hx_local_0():
        denom = 3
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fThird = _hx_init_kiss_Prelude_fThird()
def _hx_init_kiss_Prelude_fFourth():
    def _hx_local_0():
        denom = 4
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fFourth = _hx_init_kiss_Prelude_fFourth()
def _hx_init_kiss_Prelude_fFifth():
    def _hx_local_0():
        denom = 5
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fFifth = _hx_init_kiss_Prelude_fFifth()
def _hx_init_kiss_Prelude_fSixth():
    def _hx_local_0():
        denom = 6
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fSixth = _hx_init_kiss_Prelude_fSixth()
def _hx_init_kiss_Prelude_fSeventh():
    def _hx_local_0():
        denom = 7
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fSeventh = _hx_init_kiss_Prelude_fSeventh()
def _hx_init_kiss_Prelude_fEighth():
    def _hx_local_0():
        denom = 8
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fEighth = _hx_init_kiss_Prelude_fEighth()
def _hx_init_kiss_Prelude_fNinth():
    def _hx_local_0():
        denom = 9
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fNinth = _hx_init_kiss_Prelude_fNinth()
def _hx_init_kiss_Prelude_fTenth():
    def _hx_local_0():
        denom = 10
        def _hx_local_1(num):
            return kiss_Prelude.fFraction(num,denom)
        return _hx_local_1
    return _hx_local_0()
kiss_Prelude.fTenth = _hx_init_kiss_Prelude_fTenth()
kiss_Prelude.concat = Reflect.makeVarArgs(kiss_Prelude._concat)
def _hx_init_kiss_Prelude_zipKeep():
    def _hx_local_0():
        extraHandling = kiss_ExtraElementHandling.Keep
        def _hx_local_2():
            def _hx_local_1(iterables):
                return kiss_Prelude._zip(iterables,extraHandling)
            return Reflect.makeVarArgs(_hx_local_1)
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.zipKeep = _hx_init_kiss_Prelude_zipKeep()
def _hx_init_kiss_Prelude_zipDrop():
    def _hx_local_0():
        extraHandling = kiss_ExtraElementHandling.Drop
        def _hx_local_2():
            def _hx_local_1(iterables):
                return kiss_Prelude._zip(iterables,extraHandling)
            return Reflect.makeVarArgs(_hx_local_1)
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.zipDrop = _hx_init_kiss_Prelude_zipDrop()
def _hx_init_kiss_Prelude_zipThrow():
    def _hx_local_0():
        extraHandling = kiss_ExtraElementHandling.Throw
        def _hx_local_2():
            def _hx_local_1(iterables):
                return kiss_Prelude._zip(iterables,extraHandling)
            return Reflect.makeVarArgs(_hx_local_1)
        return _hx_local_2()
    return _hx_local_0()
kiss_Prelude.zipThrow = _hx_init_kiss_Prelude_zipThrow()
kiss_Prelude.intersect = Reflect.makeVarArgs(kiss_Prelude._intersect)
kiss_Prelude.joinPath = Reflect.makeVarArgs(kiss_Prelude._joinPath)
kiss_Prelude.externLogFile = "externLog.txt"
kiss_Prelude.printStr = kiss_Prelude._printStr
kiss_Prelude.kissProcess = None
kiss_Prelude.cachedConvertToHScript = kiss_Prelude.fsMemoize(kiss_Prelude.convertToHScript,"convertToHScript",(("" + HxOverrides.stringOrNull(kiss_Prelude.userHome())) + "/.kiss-cache"))
kiss_Prelude.shellCountMutex = sys_thread_Mutex()
kiss_Prelude.shellCount = 0
kiss_Prelude.newLine = "\n"
kiss_Prelude.backSlash = "\\"
kiss_Prelude.doubleQuote = "\""
kiss_Prelude.dollar = "$"
nat_ArchiveController.commandNames = []
def _hx_init_nat_systems_MediaWikiSystem_headers():
    def _hx_local_0():
        _g = haxe_ds_StringMap()
        _g.h["User-Agent"] = "NatArchiveTool/0.0.0 (https://github.com/NQNStudios/kisslang/tree/main/projects/nat-archive-tool; natquaylenelson@gmail.com) Requests/2.26.0"
        return _g
    return _hx_local_0()
nat_systems_MediaWikiSystem.headers = _hx_init_nat_systems_MediaWikiSystem_headers()
tink_core__Callback_Callback_Impl_.depth = 0
tink_core__Callback_Callback_Impl_.MAX_DEPTH = 100
tink_core_AlreadyDisposed.INST = tink_core_AlreadyDisposed()
tink_core__Future_Future_Impl_.NOISE = tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(None))
tink_core__Future_Future_Impl_.NEVER_INST = tink_core__Future_FutureObject()
tink_core__Future_Future_Impl_.NEVER = tink_core__Future_Future_Impl_.NEVER_INST
tink_core__Lazy_Lazy_Impl_.NOISE = tink_core__Lazy_LazyConst(None)
tink_core__Lazy_Lazy_Impl_.NULL = tink_core__Lazy_Lazy_Impl_.NOISE
tink_core__Noise_Noise_Impl_.Noise = None
tink_core__Progress_ProgressValue_Impl_.ZERO = tink_core_MPair(0,haxe_ds_Option._hx_None)
tink_core__Progress_Progress_Impl_.INIT = tink_core__Progress_ProgressValue_Impl_.ZERO
tink_core__Promise_Promise_Impl_.NOISE = tink_core__Future_SyncFuture(tink_core__Lazy_LazyConst(tink_core_Outcome.Success(None)))
tink_core__Promise_Promise_Impl_.NEVER = tink_core__Promise_Promise_Impl_.never()
tink_core__Signal_Disposed.INST = tink_core__Signal_Disposed()
tink_json_BasicParser.DBQT = "".join(map(chr,[34]))
tink_json__Writer_StringWriter.encoder = python_lib_json_JSONEncoder()
uuid_Uuid.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
uuid_Uuid.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8"
uuid_Uuid.ISO_OID = "6ba7b812-9dad-11d1-80b4-00c04fd430c8"
uuid_Uuid.X500_DN = "6ba7b814-9dad-11d1-80b4-00c04fd430c8"
uuid_Uuid.NIL = "00000000-0000-0000-0000-000000000000"
uuid_Uuid.LOWERCASE_BASE26 = "abcdefghijklmnopqrstuvwxyz"
uuid_Uuid.UPPERCASE_BASE26 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
uuid_Uuid.NO_LOOK_ALIKES_BASE51 = "2346789ABCDEFGHJKLMNPQRTUVWXYZabcdefghijkmnpqrtwxyz"
uuid_Uuid.FLICKR_BASE58 = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
uuid_Uuid.BASE_70 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+!@#$^"
uuid_Uuid.BASE_85 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#"
uuid_Uuid.COOKIE_BASE90 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~"
uuid_Uuid.NANO_ID_ALPHABET = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
uuid_Uuid.NUMBERS_BIN = "01"
uuid_Uuid.NUMBERS_OCT = "01234567"
uuid_Uuid.NUMBERS_DEC = "0123456789"
uuid_Uuid.NUMBERS_HEX = "0123456789abcdef"
uuid_Uuid.lastMSecs = 0
uuid_Uuid.lastNSecs = 0
uuid_Uuid.clockSequenceBuffer = -1
uuid_Uuid.regexp = EReg("^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$","i")
uuid_Uuid.rndSeed = haxe_Int64Helper.fromFloat((python_lib_Time.time() * 1000))
uuid_Uuid.state0 = uuid_Uuid.splitmix64_seed(uuid_Uuid.rndSeed)
def _hx_init_uuid_Uuid_state1():
    def _hx_local_0():
        a = uuid_Uuid.rndSeed
        x = int((python_lib_Random.random() * 10000))
        b_high = (x >> 31)
        b_low = x
        high = (((a.high + b_high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((a.low + b_low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,a.low) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        a_high = high
        a_low = low
        b_high = 0
        b_low = 1
        high = (((a_high + b_high) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        low = (((a_low + b_low) + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        if (haxe__Int32_Int32_Impl_.ucompare(low,a_low) < 0):
            ret = high
            high = (high + 1)
            high = ((high + (2 ** 31)) % (2 ** 32) - (2 ** 31))
        return uuid_Uuid.splitmix64_seed(haxe__Int64____Int64(high,low))
    return _hx_local_0()
uuid_Uuid.state1 = _hx_init_uuid_Uuid_state1()
uuid_Uuid.DVS = haxe__Int64____Int64(1,0)

test_TestMain.main()
sys_thread__Thread_Thread_Impl_.processEvents()
